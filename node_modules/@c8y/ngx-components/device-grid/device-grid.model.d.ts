import { IManagedObject } from '@c8y/client';
import { Column, ColumnSortingConfig, ExtensionFactory, FilteringModifier, FormlyColumnFilteringConfig, PathSortingConfig as CorePathSortingConfig, ServerSideDataResult, SortOrderModifier as CoreSortOrderModifier, BuiltInActionType } from '@c8y/ngx-components';
import { Observable } from 'rxjs';
export declare type DataCallback = (serverSideDataResult: ServerSideDataResult) => ServerSideDataResult;
/**
 * @deprecated Use <code>import { Column } from '@c8y/ngx-components';</code> instead.
 */
export interface DeviceGridColumn extends Column {
}
/**
 * @deprecated Use <code>import { FormlyColumnFilteringConfig } from '@c8y/ngx-components';</code> instead.
 */
export interface DeviceGridFormlyColumnFilteringConfig extends FormlyColumnFilteringConfig {
}
/**
 * @deprecated Use <code>import { ColumnSortingConfig } from '@c8y/ngx-components';</code> instead.
 */
export interface DeviceGridColumnSortingConfig extends ColumnSortingConfig {
}
/**
 * @deprecated Use <code>import { PathSortingConfig } from '@c8y/ngx-components';</code> instead.
 */
export interface PathSortingConfig extends CorePathSortingConfig {
}
/**
 * @deprecated Use <code>import { SortOrderModifier } from '@c8y/ngx-components';</code> instead.
 */
export declare type SortOrderModifier = CoreSortOrderModifier;
export interface FilterConfig {
    columnName: string;
    filteringModifier: FilteringModifier;
}
export declare const enum DeviceGridActionType {
    Delete = "DELETE"
}
export declare const enum DeviceGridBulkActionType {
}
/**
 * Defines an action hook for the device grid.
 *
 * @interface DeviceGridActionHook
 * @member {BuiltInActionType} type of the action
 * @member {boolean} refreshAfterActionDone refreshs the device grid after the action execution
 * @member {(mo: IManagedObject) => boolean} deviceMatches resolves the object of the row and needs to return true for an element that you want to execute your action on
 * ```typescript
 *  {
 *     ...
 *     deviceMatches: (device: IManagedObject) => device?.type === 'my_custom_type'
 *  }
 * ```
 * @member {(mo: IManagedObject) => Observable<unknown> | Promise<unknown> | unknown} onAction is called for a matching device. It resolves the object of the row.
 * ```typescript
 *  {
 *     ...
 *     onAction: (device: IManagedObject) => this.myService.triggerCustomAction(device)
 *  }
 * ```
 */
export interface DeviceGridActionHook {
    type: BuiltInActionType;
    refreshAfterActionDone: boolean;
    deviceMatches: (mo: IManagedObject) => boolean;
    onAction: (mo: IManagedObject) => Observable<unknown> | Promise<unknown> | unknown;
}
export declare type DeviceGridExtensionFactory = ExtensionFactory<DeviceGridActionHook>;
