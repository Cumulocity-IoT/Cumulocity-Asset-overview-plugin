import { AfterViewInit, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { DashboardChildActionComponent } from './dashboard-child-action.component';
import { DashboardChildComponent } from './dashboard-child.component';
import { WidgetsDashboardEventService } from './widgets-dashboard-event.service';
import { DateTimeContext } from './widget-change-event.model';
import { FormGroup } from '@angular/forms';
import { FormlyFieldConfig } from '@ngx-formly/core';
import { ActivatedRoute, Router } from '@angular/router';
import { PredefinedTimeSpan } from './widget-time-context.model';
import * as i0 from "@angular/core";
export declare class WidgetTimeContextComponent implements OnInit, OnDestroy, AfterViewInit {
    private widgetEventService;
    private dashboardChild;
    private router;
    private activatedRoute;
    /**
     * Indicates if the component can decouple or not.
     */
    canDecouple: boolean;
    /**
     * The dates to set as default [from, to].
     */
    defaultDate: DateTimeContext;
    /**
     * The global time context value.
     */
    globalDate: DateTimeContext;
    /**
     * Emits each change as an array of dates [from, to].
     */
    dateContextChange: EventEmitter<DateTimeContext>;
    /**
     * @ignore
     */
    action: DashboardChildActionComponent;
    /**
     * The current local date if decoupled.
     */
    localDate: DateTimeContext;
    /**
     * Indicates if the time context is bound to the global scope.
     */
    isCoupled: boolean;
    decoupleTimeContextLabel: "Decouple time context";
    coupleTimeContextLabel: "Couple time context";
    form: FormGroup;
    fields: FormlyFieldConfig[];
    model: {
        fromDate: string;
        toDate: string;
    };
    predefinedTimeSpanList: PredefinedTimeSpan[];
    currentPredefinedTimeSpan: PredefinedTimeSpan;
    private subscription;
    /**
     * @ignore only DI.
     */
    constructor(widgetEventService: WidgetsDashboardEventService, dashboardChild: DashboardChildComponent, router: Router, activatedRoute: ActivatedRoute);
    /**
     * @ignore Subscribing to the global context.
     */
    ngOnInit(): void;
    /**
     * @ignore Adding custom actions.
     */
    ngAfterViewInit(): void;
    /**
     * Toggles the coupling on or off.
     */
    toggleDecoupling(): void;
    /**
     * Applies form value to global or local date context.
     */
    applyDatetimeContext(): void;
    /**
     * Resets form to initial value and update context.
     */
    reset(): void;
    /**
     * @ignore unsubscribing.
     */
    ngOnDestroy(): void;
    predefinedDateFromSelected(selectedDateFrom: PredefinedTimeSpan): void;
    private updateDefaultDate;
    private setPredefinedDates;
    /**
     * Initializes datetime picker form with proper fields and initial value.
     * @param initialValue Value to fill form with.
     */
    private initForm;
    /**
     * Fires a new WidgetChangeEvent either on the local change emitter or on the global one.
     * @param dateRange The event data to send.
     * @param predefinedDateFrom Time range selected from dropdown.
     */
    private update;
    private subscribeToGlobalContext;
    private updateFormValues;
    private unsubscribeFromGlobalContext;
    private getInitialDate;
    private isValidDateRange;
    /**
     * Sets date context as url query params.
     */
    private setDateContextQueryParams;
    private subscribeToQueryParamsChange;
    private getCurrentPredefinedTimeSpan;
    static ɵfac: i0.ɵɵFactoryDeclaration<WidgetTimeContextComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<WidgetTimeContextComponent, "c8y-widget-time-context", never, { "canDecouple": "canDecouple"; }, { "dateContextChange": "dateContextChange"; }, never, never, false>;
}
