import { Component, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { InventoryService } from '@c8y/client';
import { ViewContext } from '@c8y/ngx-components';
import { ContextDashboardService } from './context-dashboard.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./context-dashboard.service";
import * as i3 from "@c8y/client";
import * as i4 from "@c8y/ngx-components";
export class PasteDashboardActionComponent {
    constructor(vcRef, router, contextDashboardService, inventoryService) {
        this.vcRef = vcRef;
        this.router = router;
        this.contextDashboardService = contextDashboardService;
        this.inventoryService = inventoryService;
        this.dashboardName = '';
    }
    ngOnInit() {
        this.vcRef.createEmbeddedView(this.templatePaste);
        const clipboard = this.contextDashboardService.copyClipboard;
        if (clipboard) {
            this.dashboardName = clipboard.dashboard.name;
        }
    }
    async pasteDashboard() {
        let context;
        const currentUrl = this.router.url;
        const isDevice = new RegExp(/device\/\d+/).test(currentUrl);
        const isGroup = new RegExp(/group\/\d+/).test(currentUrl);
        const id = currentUrl.match(/\d+/)[0];
        if (isDevice) {
            context = {
                context: ViewContext.Device,
                contextData: await this.getContextMo(id)
            };
        }
        else if (isGroup) {
            context = {
                context: ViewContext.Group,
                contextData: await this.getContextMo(id)
            };
        }
        this.contextDashboardService.pasteDashboard(context);
    }
    async getContextMo(id) {
        return (await this.inventoryService.detail(id)).data;
    }
}
PasteDashboardActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: PasteDashboardActionComponent, deps: [{ token: i0.ViewContainerRef }, { token: i1.Router }, { token: i2.ContextDashboardService }, { token: i3.InventoryService }], target: i0.ɵɵFactoryTarget.Component });
PasteDashboardActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.6", type: PasteDashboardActionComponent, selector: "c8y-paste-dashboard-action", viewQueries: [{ propertyName: "templatePaste", first: true, predicate: ["templatePaste"], descendants: true, read: TemplateRef, static: true }], ngImport: i0, template: `
    <ng-template #templatePaste>
      <li>
        <button title="{{ 'Paste dashboard' | translate }}" (click)="pasteDashboard()">
          <i class="m-r-4" c8yIcon="clipboard"></i><span translate>Paste dashboard</span>&nbsp;<span
            >"{{ dashboardName }}"</span
          >
        </button>
      </li>
    </ng-template>
  `, isInline: true, dependencies: [{ kind: "directive", type: i4.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i4.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "pipe", type: i4.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: PasteDashboardActionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'c8y-paste-dashboard-action',
                    template: `
    <ng-template #templatePaste>
      <li>
        <button title="{{ 'Paste dashboard' | translate }}" (click)="pasteDashboard()">
          <i class="m-r-4" c8yIcon="clipboard"></i><span translate>Paste dashboard</span>&nbsp;<span
            >"{{ dashboardName }}"</span
          >
        </button>
      </li>
    </ng-template>
  `
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i1.Router }, { type: i2.ContextDashboardService }, { type: i3.InventoryService }]; }, propDecorators: { templatePaste: [{
                type: ViewChild,
                args: ['templatePaste', { read: TemplateRef, static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzdGUtZGFzaGJvYXJkLWFjdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9jb250ZXh0LWRhc2hib2FyZC9wYXN0ZS1kYXNoYm9hcmQtYWN0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFdBQVcsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBa0IsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDL0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWxELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDOzs7Ozs7QUFnQnRFLE1BQU0sT0FBTyw2QkFBNkI7SUFJeEMsWUFDVSxLQUF1QixFQUN2QixNQUFjLEVBQ2QsdUJBQWdELEVBQ2hELGdCQUFrQztRQUhsQyxVQUFLLEdBQUwsS0FBSyxDQUFrQjtRQUN2QixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtRQUNoRCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBTjVDLGtCQUFhLEdBQUcsRUFBRSxDQUFDO0lBT2hCLENBQUM7SUFFSixRQUFRO1FBQ04sSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDbEQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLGFBQWEsQ0FBQztRQUM3RCxJQUFJLFNBQVMsRUFBRTtZQUNiLElBQUksQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7U0FDL0M7SUFDSCxDQUFDO0lBRUQsS0FBSyxDQUFDLGNBQWM7UUFDbEIsSUFBSSxPQUF5QixDQUFDO1FBQzlCLE1BQU0sVUFBVSxHQUFXLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQzNDLE1BQU0sUUFBUSxHQUFZLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyRSxNQUFNLE9BQU8sR0FBWSxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbkUsTUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV0QyxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sR0FBRztnQkFDUixPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU07Z0JBQzNCLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDO2FBQ3pDLENBQUM7U0FDSDthQUFNLElBQUksT0FBTyxFQUFFO1lBQ2xCLE9BQU8sR0FBRztnQkFDUixPQUFPLEVBQUUsV0FBVyxDQUFDLEtBQUs7Z0JBQzFCLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDO2FBQ3pDLENBQUM7U0FDSDtRQUNELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVPLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBVTtRQUNuQyxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3ZELENBQUM7OzBIQTFDVSw2QkFBNkI7OEdBQTdCLDZCQUE2Qiw2SkFDSixXQUFXLDJDQWJyQzs7Ozs7Ozs7OztHQVVUOzJGQUVVLDZCQUE2QjtrQkFkekMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsNEJBQTRCO29CQUN0QyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7R0FVVDtpQkFDRjtpTUFFa0UsYUFBYTtzQkFBN0UsU0FBUzt1QkFBQyxlQUFlLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IElNYW5hZ2VkT2JqZWN0LCBJbnZlbnRvcnlTZXJ2aWNlIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgVmlld0NvbnRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IERhc2hib2FyZENvbnRleHQgfSBmcm9tICcuL2NvbnRleHQtZGFzaGJvYXJkLm1vZGVsJztcbmltcG9ydCB7IENvbnRleHREYXNoYm9hcmRTZXJ2aWNlIH0gZnJvbSAnLi9jb250ZXh0LWRhc2hib2FyZC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LXBhc3RlLWRhc2hib2FyZC1hY3Rpb24nLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy10ZW1wbGF0ZSAjdGVtcGxhdGVQYXN0ZT5cbiAgICAgIDxsaT5cbiAgICAgICAgPGJ1dHRvbiB0aXRsZT1cInt7ICdQYXN0ZSBkYXNoYm9hcmQnIHwgdHJhbnNsYXRlIH19XCIgKGNsaWNrKT1cInBhc3RlRGFzaGJvYXJkKClcIj5cbiAgICAgICAgICA8aSBjbGFzcz1cIm0tci00XCIgYzh5SWNvbj1cImNsaXBib2FyZFwiPjwvaT48c3BhbiB0cmFuc2xhdGU+UGFzdGUgZGFzaGJvYXJkPC9zcGFuPiZuYnNwOzxzcGFuXG4gICAgICAgICAgICA+XCJ7eyBkYXNoYm9hcmROYW1lIH19XCI8L3NwYW5cbiAgICAgICAgICA+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9saT5cbiAgICA8L25nLXRlbXBsYXRlPlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIFBhc3RlRGFzaGJvYXJkQWN0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQFZpZXdDaGlsZCgndGVtcGxhdGVQYXN0ZScsIHsgcmVhZDogVGVtcGxhdGVSZWYsIHN0YXRpYzogdHJ1ZSB9KSB0ZW1wbGF0ZVBhc3RlO1xuICBkYXNoYm9hcmROYW1lID0gJyc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB2Y1JlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgY29udGV4dERhc2hib2FyZFNlcnZpY2U6IENvbnRleHREYXNoYm9hcmRTZXJ2aWNlLFxuICAgIHByaXZhdGUgaW52ZW50b3J5U2VydmljZTogSW52ZW50b3J5U2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy52Y1JlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVBhc3RlKTtcbiAgICBjb25zdCBjbGlwYm9hcmQgPSB0aGlzLmNvbnRleHREYXNoYm9hcmRTZXJ2aWNlLmNvcHlDbGlwYm9hcmQ7XG4gICAgaWYgKGNsaXBib2FyZCkge1xuICAgICAgdGhpcy5kYXNoYm9hcmROYW1lID0gY2xpcGJvYXJkLmRhc2hib2FyZC5uYW1lO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHBhc3RlRGFzaGJvYXJkKCkge1xuICAgIGxldCBjb250ZXh0OiBEYXNoYm9hcmRDb250ZXh0O1xuICAgIGNvbnN0IGN1cnJlbnRVcmw6IHN0cmluZyA9IHRoaXMucm91dGVyLnVybDtcbiAgICBjb25zdCBpc0RldmljZTogYm9vbGVhbiA9IG5ldyBSZWdFeHAoL2RldmljZVxcL1xcZCsvKS50ZXN0KGN1cnJlbnRVcmwpO1xuICAgIGNvbnN0IGlzR3JvdXA6IGJvb2xlYW4gPSBuZXcgUmVnRXhwKC9ncm91cFxcL1xcZCsvKS50ZXN0KGN1cnJlbnRVcmwpO1xuICAgIGNvbnN0IGlkID0gY3VycmVudFVybC5tYXRjaCgvXFxkKy8pWzBdO1xuXG4gICAgaWYgKGlzRGV2aWNlKSB7XG4gICAgICBjb250ZXh0ID0ge1xuICAgICAgICBjb250ZXh0OiBWaWV3Q29udGV4dC5EZXZpY2UsXG4gICAgICAgIGNvbnRleHREYXRhOiBhd2FpdCB0aGlzLmdldENvbnRleHRNbyhpZClcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChpc0dyb3VwKSB7XG4gICAgICBjb250ZXh0ID0ge1xuICAgICAgICBjb250ZXh0OiBWaWV3Q29udGV4dC5Hcm91cCxcbiAgICAgICAgY29udGV4dERhdGE6IGF3YWl0IHRoaXMuZ2V0Q29udGV4dE1vKGlkKVxuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5jb250ZXh0RGFzaGJvYXJkU2VydmljZS5wYXN0ZURhc2hib2FyZChjb250ZXh0KTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0Q29udGV4dE1vKGlkOiBzdHJpbmcpOiBQcm9taXNlPElNYW5hZ2VkT2JqZWN0PiB7XG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLmludmVudG9yeVNlcnZpY2UuZGV0YWlsKGlkKSkuZGF0YTtcbiAgfVxufVxuIl19