import { Component, ContentChild, ElementRef, EventEmitter, Inject, Input, Optional, Output, ViewChild } from '@angular/core';
import { gettext, ManagedObjectRealtimeService, sortByPriority } from '@c8y/ngx-components';
import { TranslateService } from '@ngx-translate/core';
import { flatten } from 'lodash-es';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { MapPopupDirective } from './map-popup.directive';
import { defaultLayer, defaultMapConfig, getC8yMarker, getStatus, MAP_DEFAULT_CONFIG, MAP_TILE_LAYER } from './map.model';
import { MapService } from './map.service';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "./map.service";
import * as i3 from "@ngx-translate/core";
export class MapComponent {
    constructor(moRealtimeService, mapService, layers, defaultConfig, translateService) {
        this.moRealtimeService = moRealtimeService;
        this.mapService = mapService;
        this.layers = layers;
        this.defaultConfig = defaultConfig;
        this.translateService = translateService;
        this.markers = [];
        this.config = {};
        this.onMove = new EventEmitter();
        this.onMoveEnd = new EventEmitter();
        this.onZoomStart = new EventEmitter();
        this.onZoomEnd = new EventEmitter();
        this.destroy$ = new Subject();
        if (!this.layers) {
            this.layers = [defaultLayer];
        }
        if (!this.defaultConfig) {
            this.defaultConfig = defaultMapConfig;
        }
    }
    startRealtime() {
        if (!this.assets || (Array.isArray(this.assets) && this.assets.length > 1)) {
            this.config.realtime = false;
            this.stopRealtime();
            return;
        }
        const asset = Array.isArray(this.assets) ? this.assets[0] : this.assets;
        this.realtimeSubscription = this.moRealtimeService
            .onUpdate$(asset)
            .subscribe((asset) => {
            const marker = this.findMarker(asset.id);
            const icon = this.getAssetIcon(asset);
            marker.setIcon(icon);
            marker.setLatLng([asset.c8y_Position.lat, asset.c8y_Position.lng]);
            if (Array.isArray(this.assets)) {
                this.assets[0] = asset;
            }
            else {
                this.assets = asset;
            }
            this.moveToPositionOfMo(asset);
        });
    }
    moveToPositionOfMo(positions) {
        const position = Array.isArray(positions) ? positions[0] : positions;
        if (this.config.follow) {
            this.map.setView([position.c8y_Position.lat, position.c8y_Position.lng]);
        }
    }
    stopRealtime() {
        if (this.realtimeSubscription) {
            this.realtimeSubscription.unsubscribe();
        }
    }
    findMarker(assetId) {
        return this.markers.find((marker) => marker.asset?.id === assetId);
    }
    addMarkerToMap(marker) {
        this.markers.push(marker);
        marker.addTo(this.map);
    }
    getAssetMarker(asset) {
        const icon = this.getAssetIcon(asset);
        const leafletMarker = this.leaflet.marker([asset.c8y_Position.lat, asset.c8y_Position.lng], {
            icon
        });
        const marker = getC8yMarker(leafletMarker, asset);
        if (this.popup) {
            marker.on('click', () => {
                this.popup.viewContainer.clear();
                const view = this.popup.viewContainer.createEmbeddedView(this.popup.template, {
                    $implicit: asset
                });
                view.detectChanges();
                marker
                    .unbindPopup()
                    .bindPopup(this.popup.elementRef.nativeElement.previousSibling, {
                    offset: [0, -30],
                    maxWidth: 140,
                    autoPan: false
                })
                    .openPopup();
            });
        }
        return marker;
    }
    getAssetIcon(asset) {
        const assetTypeIcon = this.config.icon || asset.icon?.name;
        const status = getStatus(asset);
        const color = this.config.color ? `style='color: ${this.config.color};'` : '';
        const icon = this.leaflet.divIcon({
            html: `<div class="dlt-c8y-icon-marker icon-3x ${status}" ${color}><i class="dlt-c8y-icon-${assetTypeIcon || 'data-transfer'}" /></div>`,
            className: 'c8y-map-marker-icon'
        });
        return icon;
    }
    clearMarkers() {
        this.markers.forEach(marker => marker.remove());
        this.markers = [];
    }
    refreshMarkers() {
        this.clearMarkers();
        const assets = Array.isArray(this.assets) ? this.assets : [this.assets];
        assets.forEach(asset => {
            const marker = this.getAssetMarker(asset);
            this.addMarkerToMap(marker);
        });
        if (!this.config.center) {
            this.zoomToBound(assets);
        }
        this.toggleControls();
    }
    center() {
        this.map.setView(this.config.center || this.defaultConfig.center);
    }
    async ngAfterViewInit() {
        this.leaflet = await this.mapService.getLeaflet();
        this.initMap();
    }
    ngOnChanges(changes) {
        if (changes.assets?.currentValue && !changes.assets?.firstChange) {
            this.refreshMarkers();
        }
        if (changes.config?.currentValue && !changes.config?.firstChange) {
            this.changeConfig(changes.config);
        }
    }
    ngOnDestroy() {
        this.unsubscribeAllListeners();
    }
    unsubscribeAllListeners() {
        this.destroy$.next();
        this.stopRealtime();
    }
    initMap() {
        const defaultOptions = {
            center: this.config.center || this.defaultConfig.center,
            zoomSnap: 0,
            zoom: this.config.zoomLevel || this.defaultConfig.zoomLevel
        };
        if (this.map) {
            this.map.remove();
        }
        this.map = this.leaflet.map(this.mapElement.nativeElement, defaultOptions);
        this.map.attributionControl.setPrefix('');
        this.addLayers();
        this.handleMobile();
        fromEvent(this.map, 'moveend')
            .pipe(takeUntil(this.destroy$))
            .subscribe(event => this.onMoveEnd.emit(event));
        fromEvent(this.map, 'move')
            .pipe(takeUntil(this.destroy$))
            .subscribe(event => this.onMove.emit(event));
        fromEvent(this.map, 'zoomend')
            .pipe(takeUntil(this.destroy$))
            .subscribe(event => this.onZoomEnd.emit(event));
        fromEvent(this.map, 'zoomstart')
            .pipe(takeUntil(this.destroy$))
            .subscribe(event => this.onZoomStart.emit(event));
    }
    handleMobile() {
        // adding event listener to do mobile 2 finger scrolling
        if (this.leaflet.Browser.mobile) {
            const touchMsg = this.translateService.instant(gettext('Use two fingers to move the map.'));
            this.map.dragging.disable();
            const container = this.map.getContainer();
            container.setAttribute('data-touch-warning-content', touchMsg);
            container.addEventListener('touchstart', event => this.handleTouch(event));
            container.addEventListener('touchmove', event => this.handleTouch(event));
            container.addEventListener('touchend', event => this.handleTouch(event));
            container.addEventListener('touchcancel', event => this.handleTouch(event));
            container.addEventListener('click', event => this.handleTouch(event));
        }
    }
    addLayers() {
        const flattenLayers = flatten(this.layers);
        const tileLayers = sortByPriority(flattenLayers).reduce((acc, layer) => {
            const tiles = this.leaflet.tileLayer(layer.layerUrl, layer.options);
            tiles.addTo(this.map);
            acc = { [layer.label]: tiles, ...acc };
            return acc;
        }, {});
        if (flattenLayers.length > 1) {
            this.leaflet.control.layers(tileLayers).addTo(this.map);
        }
    }
    changeConfig(change) {
        if (this.hasChanged(change, 'zoomLevel')) {
            this.map.setZoom(this.config.zoomLevel);
        }
        if (this.hasChanged(change, 'center')) {
            this.map.setView(change.currentValue.center || this.defaultConfig.center);
        }
        if (this.hasChanged(change, 'icon') || this.hasChanged(change, 'color')) {
            this.refreshMarkers();
        }
        if (this.hasChanged(change, 'realtime') && change.currentValue.realtime) {
            this.startRealtime();
        }
        if (change.currentValue.realtime === false) {
            this.stopRealtime();
        }
        if (this.hasChanged(change, 'follow')) {
            this.moveToPositionOfMo(this.assets);
        }
        if (this.hasChanged(change, 'disablePan') || this.hasChanged(change, 'disableZoom')) {
            this.toggleControls();
        }
    }
    hasChanged(change, prop) {
        return change.currentValue[prop] !== change.previousValue[prop];
    }
    toggleControls() {
        if (this.config.disableZoom) {
            this.map.removeControl(this.map.zoomControl);
            this.map.scrollWheelZoom.disable();
        }
        else {
            this.map.addControl(this.map.zoomControl);
            this.map.scrollWheelZoom.enable();
        }
        if (this.config.disablePan) {
            this.map.dragging.disable();
        }
        else {
            this.map.dragging.enable();
        }
    }
    handleTouch(e) {
        // Disregard touch events on the minimap if present
        const ignoreList = [
            'leaflet-control-minimap',
            'leaflet-interactive',
            'leaflet-popup-content',
            'leaflet-popup-content-wrapper',
            'leaflet-popup-close-button',
            'leaflet-control-zoom-in',
            'leaflet-control-zoom-out'
        ];
        let ignoreElement = false;
        for (let i = 0; i < ignoreList.length; i++) {
            if (this.leaflet.DomUtil.hasClass(e.target, ignoreList[i])) {
                ignoreElement = true;
            }
        }
        const container = this.map.getContainer();
        if (ignoreElement) {
            if (this.leaflet.DomUtil.hasClass(e.target, 'leaflet-interactive') &&
                e.type === 'touchmove' &&
                e.touches.length === 1) {
                this.leaflet.DomUtil.addClass(container, 'touch-warning');
                this.map.dragging.disable();
            }
            else {
                this.leaflet.DomUtil.removeClass(container, 'touch-warning');
            }
            return;
        }
        if (e.type !== 'touchmove' && e.type !== 'touchstart') {
            this.leaflet.DomUtil.removeClass(container, 'touch-warning');
            return;
        }
        if (e.touches.length === 1) {
            this.leaflet.DomUtil.addClass(container, 'touch-warning');
            this.map.dragging.disable();
        }
        else {
            this.map.dragging.enable();
            this.leaflet.DomUtil.removeClass(container, 'touch-warning');
        }
    }
    zoomToBound(assets) {
        const bounds = assets.map(asset => [
            asset.c8y_Position.lat,
            asset.c8y_Position.lng
        ]);
        this.map.fitBounds(bounds);
    }
}
MapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: MapComponent, deps: [{ token: i1.ManagedObjectRealtimeService }, { token: i2.MapService }, { token: MAP_TILE_LAYER, optional: true }, { token: MAP_DEFAULT_CONFIG, optional: true }, { token: i3.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
MapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.6", type: MapComponent, selector: "c8y-map", inputs: { config: "config", assets: "assets" }, outputs: { onMove: "onMove", onMoveEnd: "onMoveEnd", onZoomStart: "onZoomStart", onZoomEnd: "onZoomEnd" }, providers: [ManagedObjectRealtimeService], queries: [{ propertyName: "popup", first: true, predicate: MapPopupDirective, descendants: true }], viewQueries: [{ propertyName: "mapElement", first: true, predicate: ["map"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"c8y-map\">  \n  <div #map></div>\n</div>\n<ng-content></ng-content>\n" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: MapComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-map', providers: [ManagedObjectRealtimeService], template: "<div class=\"c8y-map\">  \n  <div #map></div>\n</div>\n<ng-content></ng-content>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ManagedObjectRealtimeService }, { type: i2.MapService }, { type: Array, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MAP_TILE_LAYER]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MAP_DEFAULT_CONFIG]
                }] }, { type: i3.TranslateService }]; }, propDecorators: { mapElement: [{
                type: ViewChild,
                args: ['map']
            }], popup: [{
                type: ContentChild,
                args: [MapPopupDirective]
            }], config: [{
                type: Input
            }], assets: [{
                type: Input
            }], onMove: [{
                type: Output
            }], onMoveEnd: [{
                type: Output
            }], onZoomStart: [{
                type: Output
            }], onZoomEnd: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,