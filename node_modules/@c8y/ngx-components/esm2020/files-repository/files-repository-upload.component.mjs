import { Component, Output } from '@angular/core';
import { EventEmitter } from '@angular/core';
import { InventoryBinaryService } from '@c8y/client';
import { AlertService, GainsightService, gettext } from '@c8y/ngx-components';
import { PRODUCT_EXPERIENCE } from './files-repository-product-experience.constants';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@c8y/ngx-components";
export class FilesRepositoryUploadComponent {
    constructor(inventoryBinaryService, alertService, gainsightService) {
        this.inventoryBinaryService = inventoryBinaryService;
        this.alertService = alertService;
        this.gainsightService = gainsightService;
        /** Emits an event when modal is closed. `uploaded` indicates if any files were uploaded. */
        this.onClose = new EventEmitter();
        this.isLoading = false;
        this.dropFilesHereMessage = gettext('Drop files here');
    }
    async upload() {
        if (this.filesToUpload === undefined) {
            this.alertService.warning(gettext('No files to upload.'));
        }
        else {
            this.isLoading = true;
            const promises = [];
            try {
                this.filesToUpload.forEach(file => {
                    promises.push(this.inventoryBinaryService.create(file));
                });
                await Promise.all(promises);
                this.alertService.success(gettext('File(s) uploaded.'));
                this.onClose.emit({ uploaded: true });
                this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.EVENTS.FILE_REPOSITORY_UPLOAD, {
                    component: PRODUCT_EXPERIENCE.COMPONENTS.FILE_REPOSITORY_UPLOAD_COMPONENT,
                    action: PRODUCT_EXPERIENCE.RESULTS.UPLOAD_ITEM_SUCCESS
                });
            }
            catch (e) {
                if (e) {
                    this.alertService.addServerFailure(e);
                    this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.EVENTS.FILE_REPOSITORY_UPLOAD, {
                        component: PRODUCT_EXPERIENCE.COMPONENTS.FILE_REPOSITORY_UPLOAD_COMPONENT,
                        action: PRODUCT_EXPERIENCE.RESULTS.UPLOAD_ITEM_FAILED
                    });
                }
            }
            finally {
                this.isLoading = false;
            }
        }
    }
    onFileDroppedEvent(event) {
        if (event && event.length > 0) {
            this.filesToUpload = event;
        }
    }
}
FilesRepositoryUploadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: FilesRepositoryUploadComponent, deps: [{ token: i1.InventoryBinaryService }, { token: i2.AlertService }, { token: i2.GainsightService }], target: i0.ɵɵFactoryTarget.Component });
FilesRepositoryUploadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.6", type: FilesRepositoryUploadComponent, selector: "c8y-files-repository-upload", outputs: { onClose: "onClose" }, ngImport: i0, template: "<div class=\"c8y-viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i c8yIcon=\"upload\"></i>\n    <h4 translate id=\"modal-title\">Upload files</h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\" id=\"modal-body\">\n      <c8y-file-picker-new\n        #filePicker\n        [uploadInProgress]=\"isLoading\"\n        (dropped)=\"onFileDroppedEvent($event)\"\n      ></c8y-file-picker-new>\n    </div>\n  </div>\n  <div class=\"card-footer separator d-flex j-c-center\">\n    <button\n      (click)=\"onClose.emit({ uploaded: false })\"\n      [disabled]=\"isLoading\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      translate\n      type=\"button\"\n    >\n      Cancel\n    </button>\n    <button\n      (click)=\"upload()\"\n      [disabled]=\"!filePicker.valid || isLoading\"\n      class=\"btn btn-primary btn-form\"\n      title=\"{{ 'Upload' | translate }}\"\n      translate\n      type=\"button\"\n      data-cy=\"c8y-files-repository-upload--upload\"\n    >\n      Upload\n    </button>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i2.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i2.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "component", type: i2.FilePickerNewComponent, selector: "c8y-file-picker-new", inputs: ["accept", "maxAllowedFiles", "minRequiredFiles", "disableValidators", "uploadInProgress"], outputs: ["dropped"] }, { kind: "pipe", type: i2.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: FilesRepositoryUploadComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-files-repository-upload', template: "<div class=\"c8y-viewport-modal\">\n  <div class=\"modal-header dialog-header\">\n    <i c8yIcon=\"upload\"></i>\n    <h4 translate id=\"modal-title\">Upload files</h4>\n  </div>\n  <div class=\"modal-inner-scroll\">\n    <div class=\"modal-body\" id=\"modal-body\">\n      <c8y-file-picker-new\n        #filePicker\n        [uploadInProgress]=\"isLoading\"\n        (dropped)=\"onFileDroppedEvent($event)\"\n      ></c8y-file-picker-new>\n    </div>\n  </div>\n  <div class=\"card-footer separator d-flex j-c-center\">\n    <button\n      (click)=\"onClose.emit({ uploaded: false })\"\n      [disabled]=\"isLoading\"\n      class=\"btn btn-default\"\n      title=\"{{ 'Cancel' | translate }}\"\n      translate\n      type=\"button\"\n    >\n      Cancel\n    </button>\n    <button\n      (click)=\"upload()\"\n      [disabled]=\"!filePicker.valid || isLoading\"\n      class=\"btn btn-primary btn-form\"\n      title=\"{{ 'Upload' | translate }}\"\n      translate\n      type=\"button\"\n      data-cy=\"c8y-files-repository-upload--upload\"\n    >\n      Upload\n    </button>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.InventoryBinaryService }, { type: i2.AlertService }, { type: i2.GainsightService }]; }, propDecorators: { onClose: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMtcmVwb3NpdG9yeS11cGxvYWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZmlsZXMtcmVwb3NpdG9yeS9maWxlcy1yZXBvc2l0b3J5LXVwbG9hZC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi9maWxlcy1yZXBvc2l0b3J5L2ZpbGVzLXJlcG9zaXRvcnktdXBsb2FkLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDOUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saURBQWlELENBQUM7Ozs7QUFNckYsTUFBTSxPQUFPLDhCQUE4QjtJQU96QyxZQUNVLHNCQUE4QyxFQUM5QyxZQUEwQixFQUMxQixnQkFBa0M7UUFGbEMsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUM5QyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBVDVDLDRGQUE0RjtRQUNsRixZQUFPLEdBQXdDLElBQUksWUFBWSxFQUFFLENBQUM7UUFDNUUsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUNsQix5QkFBb0IsR0FBVyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQU92RCxDQUFDO0lBRUosS0FBSyxDQUFDLE1BQU07UUFDVixJQUFJLElBQUksQ0FBQyxhQUFhLEtBQUssU0FBUyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7U0FDM0Q7YUFBTTtZQUNMLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztZQUNwQixJQUFJO2dCQUNGLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUNoQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDMUQsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUM1QixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO2dCQUN4RCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUN0QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRTtvQkFDbkYsU0FBUyxFQUFFLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxnQ0FBZ0M7b0JBQ3pFLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsbUJBQW1CO2lCQUN2RCxDQUFDLENBQUM7YUFDSjtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLElBQUksQ0FBQyxFQUFFO29CQUNMLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3RDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLHNCQUFzQixFQUFFO3dCQUNuRixTQUFTLEVBQUUsa0JBQWtCLENBQUMsVUFBVSxDQUFDLGdDQUFnQzt3QkFDekUsTUFBTSxFQUFFLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxrQkFBa0I7cUJBQ3RELENBQUMsQ0FBQztpQkFDSjthQUNGO29CQUFTO2dCQUNSLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO2FBQ3hCO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsa0JBQWtCLENBQUMsS0FBYTtRQUM5QixJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM3QixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztTQUM1QjtJQUNILENBQUM7OzJIQWhEVSw4QkFBOEI7K0dBQTlCLDhCQUE4QixvR0NWM0MsK2tDQXNDQTsyRkQ1QmEsOEJBQThCO2tCQUoxQyxTQUFTOytCQUNFLDZCQUE2Qjt1S0FLN0IsT0FBTztzQkFBaEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEludmVudG9yeUJpbmFyeVNlcnZpY2UgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBBbGVydFNlcnZpY2UsIEdhaW5zaWdodFNlcnZpY2UsIGdldHRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IFBST0RVQ1RfRVhQRVJJRU5DRSB9IGZyb20gJy4vZmlsZXMtcmVwb3NpdG9yeS1wcm9kdWN0LWV4cGVyaWVuY2UuY29uc3RhbnRzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYzh5LWZpbGVzLXJlcG9zaXRvcnktdXBsb2FkJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2ZpbGVzLXJlcG9zaXRvcnktdXBsb2FkLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBGaWxlc1JlcG9zaXRvcnlVcGxvYWRDb21wb25lbnQge1xuICAvKiogRW1pdHMgYW4gZXZlbnQgd2hlbiBtb2RhbCBpcyBjbG9zZWQuIGB1cGxvYWRlZGAgaW5kaWNhdGVzIGlmIGFueSBmaWxlcyB3ZXJlIHVwbG9hZGVkLiAqL1xuICBAT3V0cHV0KCkgb25DbG9zZTogRXZlbnRFbWl0dGVyPHsgdXBsb2FkZWQ6IGJvb2xlYW4gfT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIGlzTG9hZGluZyA9IGZhbHNlO1xuICBkcm9wRmlsZXNIZXJlTWVzc2FnZTogc3RyaW5nID0gZ2V0dGV4dCgnRHJvcCBmaWxlcyBoZXJlJyk7XG4gIGZpbGVzVG9VcGxvYWQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBpbnZlbnRvcnlCaW5hcnlTZXJ2aWNlOiBJbnZlbnRvcnlCaW5hcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgYWxlcnRTZXJ2aWNlOiBBbGVydFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBnYWluc2lnaHRTZXJ2aWNlOiBHYWluc2lnaHRTZXJ2aWNlXG4gICkge31cblxuICBhc3luYyB1cGxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMuZmlsZXNUb1VwbG9hZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS53YXJuaW5nKGdldHRleHQoJ05vIGZpbGVzIHRvIHVwbG9hZC4nKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmZpbGVzVG9VcGxvYWQuZm9yRWFjaChmaWxlID0+IHtcbiAgICAgICAgICBwcm9taXNlcy5wdXNoKHRoaXMuaW52ZW50b3J5QmluYXJ5U2VydmljZS5jcmVhdGUoZmlsZSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5zdWNjZXNzKGdldHRleHQoJ0ZpbGUocykgdXBsb2FkZWQuJykpO1xuICAgICAgICB0aGlzLm9uQ2xvc2UuZW1pdCh7IHVwbG9hZGVkOiB0cnVlIH0pO1xuICAgICAgICB0aGlzLmdhaW5zaWdodFNlcnZpY2UudHJpZ2dlckV2ZW50KFBST0RVQ1RfRVhQRVJJRU5DRS5FVkVOVFMuRklMRV9SRVBPU0lUT1JZX1VQTE9BRCwge1xuICAgICAgICAgIGNvbXBvbmVudDogUFJPRFVDVF9FWFBFUklFTkNFLkNPTVBPTkVOVFMuRklMRV9SRVBPU0lUT1JZX1VQTE9BRF9DT01QT05FTlQsXG4gICAgICAgICAgYWN0aW9uOiBQUk9EVUNUX0VYUEVSSUVOQ0UuUkVTVUxUUy5VUExPQURfSVRFTV9TVUNDRVNTXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZSkge1xuICAgICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLmFkZFNlcnZlckZhaWx1cmUoZSk7XG4gICAgICAgICAgdGhpcy5nYWluc2lnaHRTZXJ2aWNlLnRyaWdnZXJFdmVudChQUk9EVUNUX0VYUEVSSUVOQ0UuRVZFTlRTLkZJTEVfUkVQT1NJVE9SWV9VUExPQUQsIHtcbiAgICAgICAgICAgIGNvbXBvbmVudDogUFJPRFVDVF9FWFBFUklFTkNFLkNPTVBPTkVOVFMuRklMRV9SRVBPU0lUT1JZX1VQTE9BRF9DT01QT05FTlQsXG4gICAgICAgICAgICBhY3Rpb246IFBST0RVQ1RfRVhQRVJJRU5DRS5SRVNVTFRTLlVQTE9BRF9JVEVNX0ZBSUxFRFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uRmlsZURyb3BwZWRFdmVudChldmVudDogRmlsZVtdKTogdm9pZCB7XG4gICAgaWYgKGV2ZW50ICYmIGV2ZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuZmlsZXNUb1VwbG9hZCA9IGV2ZW50O1xuICAgIH1cbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cImM4eS12aWV3cG9ydC1tb2RhbFwiPlxuICA8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyIGRpYWxvZy1oZWFkZXJcIj5cbiAgICA8aSBjOHlJY29uPVwidXBsb2FkXCI+PC9pPlxuICAgIDxoNCB0cmFuc2xhdGUgaWQ9XCJtb2RhbC10aXRsZVwiPlVwbG9hZCBmaWxlczwvaDQ+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwibW9kYWwtaW5uZXItc2Nyb2xsXCI+XG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIiBpZD1cIm1vZGFsLWJvZHlcIj5cbiAgICAgIDxjOHktZmlsZS1waWNrZXItbmV3XG4gICAgICAgICNmaWxlUGlja2VyXG4gICAgICAgIFt1cGxvYWRJblByb2dyZXNzXT1cImlzTG9hZGluZ1wiXG4gICAgICAgIChkcm9wcGVkKT1cIm9uRmlsZURyb3BwZWRFdmVudCgkZXZlbnQpXCJcbiAgICAgID48L2M4eS1maWxlLXBpY2tlci1uZXc+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXIgc2VwYXJhdG9yIGQtZmxleCBqLWMtY2VudGVyXCI+XG4gICAgPGJ1dHRvblxuICAgICAgKGNsaWNrKT1cIm9uQ2xvc2UuZW1pdCh7IHVwbG9hZGVkOiBmYWxzZSB9KVwiXG4gICAgICBbZGlzYWJsZWRdPVwiaXNMb2FkaW5nXCJcbiAgICAgIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCJcbiAgICAgIHRpdGxlPVwie3sgJ0NhbmNlbCcgfCB0cmFuc2xhdGUgfX1cIlxuICAgICAgdHJhbnNsYXRlXG4gICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICA+XG4gICAgICBDYW5jZWxcbiAgICA8L2J1dHRvbj5cbiAgICA8YnV0dG9uXG4gICAgICAoY2xpY2spPVwidXBsb2FkKClcIlxuICAgICAgW2Rpc2FibGVkXT1cIiFmaWxlUGlja2VyLnZhbGlkIHx8IGlzTG9hZGluZ1wiXG4gICAgICBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBidG4tZm9ybVwiXG4gICAgICB0aXRsZT1cInt7ICdVcGxvYWQnIHwgdHJhbnNsYXRlIH19XCJcbiAgICAgIHRyYW5zbGF0ZVxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICBkYXRhLWN5PVwiYzh5LWZpbGVzLXJlcG9zaXRvcnktdXBsb2FkLS11cGxvYWRcIlxuICAgID5cbiAgICAgIFVwbG9hZFxuICAgIDwvYnV0dG9uPlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19