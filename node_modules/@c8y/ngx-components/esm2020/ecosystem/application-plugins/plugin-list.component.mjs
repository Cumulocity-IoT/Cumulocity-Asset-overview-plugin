import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ApplicationType } from '@c8y/client';
import { AlertService, GainsightService, PluginsService, gettext } from '@c8y/ngx-components';
import { EcosystemService, PRODUCT_EXPERIENCE } from '@c8y/ngx-components/ecosystem/shared';
import { TranslateService } from '@ngx-translate/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BehaviorSubject, Observable } from 'rxjs';
import { AppsToUpdateRemotesSelectComponent } from './apps-to-update-remotes-select.component';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components/ecosystem/shared";
import * as i2 from "ngx-bootstrap/modal";
import * as i3 from "@c8y/ngx-components";
import * as i4 from "@ngx-translate/core";
import * as i5 from "@angular/common";
import * as i6 from "./plugin-list-item.component";
export class PluginListComponent {
    constructor(ecosystemService, bsModalService, pluginsService, alertService, translateService, gainsightService) {
        this.ecosystemService = ecosystemService;
        this.bsModalService = bsModalService;
        this.pluginsService = pluginsService;
        this.alertService = alertService;
        this.translateService = translateService;
        this.gainsightService = gainsightService;
        this.CURRENT_LOCATION = location.href;
        this.emptyListText = '';
        /**
         * Shows the install button for each plugin separately. Currently used in package-details view.
         */
        this.installable = false;
        this.selectedItems = new EventEmitter();
        this.remotePlugins$ = new BehaviorSubject({});
        this.selectedPlugins = {};
        this.updatingPluginId = { install: '', uninstall: '' };
        this.appsDisabled = new Set();
    }
    updateSelectedItems(selected, plugin) {
        this.selectedPlugins[plugin.id] = selected ? plugin : undefined;
        const onlyInstalledPlugins = Object.values(this.selectedPlugins).filter(Boolean);
        this.selectedItems.emit(onlyInstalledPlugins);
    }
    async installPlugin(plugin) {
        await this.updateAppRemotes(plugin, 'install');
    }
    async uninstallPlugin(plugin) {
        this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.PACKAGE_PLUGINS, {
            component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.PLUGIN_LIST,
            action: PRODUCT_EXPERIENCE.APPLICATIONS.ACTIONS.INSTALL_PLUGIN,
            url: this.CURRENT_LOCATION
        });
        await this.updateAppRemotes(plugin, 'uninstall');
    }
    async updateAppRemotes(plugin, updateType) {
        this.updatingPluginId[updateType] = plugin?.id;
        let initialState;
        try {
            const apps = await this.getAppsForUpdate(plugin, updateType);
            initialState = {
                apps,
                updateType,
                pluginName: plugin.name,
                appsDisabled: this.appsDisabled
            };
        }
        catch (e) {
            this.alertService.addServerFailure(e);
            this.updatingPluginId[updateType] = '';
            return;
        }
        let selectedApps;
        try {
            selectedApps = await this.selectApps(initialState);
            if (!selectedApps) {
                this.updatingPluginId[updateType] = '';
                return;
            }
        }
        catch {
            // unreached
        }
        if (updateType === 'install') {
            const licensesVerifiedByUser = await this.ecosystemService.verifyLicenses([plugin]);
            if (!licensesVerifiedByUser) {
                this.updatingPluginId[updateType] = '';
                return;
            }
        }
        for (const app of selectedApps) {
            try {
                await this.handleRemotesUpdate(app, plugin, updateType);
                const successText = updateType === 'install'
                    ? this.translateService.instant(gettext('Plugin installed to app "{{ appName }}".'), {
                        appName: app.name
                    })
                    : this.translateService.instant(gettext('Plugin uninstalled from app "{{ appName }}".'), { appName: app.name });
                this.alertService.success(successText);
                this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.PACKAGE_PLUGINS, {
                    component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.PLUGIN_LIST,
                    result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.PLUGIN_INSTALLED,
                    url: this.CURRENT_LOCATION
                });
            }
            catch {
                this.gainsightService.triggerEvent(PRODUCT_EXPERIENCE.APPLICATIONS.EVENTS.PACKAGE_PLUGINS, {
                    component: PRODUCT_EXPERIENCE.APPLICATIONS.COMPONENTS.PLUGIN_LIST,
                    result: PRODUCT_EXPERIENCE.APPLICATIONS.RESULTS.SERVER_FAILURE,
                    url: this.CURRENT_LOCATION
                });
            }
        }
        this.updatingPluginId[updateType] = '';
    }
    async getAppsForUpdate(plugin, updateType) {
        let apps = (await this.ecosystemService.getWebApplications()).filter(app => this.ecosystemService.isOwner(app) && app.type !== ApplicationType.EXTERNAL);
        if (updateType === 'install') {
            this.appsDisabled.clear();
            for (const app of apps) {
                if (this.isPluginInstalledInApp(plugin, app)) {
                    this.appsDisabled.add(app.id);
                }
            }
        }
        if (updateType === 'uninstall') {
            const installedApps = [];
            for (const app of apps) {
                if (this.isPluginInstalledInApp(plugin, app)) {
                    installedApps.push(app);
                }
            }
            apps = installedApps;
        }
        return apps;
    }
    isPluginInstalledInApp(plugin, app) {
        const appRemotes = this.pluginsService.getMFRemotes(app) || {};
        for (const [remoteName, modules] of Object.entries(appRemotes)) {
            const pluginFromThisPackageIsInstalled = this.getPluginContextPathWithoutVersion(remoteName) === plugin.contextPath;
            const specificPluginModuleIsInstalled = modules.some(module => module === plugin.module);
            if (pluginFromThisPackageIsInstalled && specificPluginModuleIsInstalled) {
                return true;
            }
        }
        return false;
    }
    getPluginContextPathWithoutVersion(remote) {
        return remote.split('@')[0];
    }
    async handleRemotesUpdate(application, plugin, updateType) {
        try {
            // When remotes object is not set in the configuration object of an application.
            // Fallback to setInitialRemotes is triggered.
            let updatedRemotes = await (updateType === 'install'
                ? this.pluginsService.addRemotes(application, plugin)
                : this.pluginsService.removeRemotes(application, this.getAllPluginsToRemove(plugin)));
            if (!updatedRemotes) {
                // TODO discuss if we need to handle it like that.
                // Right now remotes from the cumulocity.json are taken into account when remotes object is missing in the configuration.
                updatedRemotes = await this.pluginsService.setInitialRemotes(application);
                // Fresh application MO is needed, after initial state was set.
                const app = await this.ecosystemService.getApplication(application.id);
                updatedRemotes = await this.pluginsService.addRemotes(app, plugin);
            }
            return this.emitRemotes(updatedRemotes);
        }
        catch (er) {
            if (er) {
                this.alertService.addServerFailure(er);
            }
            throw er;
        }
    }
    getAllPluginsToRemove(plugin) {
        return this.package.applicationVersions.map(av => ({
            id: `${plugin.contextPath}@${av.version}/${plugin.module}`,
            module: plugin.module,
            path: plugin.path
        }));
    }
    emitRemotes(remotes) {
        this.remotePlugins$.next(remotes);
        return { ...this.remotePlugins$.value };
    }
    async selectApps(initialState) {
        try {
            return await this.bsModalService.show(AppsToUpdateRemotesSelectComponent, {
                class: 'modal-sm',
                ariaDescribedby: 'modal-body',
                ariaLabelledBy: 'modal-title',
                initialState,
                ignoreBackdropClick: true,
                keyboard: false
            }).content.result;
        }
        catch (er) {
            return;
        }
    }
}
PluginListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: PluginListComponent, deps: [{ token: i1.EcosystemService }, { token: i2.BsModalService }, { token: i3.PluginsService }, { token: i3.AlertService }, { token: i4.TranslateService }, { token: i3.GainsightService }], target: i0.ɵɵFactoryTarget.Component });
PluginListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.6", type: PluginListComponent, selector: "c8y-plugin-list", inputs: { plugins$: "plugins$", emptyListText: "emptyListText", selectable: "selectable", installable: "installable", package: "package" }, outputs: { selectedItems: "selectedItems" }, ngImport: i0, template: "<c8y-list-group class=\"bg-inherit\">\n  <ng-container *ngIf=\"(plugins$ | async)?.length !== 0; else emptyList\">\n    <ng-container *ngFor=\"let plugin of plugins$ | async\">\n      <c8y-li [ngClass]=\"{ disabled: plugin.installed }\" class=\"bg-inherit\">\n        <c8y-plugin-list-item\n          (isItemSelected)=\"updateSelectedItems($event, plugin)\"\n          [plugin]=\"plugin\"\n          [selectable]=\"selectable\"\n          class=\"d-flex\"\n        ></c8y-plugin-list-item>\n        <div class=\"p-l-40 m-t-4\">\n          <button\n            *ngIf=\"installable\"\n            (click)=\"uninstallPlugin(plugin)\"\n            [ngClass]=\"{ 'btn-pending': plugin.id === updatingPluginId.uninstall }\"\n            [disabled]=\"updatingPluginId.uninstall && plugin.id !== updatingPluginId.uninstall\"\n            class=\"btn btn-danger btn-sm m-l-4\"\n            title=\"{{ 'Uninstall plugin' | translate }}\"\n            translate\n          >\n            Uninstall plugin\n          </button>\n          <button\n            *ngIf=\"installable\"\n            (click)=\"installPlugin(plugin)\"\n            [ngClass]=\"{ 'btn-pending': plugin.id === updatingPluginId.install }\"\n            [disabled]=\"updatingPluginId.install && plugin.id !== updatingPluginId.install\"\n            class=\"btn btn-default btn-sm m-l-8\"\n            title=\"{{ 'Install plugin' | translate }}\"\n            translate\n          >\n            Install plugin\n          </button>\n        </div>\n      </c8y-li>\n    </ng-container>\n  </ng-container>\n</c8y-list-group>\n<ng-template #emptyList>\n  <div class=\"c8y-empty-state text-left\" *ngIf=\"emptyListText\">\n    <h1 c8yIcon=\"plugin\"></h1>\n    <p>\n      {{ emptyListText | translate }}\n    </p>\n  </div>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.ListGroupComponent, selector: "c8y-list-group" }, { kind: "component", type: i3.ListItemComponent, selector: "c8y-list-item, c8y-li", inputs: ["active", "emptyActions", "collapsed", "selectable"], outputs: ["collapsedChange"] }, { kind: "component", type: i6.PluginListItemComponent, selector: "c8y-plugin-list-item", inputs: ["plugin", "selectable"], outputs: ["isItemSelected"] }, { kind: "pipe", type: i3.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: PluginListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-plugin-list', template: "<c8y-list-group class=\"bg-inherit\">\n  <ng-container *ngIf=\"(plugins$ | async)?.length !== 0; else emptyList\">\n    <ng-container *ngFor=\"let plugin of plugins$ | async\">\n      <c8y-li [ngClass]=\"{ disabled: plugin.installed }\" class=\"bg-inherit\">\n        <c8y-plugin-list-item\n          (isItemSelected)=\"updateSelectedItems($event, plugin)\"\n          [plugin]=\"plugin\"\n          [selectable]=\"selectable\"\n          class=\"d-flex\"\n        ></c8y-plugin-list-item>\n        <div class=\"p-l-40 m-t-4\">\n          <button\n            *ngIf=\"installable\"\n            (click)=\"uninstallPlugin(plugin)\"\n            [ngClass]=\"{ 'btn-pending': plugin.id === updatingPluginId.uninstall }\"\n            [disabled]=\"updatingPluginId.uninstall && plugin.id !== updatingPluginId.uninstall\"\n            class=\"btn btn-danger btn-sm m-l-4\"\n            title=\"{{ 'Uninstall plugin' | translate }}\"\n            translate\n          >\n            Uninstall plugin\n          </button>\n          <button\n            *ngIf=\"installable\"\n            (click)=\"installPlugin(plugin)\"\n            [ngClass]=\"{ 'btn-pending': plugin.id === updatingPluginId.install }\"\n            [disabled]=\"updatingPluginId.install && plugin.id !== updatingPluginId.install\"\n            class=\"btn btn-default btn-sm m-l-8\"\n            title=\"{{ 'Install plugin' | translate }}\"\n            translate\n          >\n            Install plugin\n          </button>\n        </div>\n      </c8y-li>\n    </ng-container>\n  </ng-container>\n</c8y-list-group>\n<ng-template #emptyList>\n  <div class=\"c8y-empty-state text-left\" *ngIf=\"emptyListText\">\n    <h1 c8yIcon=\"plugin\"></h1>\n    <p>\n      {{ emptyListText | translate }}\n    </p>\n  </div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.EcosystemService }, { type: i2.BsModalService }, { type: i3.PluginsService }, { type: i3.AlertService }, { type: i4.TranslateService }, { type: i3.GainsightService }]; }, propDecorators: { plugins$: [{
                type: Input
            }], emptyListText: [{
                type: Input
            }], selectable: [{
                type: Input
            }], installable: [{
                type: Input
            }], package: [{
                type: Input
            }], selectedItems: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,