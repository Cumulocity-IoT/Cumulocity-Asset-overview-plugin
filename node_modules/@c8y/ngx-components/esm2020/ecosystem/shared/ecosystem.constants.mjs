import { ERROR_TYPE } from './ecosystem.model';
import { gettext, PackageType } from '@c8y/ngx-components';
export const ERROR_MESSAGES = {
    [ERROR_TYPE.ALREADY_EXIST]: gettext('Could not deploy the application, as the application with the same name, context-path or key exist already.'),
    [ERROR_TYPE.TYPE_VALIDATION]: gettext('Wrong file format. Expected a *.zip file with a valid manifest.'),
    [ERROR_TYPE.ALREADY_SUBSCRIBED]: gettext('Could not subscribe to the microservice because another application with the same context path is already subscribed.'),
    [ERROR_TYPE.NO_MANIFEST_FILE]: gettext('Could not find a manifest.'),
    [ERROR_TYPE.INVALID_PACKAGE]: gettext('You have not uploaded a valid package.'),
    [ERROR_TYPE.INVALID_APPLICATION]: gettext('You have not uploaded a valid application.'),
    [ERROR_TYPE.INTERNAL_ERROR]: gettext('An internal error occurred, try to upload again.'),
    [ERROR_TYPE.MICROSERVICE_NAME_TOO_LONG]: gettext('Microservice name "{{ name }}" must not be longer than {{ maxChars }} characters.'),
    [ERROR_TYPE.APPLICATION_CREATION_FAILED]: gettext('Application creation failed.'),
    [ERROR_TYPE.KEY_OR_CONTEXT_PATH_MISMATCH]: gettext('The "contextPath`KEEP_ORIGINAL`" or "key`KEEP_ORIGINAL`" of the uploaded archive do not match with the existing application.'),
    [ERROR_TYPE.VERSION_NOT_FOUND]: gettext('The selected version was not found on the server.')
};
export const APP_STATE = {
    SUBSCRIBED: {
        label: gettext('Subscribed`application`'),
        class: 'label-primary',
        tooltip: gettext('Provided by parent tenant.')
    },
    CUSTOM: {
        label: gettext('Custom`application`'),
        class: 'label-info',
        tooltip: gettext('Manually uploaded to the platform.')
    },
    EXTERNAL: {
        label: gettext('External`application`'),
        class: 'label-warning',
        tooltip: gettext('Application hosted outside of the platform.')
    },
    UNPACKED: {
        label: gettext('Unpacked`application`'),
        class: 'label-success',
        tooltip: gettext('Deployed from a package available under "Packages".')
    },
    PACKAGE_BLUEPRINT: {
        label: gettext('Blueprint'),
        class: 'label-success',
        tooltip: gettext('Contains an application and may include plugins.')
    },
    PACKAGE_PLUGIN: {
        label: gettext('Plugins'),
        class: 'label-info',
        tooltip: gettext('Contains only plugins.')
    },
    PACKAGE_UNKNOWN: {
        label: gettext('Unknown`package-type`'),
        class: 'label-info',
        tooltip: gettext('Package contents could not be determined.')
    }
};
export const PACKAGE_TYPE_LABELS = {
    [PackageType.COMMUNITY]: {
        label: gettext('COMMUNITY`Package created by the developer community.`'),
        tooltip: gettext('Package created by the developer community.')
    },
    [PackageType.OFFICIAL]: {
        label: gettext('OFFICIAL`Package maintained by Software AG.`'),
        tooltip: gettext('Package maintained by Software AG.')
    },
    [PackageType.UNKNOWN]: {
        label: gettext('CUSTOM`Package maintained by an unknown source.`'),
        tooltip: gettext('Package maintainer unknown.')
    }
};
export const packageProperties = [
    {
        label: gettext('Latest version'),
        key: 'version'
    },
    {
        label: gettext('Author'),
        key: 'author'
    },
    {
        label: gettext('Keywords'),
        key: 'keywords'
    },
    {
        label: gettext('Source'),
        key: 'repository',
        transform: (repository) => (repository?.url ? repository.url : repository),
        type: 'link',
        action: (e, link) => window.open(link, '_blank', 'noopener,noreferrer')
    },
    {
        label: gettext('Homepage'),
        key: 'homepage',
        type: 'link',
        action: (e, link) => window.open(link, '_blank', 'noopener,noreferrer')
    },
    {
        label: gettext('Required platform version'),
        key: 'requiredPlatformVersion'
    },
    {
        label: gettext('License'),
        key: 'license'
    }
];
//# sourceMappingURL=data:application/json;base64,