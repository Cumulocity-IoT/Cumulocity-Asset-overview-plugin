import { Inject, Injectable } from '@angular/core';
import { InventoryService, SmartGroupsService, SmartRulesService, UserService } from '@c8y/client';
import { AlertService, AppStateService, AssetTypesService, DataGridService, gettext, Permissions, UserPreferencesService } from '@c8y/ngx-components';
import { AssetNodeService } from '@c8y/ngx-components/assets-navigator';
import { AlarmsDeviceGridColumn, ImeiDeviceGridColumn, ModelDeviceGridColumn, NameDeviceGridColumn, RegistrationDateDeviceGridColumn, SerialNumberDeviceGridColumn, SystemIdDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import { TranslateService } from '@ngx-translate/core';
import { AssetTypeGridColumn } from './columns/asset-type-grid-column';
import { SUB_ASSETS_CONFIG } from './sub-assets.model';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "@c8y/client";
import * as i3 from "@c8y/ngx-components";
import * as i4 from "@c8y/ngx-components/assets-navigator";
export class SubAssetsService extends DataGridService {
    constructor(translateService, inventoryService, appState, user, assetNodeService, smartGroupsService, smartRulesService, alertService, permissionsService, assetTypes, userPreferencesService, moduleConfig) {
        super(userPreferencesService);
        this.translateService = translateService;
        this.inventoryService = inventoryService;
        this.appState = appState;
        this.user = user;
        this.assetNodeService = assetNodeService;
        this.smartGroupsService = smartGroupsService;
        this.smartRulesService = smartRulesService;
        this.alertService = alertService;
        this.permissionsService = permissionsService;
        this.assetTypes = assetTypes;
        this.userPreferencesService = userPreferencesService;
        this.moduleConfig = moduleConfig;
        this.GRID_CONFIG_DEFAULT_STORAGE_KEY = 'sub-assets-grid-config';
        this.IS_DEVICE_GROUP_FRAGMENT = 'c8y_IsDeviceGroup';
        this.IS_DYNAMIC_GROUP_FRAGMENT = 'c8y_IsDynamicGroup';
    }
    async getCustomProperties(group) {
        const assetType = this.assetTypes.getAssetTypeByName(group.type);
        if (assetType) {
            const { data } = await this.inventoryService.childAdditionsList(assetType, {
                pageSize: 2000,
                query: "$filter=(has('c8y_IsAssetProperty'))"
            });
            return data;
        }
        return [];
    }
    getDefaultColumns(_filterable = true, _sortable = true) {
        const defaultColumns = [
            new AssetTypeGridColumn({ sortOrder: 'desc' }),
            new NameDeviceGridColumn({ sortOrder: 'asc' }),
            new ModelDeviceGridColumn(),
            new SerialNumberDeviceGridColumn({ visible: false }),
            new RegistrationDateDeviceGridColumn({ visible: false }),
            new SystemIdDeviceGridColumn({ visible: false }),
            new ImeiDeviceGridColumn({ visible: false }),
            new AlarmsDeviceGridColumn()
        ];
        return defaultColumns;
    }
    getDefaultPagination() {
        const { pagination } = this.getConfig();
        return {
            pageSize: pagination.pageSize,
            currentPage: 1
        };
    }
    getDefaultActionControls() {
        return [];
    }
    /**
     * @deprecated Use getConfig$(key: string): Observable<GridConfig> instead.
     */
    getConfig(key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {
        return super.getConfig(key);
    }
    /**
     * @deprecated Use saveConfig$(config: GridConfig, key: string): Promise<GridConfig> instead.
     */
    saveConfig(config, key = this.GRID_CONFIG_DEFAULT_STORAGE_KEY) {
        super.saveConfig(config, key);
    }
    async unassignAsset(asset, parentRef) {
        const { id: assetId } = asset;
        const { id: parentId } = parentRef;
        if (this.isDevice(asset)) {
            try {
                await this.inventoryService.childAssetsRemove(assetId, parentId);
                const alertMessage = this.translateService.instant(gettext('Device unassigned.'));
                this.alertService.success(alertMessage);
            }
            catch (error) {
                const alertMessage = this.translateService.instant(gettext('Could not unassign device.'));
                this.alertService.danger(alertMessage);
            }
            await this.deactivateSmartrulesForAsset(asset, parentRef);
        }
    }
    isDevice(asset) {
        return (!asset.hasOwnProperty(this.IS_DEVICE_GROUP_FRAGMENT) &&
            !asset.hasOwnProperty(this.IS_DYNAMIC_GROUP_FRAGMENT));
    }
    async deleteAsset(asset, parentRef, params = {}) {
        const isGroup = asset.hasOwnProperty(this.IS_DEVICE_GROUP_FRAGMENT) ||
            this.smartGroupsService.isSmartGroup(asset);
        if (isGroup) {
            await this.deleteGroup(asset, params);
        }
        else {
            await this.deleteDevice(asset, params);
        }
        if (parentRef &&
            !this.smartGroupsService.isSmartGroup(asset) &&
            !this.smartGroupsService.isSmartGroupV2(asset)) {
            await this.deactivateSmartrulesForAsset(asset, parentRef);
        }
    }
    shouldShowWithDeviceUserCheckbox(asset) {
        const { owner, c8y_IsDevice: isRootDevice } = asset;
        const hasDeviceUserAsOwner = asset.owner && this.isDeviceUser(owner);
        return Boolean(isRootDevice && hasDeviceUserAsOwner);
    }
    getDefaultBulkActionControls() {
        return [];
    }
    async getData(columns, pagination, parentReference, baseQuery = {}, text = null) {
        const isRoot = !parentReference;
        if (isRoot) {
            const query = this.buildCombinedRootQueryFilter(columns, pagination, baseQuery);
            return this.assetNodeService.getRootNodes({ ...pagination, ...(text && { text }), query });
        }
        const filters = {
            ...this.getAssetsFilters(columns, pagination, baseQuery, text),
            withParents: false
        };
        if (this.assetNodeService.isGroup(parentReference)) {
            return this.assetNodeService.getGroupItems(parentReference.id, filters);
        }
        if (this.assetNodeService.isDynamicGroup(parentReference)) {
            return this.assetNodeService.getDynamicGroupItems(parentReference.c8y_DeviceQueryString, filters);
        }
        if (this.assetNodeService.isDevice(parentReference)) {
            return this.assetNodeService.getDeviceChildren(parentReference.id, filters);
        }
    }
    async getCount(columns, pagination, parentReference, baseQuery = {}, text = null) {
        const defaultFilters = {
            pageSize: 1,
            withChildren: false
        };
        const filters = !parentReference
            ? {
                query: this.buildCombinedRootQueryFilter(columns, pagination, baseQuery),
                ...defaultFilters
            }
            : {
                ...this.getAssetsFilters(columns, pagination, baseQuery, text),
                ...defaultFilters
            };
        return this.getAssetsStatistics(parentReference, filters);
    }
    getTotal(parentReference, baseQuery = {}) {
        const queryFilter = this.assetNodeService.rootQueryFilter();
        const query = !parentReference
            ? this.queriesUtil.addAndFilter(queryFilter, baseQuery)
            : baseQuery;
        const filters = {
            query: this.queriesUtil.buildQuery(query),
            withChildren: false,
            withTotalPages: true,
            pageSize: 1
        };
        return this.getAssetsStatistics(parentReference, filters);
    }
    async canEditGroup(group) {
        return await this.permissionsService.canEdit(['ROLE_INVENTORY_ADMIN'], group);
    }
    canCreateGroup() {
        const currentUser = this.appState.currentUser.value;
        const hasAdminRole = this.user.hasAnyRole(currentUser, [
            'ROLE_INVENTORY_ADMIN',
            'ROLE_INVENTORY_CREATE'
        ]);
        return hasAdminRole;
    }
    async canAssignDevice(group) {
        return await this.permissionsService.canEdit(['ROLE_INVENTORY_ADMIN'], group);
    }
    canEditSmartGroup() {
        const SMART_GROUPS_ROLES_EDIT = ['ROLE_SMARTGROUP_UPDATE', 'ROLE_SMARTGROUP_ADMIN'];
        return this.permissionsService.hasAnyRole(SMART_GROUPS_ROLES_EDIT);
    }
    canDeleteSmartGroup() {
        const SMART_GROUPS_ROLES_DELETE = ['ROLE_SMARTGROUP_ADMIN', 'ROLE_INVENTORY_ADMIN'];
        return this.permissionsService.hasAnyRole(SMART_GROUPS_ROLES_DELETE);
    }
    isSmartGroup(group) {
        return (this.smartGroupsService.isSmartGroup(group) || this.smartGroupsService.isSmartGroupV2(group));
    }
    isUsingInventoryRoles() {
        const currentUser = this.appState.currentUser.value;
        const hasAnyInventoryRole = this.user.hasAnyRole(currentUser, [
            'ROLE_INVENTORY_ADMIN',
            'ROLE_INVENTORY_READ',
            'ROLE_INVENTORY_CREATE'
        ]);
        return !hasAnyInventoryRole;
    }
    async getAssetsStatistics(parentReference, filters) {
        const isRoot = !parentReference;
        if (isRoot) {
            return (await this.assetNodeService.getRootNodes(filters)).paging.totalPages;
        }
        if (this.assetNodeService.isGroup(parentReference)) {
            return (await this.assetNodeService.getGroupItems(parentReference.id, filters)).paging
                .totalPages;
        }
        if (this.assetNodeService.isDynamicGroup(parentReference)) {
            return (await this.assetNodeService.getDynamicGroupItems(parentReference.c8y_DeviceQueryString, filters)).paging.totalPages;
        }
        if (this.assetNodeService.isDevice(parentReference)) {
            return (await this.assetNodeService.getDeviceChildren(parentReference.id, filters)).paging
                .totalPages;
        }
    }
    buildCombinedRootQueryFilter(columns, pagination, baseQuery = {}) {
        const userQuery = this.getQueryObj(columns, pagination);
        const rootQuery = this.assetNodeService.rootQueryFilter();
        const orderedRootQuery = this.queriesUtil.addOrderbys(rootQuery, userQuery.__orderby, 'append');
        const rootAndUserQuery = this.queriesUtil.addAndFilter(orderedRootQuery, userQuery.__filter);
        const fullQuery = this.queriesUtil.addAndFilter(rootAndUserQuery, baseQuery);
        return this.queriesUtil.buildQuery(fullQuery);
    }
    async deleteGroup(group, params = {}) {
        const { cascade } = params;
        try {
            this.smartGroupsService.isSmartGroup(group) || this.smartGroupsService.isSmartGroupV2(group)
                ? await this.smartGroupsService.delete(group, { cascade })
                : await this.inventoryService.delete(group, { cascade });
            const alertMessage = this.translateService.instant(gettext('"{{ name }}" deleted.'), {
                name: group.name
            });
            this.alertService.success(alertMessage);
        }
        catch (error) {
            const alertMessage = this.translateService.instant(gettext('Could not delete "{{ name }}".'), {
                name: group.name
            });
            this.alertService.danger(alertMessage);
        }
    }
    async deleteDevice(device, params = {}) {
        const { cascade, withDeviceUser } = params;
        try {
            const { owner } = device;
            const shouldRemoveOwner = withDeviceUser && owner && this.isDeviceUser(owner);
            shouldRemoveOwner
                ? await this.deleteDeviceWithUser(device, cascade)
                : await this.inventoryService.delete(device, { cascade });
            const alertMessage = this.translateService.instant(gettext('Device deleted.'));
            this.alertService.success(alertMessage);
        }
        catch (error) {
            const alertMessage = this.translateService.instant(gettext('Could not delete device.'));
            this.alertService.danger(alertMessage);
        }
    }
    async deactivateSmartrulesForAsset(asset, parentRef) {
        const { id: assetId } = asset;
        const { id: parentId } = parentRef;
        const rules = (await this.smartRulesService.listByContext(parentId)).data;
        const upateSmartrulesPromises = rules.map(rule => this.smartRulesService.bulkDeactivateEnabledSources(rule, [assetId]));
        try {
            await Promise.all(upateSmartrulesPromises);
        }
        catch (error) {
            const alertMessage = this.translateService.instant(gettext('Could not deactivate smart rules.'));
            this.alertService.danger(alertMessage);
        }
    }
    isDeviceUser(userId) {
        return userId.match(/^device_/);
    }
    async deleteDeviceWithUser(device, cascade) {
        const params = { cascade, withDeviceUser: true };
        try {
            return await this.inventoryService.delete(device, params);
        }
        catch (error) {
            return await this.inventoryService.delete(device, { cascade });
        }
    }
    getAssetsFilters(columns, pagination, baseQuery, text) {
        const query = this.queriesUtil.addAndFilter(this.getQueryObj(columns), baseQuery);
        return {
            ...(text && { text }),
            query: this.queriesUtil.buildQuery(query),
            pageSize: pagination.pageSize || this.DEFAULT_PAGE_SIZE,
            currentPage: pagination.currentPage,
            withTotalPages: true
        };
    }
}
SubAssetsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: SubAssetsService, deps: [{ token: i1.TranslateService }, { token: i2.InventoryService }, { token: i3.AppStateService }, { token: i2.UserService }, { token: i4.AssetNodeService }, { token: i2.SmartGroupsService }, { token: i2.SmartRulesService }, { token: i3.AlertService }, { token: i3.Permissions }, { token: i3.AssetTypesService }, { token: i3.UserPreferencesService }, { token: SUB_ASSETS_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });
SubAssetsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: SubAssetsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: SubAssetsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }, { type: i2.InventoryService }, { type: i3.AppStateService }, { type: i2.UserService }, { type: i4.AssetNodeService }, { type: i2.SmartGroupsService }, { type: i2.SmartRulesService }, { type: i3.AlertService }, { type: i3.Permissions }, { type: i3.AssetTypesService }, { type: i3.UserPreferencesService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [SUB_ASSETS_CONFIG]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,