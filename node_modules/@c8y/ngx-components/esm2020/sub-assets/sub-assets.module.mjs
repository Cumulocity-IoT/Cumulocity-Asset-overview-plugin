import { NgModule } from '@angular/core';
import { CoreModule, gettext, hookRoute, ViewContext } from '@c8y/ngx-components';
import { DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { AddGroupModule } from './add-group/add-group.module';
import { AssetTypeCellRendererComponent } from './columns/asset-type.cell-renderer.component';
import { DeleteAssetsModalComponent } from './delete-assets-modal/delete-assets-modal.component';
import { GroupInfoComponent } from './group-info.component';
import { GroupsComponent } from './groups.component';
import { SubAssetsGridComponent } from './sub-assets-grid.component';
import { SubAssetsComponent } from './sub-assets.component';
import { SubAssetsService } from './sub-assets.service';
import { UnassignModalComponent } from './unassign-assets-modal/unassign-modal.component';
import { AssignDevicesComponent } from './assign-devices/assign-devices.component';
import { AssignChildDevicesComponent } from './assign-devices/assign-child-devices.component';
import { AssetPropertiesComponent } from './asset-properties.component';
import { AssetPropertiesItemComponent } from './asset-properties-item.component';
import { SUB_ASSETS_CONFIG, defaultModuleConfig } from './sub-assets.model';
import * as i0 from "@angular/core";
export class SubAssetsModule {
    static config(config = {}) {
        return {
            ngModule: SubAssetsModule,
            providers: [
                {
                    provide: SUB_ASSETS_CONFIG,
                    useValue: { ...defaultModuleConfig, ...config }
                }
            ]
        };
    }
}
SubAssetsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: SubAssetsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
SubAssetsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.0.6", ngImport: i0, type: SubAssetsModule, declarations: [SubAssetsComponent,
        SubAssetsGridComponent,
        AssetTypeCellRendererComponent,
        GroupsComponent,
        GroupInfoComponent,
        DeleteAssetsModalComponent,
        UnassignModalComponent,
        AssignDevicesComponent,
        AssignChildDevicesComponent,
        AssetPropertiesComponent,
        AssetPropertiesItemComponent], imports: [CoreModule, DeviceGridModule, AddGroupModule, PopoverModule, TooltipModule] });
SubAssetsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: SubAssetsModule, providers: [
        {
            provide: SUB_ASSETS_CONFIG,
            useValue: defaultModuleConfig
        },
        hookRoute([
            {
                context: ViewContext.Group,
                path: 'subassets',
                priority: 1000,
                icon: 'c8y-group-open',
                label: gettext('Subassets'),
                component: SubAssetsComponent,
                featureId: 'subassets'
            },
            {
                path: 'group',
                component: GroupsComponent
            }
        ]),
        SubAssetsService
    ], imports: [CoreModule, DeviceGridModule, AddGroupModule, PopoverModule, TooltipModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: SubAssetsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        SubAssetsComponent,
                        SubAssetsGridComponent,
                        AssetTypeCellRendererComponent,
                        GroupsComponent,
                        GroupInfoComponent,
                        DeleteAssetsModalComponent,
                        UnassignModalComponent,
                        AssignDevicesComponent,
                        AssignChildDevicesComponent,
                        AssetPropertiesComponent,
                        AssetPropertiesItemComponent
                    ],
                    imports: [CoreModule, DeviceGridModule, AddGroupModule, PopoverModule, TooltipModule],
                    entryComponents: [
                        SubAssetsComponent,
                        AssetTypeCellRendererComponent,
                        GroupsComponent,
                        DeleteAssetsModalComponent,
                        UnassignModalComponent
                    ],
                    exports: [],
                    providers: [
                        {
                            provide: SUB_ASSETS_CONFIG,
                            useValue: defaultModuleConfig
                        },
                        hookRoute([
                            {
                                context: ViewContext.Group,
                                path: 'subassets',
                                priority: 1000,
                                icon: 'c8y-group-open',
                                label: gettext('Subassets'),
                                component: SubAssetsComponent,
                                featureId: 'subassets'
                            },
                            {
                                path: 'group',
                                component: GroupsComponent
                            }
                        ]),
                        SubAssetsService
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViLWFzc2V0cy5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zdWItYXNzZXRzL3N1Yi1hc3NldHMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNsRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNuRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUM5RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUNqRyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDckUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDMUYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDbkYsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0saURBQWlELENBQUM7QUFDOUYsT0FBTyxFQUFFLHdCQUF3QixFQUFF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bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmVNb2R1bGUsIGdldHRleHQsIGhvb2tSb3V0ZSwgVmlld0NvbnRleHQgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IERldmljZUdyaWRNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkJztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuaW1wb3J0IHsgVG9vbHRpcE1vZHVsZSB9IGZyb20gJ25neC1ib290c3RyYXAvdG9vbHRpcCc7XG5pbXBvcnQgeyBBZGRHcm91cE1vZHVsZSB9IGZyb20gJy4vYWRkLWdyb3VwL2FkZC1ncm91cC5tb2R1bGUnO1xuaW1wb3J0IHsgQXNzZXRUeXBlQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL2Fzc2V0LXR5cGUuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGVsZXRlQXNzZXRzTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL2RlbGV0ZS1hc3NldHMtbW9kYWwvZGVsZXRlLWFzc2V0cy1tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgR3JvdXBJbmZvQ29tcG9uZW50IH0gZnJvbSAnLi9ncm91cC1pbmZvLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBHcm91cHNDb21wb25lbnQgfSBmcm9tICcuL2dyb3Vwcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3ViQXNzZXRzR3JpZENvbXBvbmVudCB9IGZyb20gJy4vc3ViLWFzc2V0cy1ncmlkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdWJBc3NldHNDb21wb25lbnQgfSBmcm9tICcuL3N1Yi1hc3NldHMuY29tcG9uZW50JztcbmltcG9ydCB7IFN1YkFzc2V0c1NlcnZpY2UgfSBmcm9tICcuL3N1Yi1hc3NldHMuc2VydmljZSc7XG5pbXBvcnQgeyBVbmFzc2lnbk1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi91bmFzc2lnbi1hc3NldHMtbW9kYWwvdW5hc3NpZ24tbW9kYWwuY29tcG9uZW50JztcbmltcG9ydCB7IEFzc2lnbkRldmljZXNDb21wb25lbnQgfSBmcm9tICcuL2Fzc2lnbi1kZXZpY2VzL2Fzc2lnbi1kZXZpY2VzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBc3NpZ25DaGlsZERldmljZXNDb21wb25lbnQgfSBmcm9tICcuL2Fzc2lnbi1kZXZpY2VzL2Fzc2lnbi1jaGlsZC1kZXZpY2VzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBc3NldFByb3BlcnRpZXNDb21wb25lbnQgfSBmcm9tICcuL2Fzc2V0LXByb3BlcnRpZXMuY29tcG9uZW50JztcbmltcG9ydCB7IEFzc2V0UHJvcGVydGllc0l0ZW1Db21wb25lbnQgfSBmcm9tICcuL2Fzc2V0LXByb3BlcnRpZXMtaXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgU1VCX0FTU0VUU19DT05GSUcsIFN1YkFzc2V0c0NvbmZpZywgZGVmYXVsdE1vZHVsZUNvbmZpZyB9IGZyb20gJy4vc3ViLWFzc2V0cy5tb2RlbCc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFN1YkFzc2V0c0NvbXBvbmVudCxcbiAgICBTdWJBc3NldHNHcmlkQ29tcG9uZW50LFxuICAgIEFzc2V0VHlwZUNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBHcm91cHNDb21wb25lbnQsXG4gICAgR3JvdXBJbmZvQ29tcG9uZW50LFxuICAgIERlbGV0ZUFzc2V0c01vZGFsQ29tcG9uZW50LFxuICAgIFVuYXNzaWduTW9kYWxDb21wb25lbnQsXG4gICAgQXNzaWduRGV2aWNlc0NvbXBvbmVudCxcbiAgICBBc3NpZ25DaGlsZERldmljZXNDb21wb25lbnQsXG4gICAgQXNzZXRQcm9wZXJ0aWVzQ29tcG9uZW50LFxuICAgIEFzc2V0UHJvcGVydGllc0l0ZW1Db21wb25lbnRcbiAgXSxcbiAgaW1wb3J0czogW0NvcmVNb2R1bGUsIERldmljZUdyaWRNb2R1bGUsIEFkZEdyb3VwTW9kdWxlLCBQb3BvdmVyTW9kdWxlLCBUb29sdGlwTW9kdWxlXSxcbiAgZW50cnlDb21wb25lbnRzOiBbXG4gICAgU3ViQXNzZXRzQ29tcG9uZW50LFxuICAgIEFzc2V0VHlwZUNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBHcm91cHNDb21wb25lbnQsXG4gICAgRGVsZXRlQXNzZXRzTW9kYWxDb21wb25lbnQsXG4gICAgVW5hc3NpZ25Nb2RhbENvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogU1VCX0FTU0VUU19DT05GSUcsXG4gICAgICB1c2VWYWx1ZTogZGVmYXVsdE1vZHVsZUNvbmZpZ1xuICAgIH0sXG4gICAgaG9va1JvdXRlKFtcbiAgICAgIHtcbiAgICAgICAgY29udGV4dDogVmlld0NvbnRleHQuR3JvdXAsXG4gICAgICAgIHBhdGg6ICdzdWJhc3NldHMnLFxuICAgICAgICBwcmlvcml0eTogMTAwMCxcbiAgICAgICAgaWNvbjogJ2M4eS1ncm91cC1vcGVuJyxcbiAgICAgICAgbGFiZWw6IGdldHRleHQoJ1N1YmFzc2V0cycpLFxuICAgICAgICBjb21wb25lbnQ6IFN1YkFzc2V0c0NvbXBvbmVudCxcbiAgICAgICAgZmVhdHVyZUlkOiAnc3ViYXNzZXRzJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcGF0aDogJ2dyb3VwJyxcbiAgICAgICAgY29tcG9uZW50OiBHcm91cHNDb21wb25lbnRcbiAgICAgIH1cbiAgICBdKSxcbiAgICBTdWJBc3NldHNTZXJ2aWNlXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgU3ViQXNzZXRzTW9kdWxlIHtcbiAgc3RhdGljIGNvbmZpZyhjb25maWc6IFN1YkFzc2V0c0NvbmZpZyA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVyczxTdWJBc3NldHNNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFN1YkFzc2V0c01vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogU1VCX0FTU0VUU19DT05GSUcsXG4gICAgICAgICAgdXNlVmFsdWU6IHsgLi4uZGVmYXVsdE1vZHVsZUNvbmZpZywgLi4uY29uZmlnIH1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==