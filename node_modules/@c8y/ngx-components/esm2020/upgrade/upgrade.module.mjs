import { bridgeServiceProvider } from './bridge.service';
import { RouterModule, hookNavigator, hookTab, hookActionBar, hookAction, hookBreadcrumb, hookDocs } from '@c8y/ngx-components';
import { Ng1ActionBarFactoryService } from './action-bar.factory';
import { Ng1ActionFactoryService } from './action.factory';
import { Ng1BreadcrumbFactoryService } from './breadcrumb.factory';
import { Ng1NodesFactoryService } from './nodes.factory';
import { Ng1TabsFactoryService } from './tabs.factory';
import { NgModule } from '@angular/core';
import { Ng1DocsFactoryService } from './docs.factory';
import { authBridgeServiceProvider } from './auth-bridge.service';
import { absoluteDateServiceProvider } from './absolute-date.service';
import { smartRulesServiceProvider } from './smart-rules.service';
import * as angular from 'angular';
import { setAngularJSGlobal } from '@angular/upgrade/static';
import * as i0 from "@angular/core";
setAngularJSGlobal(angular);
export class UpgradeModule {
}
UpgradeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: UpgradeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
UpgradeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.0.6", ngImport: i0, type: UpgradeModule, imports: [RouterModule] });
UpgradeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: UpgradeModule, providers: [
        absoluteDateServiceProvider,
        bridgeServiceProvider,
        authBridgeServiceProvider,
        smartRulesServiceProvider,
        hookNavigator(Ng1NodesFactoryService),
        hookTab(Ng1TabsFactoryService),
        hookActionBar(Ng1ActionBarFactoryService),
        hookAction(Ng1ActionFactoryService),
        hookBreadcrumb(Ng1BreadcrumbFactoryService),
        hookDocs(Ng1DocsFactoryService)
    ], imports: [RouterModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: UpgradeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [RouterModule],
                    exports: [],
                    providers: [
                        absoluteDateServiceProvider,
                        bridgeServiceProvider,
                        authBridgeServiceProvider,
                        smartRulesServiceProvider,
                        hookNavigator(Ng1NodesFactoryService),
                        hookTab(Ng1TabsFactoryService),
                        hookActionBar(Ng1ActionBarFactoryService),
                        hookAction(Ng1ActionFactoryService),
                        hookBreadcrumb(Ng1BreadcrumbFactoryService),
                        hookDocs(Ng1DocsFactoryService)
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBncmFkZS5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi91cGdyYWRlL3VwZ3JhZGUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3pELE9BQU8sRUFDTCxZQUFZLEVBQ1osYUFBYSxFQUNiLE9BQU8sRUFDUCxhQUFhLEVBQ2IsVUFBVSxFQUNWLGNBQWMsRUFDZCxRQUFRLEVBQ1QsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2xFLE9BQU8sS0FBSyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDOztBQUU3RCxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQWtCNUIsTUFBTSxPQUFPLGFBQWE7OzBHQUFiLGFBQWE7MkdBQWIsYUFBYSxZQWZkLFlBQVk7MkdBZVgsYUFBYSxhQWJiO1FBQ1QsMkJBQTJCO1FBQzNCLHFCQUFxQjtRQUNyQix5QkFBeUI7UUFDekIseUJBQXlCO1FBQ3pCLGFBQWEsQ0FBQyxzQkFBc0IsQ0FBQztRQUNyQyxPQUFPLENBQUMscUJBQXFCLENBQUM7UUFDOUIsYUFBYSxDQUFDLDBCQUEwQixDQUFDO1FBQ3pDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQztRQUNuQyxjQUFjLENBQUMsMkJBQTJCLENBQUM7UUFDM0MsUUFBUSxDQUFDLHFCQUFxQixDQUFDO0tBQ2hDLFlBYlMsWUFBWTsyRkFlWCxhQUFhO2tCQWhCekIsUUFBUTttQkFBQztvQkFDUixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7b0JBQ3ZCLE9BQU8sRUFBRSxFQUFFO29CQUNYLFNBQVMsRUFBRTt3QkFDVCwyQkFBMkI7d0JBQzNCLHFCQUFxQjt3QkFDckIseUJBQXlCO3dCQUN6Qix5QkFBeUI7d0JBQ3pCLGFBQWEsQ0FBQyxzQkFBc0IsQ0FBQzt3QkFDckMsT0FBTyxDQUFDLHFCQUFxQixDQUFDO3dCQUM5QixhQUFhLENBQUMsMEJBQTBCLENBQUM7d0JBQ3pDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQzt3QkFDbkMsY0FBYyxDQUFDLDJCQUEyQixDQUFDO3dCQUMzQyxRQUFRLENBQUMscUJBQXFCLENBQUM7cUJBQ2hDO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnJpZGdlU2VydmljZVByb3ZpZGVyIH0gZnJvbSAnLi9icmlkZ2Uuc2VydmljZSc7XG5pbXBvcnQge1xuICBSb3V0ZXJNb2R1bGUsXG4gIGhvb2tOYXZpZ2F0b3IsXG4gIGhvb2tUYWIsXG4gIGhvb2tBY3Rpb25CYXIsXG4gIGhvb2tBY3Rpb24sXG4gIGhvb2tCcmVhZGNydW1iLFxuICBob29rRG9jc1xufSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IE5nMUFjdGlvbkJhckZhY3RvcnlTZXJ2aWNlIH0gZnJvbSAnLi9hY3Rpb24tYmFyLmZhY3RvcnknO1xuaW1wb3J0IHsgTmcxQWN0aW9uRmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuL2FjdGlvbi5mYWN0b3J5JztcbmltcG9ydCB7IE5nMUJyZWFkY3J1bWJGYWN0b3J5U2VydmljZSB9IGZyb20gJy4vYnJlYWRjcnVtYi5mYWN0b3J5JztcbmltcG9ydCB7IE5nMU5vZGVzRmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuL25vZGVzLmZhY3RvcnknO1xuaW1wb3J0IHsgTmcxVGFic0ZhY3RvcnlTZXJ2aWNlIH0gZnJvbSAnLi90YWJzLmZhY3RvcnknO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nMURvY3NGYWN0b3J5U2VydmljZSB9IGZyb20gJy4vZG9jcy5mYWN0b3J5JztcbmltcG9ydCB7IGF1dGhCcmlkZ2VTZXJ2aWNlUHJvdmlkZXIgfSBmcm9tICcuL2F1dGgtYnJpZGdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgYWJzb2x1dGVEYXRlU2VydmljZVByb3ZpZGVyIH0gZnJvbSAnLi9hYnNvbHV0ZS1kYXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgc21hcnRSdWxlc1NlcnZpY2VQcm92aWRlciB9IGZyb20gJy4vc21hcnQtcnVsZXMuc2VydmljZSc7XG5pbXBvcnQgKiBhcyBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IHsgc2V0QW5ndWxhckpTR2xvYmFsIH0gZnJvbSAnQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWMnO1xuXG5zZXRBbmd1bGFySlNHbG9iYWwoYW5ndWxhcik7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtSb3V0ZXJNb2R1bGVdLFxuICBleHBvcnRzOiBbXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgYWJzb2x1dGVEYXRlU2VydmljZVByb3ZpZGVyLFxuICAgIGJyaWRnZVNlcnZpY2VQcm92aWRlcixcbiAgICBhdXRoQnJpZGdlU2VydmljZVByb3ZpZGVyLFxuICAgIHNtYXJ0UnVsZXNTZXJ2aWNlUHJvdmlkZXIsXG4gICAgaG9va05hdmlnYXRvcihOZzFOb2Rlc0ZhY3RvcnlTZXJ2aWNlKSxcbiAgICBob29rVGFiKE5nMVRhYnNGYWN0b3J5U2VydmljZSksXG4gICAgaG9va0FjdGlvbkJhcihOZzFBY3Rpb25CYXJGYWN0b3J5U2VydmljZSksXG4gICAgaG9va0FjdGlvbihOZzFBY3Rpb25GYWN0b3J5U2VydmljZSksXG4gICAgaG9va0JyZWFkY3J1bWIoTmcxQnJlYWRjcnVtYkZhY3RvcnlTZXJ2aWNlKSxcbiAgICBob29rRG9jcyhOZzFEb2NzRmFjdG9yeVNlcnZpY2UpXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgVXBncmFkZU1vZHVsZSB7fVxuIl19