import { ActionService, AppStateService, EmptyComponent, RouterService, ViewContext, gettext } from '@c8y/ngx-components';
import { BehaviorSubject, combineLatest, from, fromEventPattern, of } from 'rxjs';
import { debounceTime, filter, map, merge, startWith, switchMap } from 'rxjs/operators';
import { isArray } from 'lodash-es';
import { ActivationEnd } from '@angular/router';
import { NgZone } from '@angular/core';
import { Router } from '@angular/router';
import { ViewContextLegacyParameter } from './ng1/views.provider';
export class BridgeService {
    constructor(injector, appState, router, ngZone, routerService, actionService) {
        this.injector = injector;
        this.appState = appState;
        this.router = router;
        this.ngZone = ngZone;
        this.routerService = routerService;
        this.actionService = actionService;
        this.$liveTabs = new BehaviorSubject([]);
        this.fixE2eIssues();
        this.$ng1RouteChangeSuccess = this.fromNg1Event(this.injector.get('$rootScope'), '$routeChangeSuccess');
        this.$ng1RouteChangeStart = this.fromNg1Event(this.injector.get('$rootScope'), '$routeChangeStart');
        this.hookLanguage();
        this.hookTab();
        this.hookNavigator();
        this.hookUserMenu();
        this.hookViewProvider();
        this.router.initialNavigation();
        this.ng1Routes();
    }
    hookViewProvider() {
        const c8yViews = this.injector.get('c8yViews');
        // fix to trigger an angularjs route change success
        // event on context route match to make legacy
        // view-providers resolve.
        c8yViews.when('/device/:id', {
            template: ''
        });
        c8yViews.when('/group/:id', {
            template: ''
        });
        c8yViews.contextViews.subscribe(cfg => this.addRoute(cfg));
    }
    addRoute(cfg) {
        this.routerService.addRoute({
            label: cfg.label || cfg.name,
            path: cfg.path,
            icon: cfg.icon,
            context: ViewContext[cfg.contextKey],
            priority: cfg.priority,
            component: EmptyComponent,
            data: {
                showIf: cfg.showIf
                    ? ngxRoute => {
                        const params = {
                            ...ngxRoute.params,
                            [ViewContextLegacyParameter[cfg.contextKey]]: ngxRoute.params.id
                        };
                        const showIfResult = this.injector.invoke(cfg.showIf, undefined, {
                            $routeParams: params
                        });
                        // make sure showIf result is a promise with boolean result:
                        return this.injector.get('$q').when(showIfResult).then(Boolean);
                    }
                    : undefined
            },
            ...(cfg.featureId && { featureId: cfg.featureId })
        });
        if (cfg.runPhase) {
            this.routerService.refresh();
        }
    }
    ng1Routes() {
        const template = '';
        const fallbackRoutes = [];
        // tslint:disable-next-line: forin
        for (const context in ViewContext) {
            const path = ViewContext[context].match(/(\w+)\//)[1];
            const regexp = new RegExp(`^/${path}/(?:([^/]+)).*$`);
            fallbackRoutes.push({
                keys: [{ name: ViewContextLegacyParameter[context], optional: false }],
                regexp,
                template
            });
        }
        /**
         * When asset detail routes (/device/:id,  /group/:id) are matched in Angular Router, ngRoute in
         * angular.js must also have matching generic routes so that the ids can be extracted from the paths and
         * injected in multiple calls (showIf, c8yActions, etc) as properties of $routeParams.
         *
         * The function in src/ngRoute/route.js (angular.js) where the routes are matched is called parseRoute(). This
         * function calls angular.forEach and in turn this function checks for the presence of a forEach method before
         * trying object key iteration.
         * By attaching a non enumerable forEach method to the routes object we guarantee that the fallback generic routes
         * are only matched after any other registered through $routeProvider.when.
         */
        const $route = this.injector.get('$route');
        Object.defineProperty($route.routes, 'forEach', {
            // make non enumerable
            value: function forEach(iterator, context) {
                // tslint:disable-next-line: forin
                for (const key in this) {
                    iterator.call(context, this[key], key, this);
                }
                fallbackRoutes.forEach(r => iterator.call(context, r));
            }
        });
        /**
         * Some functions use the current context. As some parts are upgraded and some not, the following updates the
         * angularjs getContext function to resolve always the right context.
         */
        const c8yUiUtil = this.injector.get('c8yUiUtil');
        const _getContext = c8yUiUtil.getContext;
        this.router.events
            .pipe(filter(event => event instanceof ActivationEnd))
            .subscribe((event) => {
            if (event.snapshot.routeConfig.path === '**') {
                c8yUiUtil.getContext = _getContext;
            }
            else if (event.snapshot.data && event.snapshot.data.context) {
                c8yUiUtil.getContext = () => {
                    return {
                        context: event.snapshot.data.context.replace('/:id', ''),
                        id: event.snapshot.data.contextData.id,
                        contextData: event.snapshot.data.contextData
                    };
                };
            }
            else {
                c8yUiUtil.getContext = () => ({ context: null, id: null });
            }
        });
    }
    fixE2eIssues() {
        try {
            const { ngZone } = this;
            const { Utils } = window.org.cometd;
            const timeoutFn = Utils.setTimeout;
            // tslint:disable-next-line:only-arrow-functions
            Utils.setTimeout = function (...args) {
                return ngZone.runOutsideAngular(() => timeoutFn.apply(Utils, args));
            };
        }
        catch (e) {
            // do nothing
        }
        try {
            const { ace } = window;
            const editFn = ace.edit;
            const { ngZone } = this;
            // tslint:disable-next-line:only-arrow-functions
            ace.edit = function (...args) {
                return ngZone.runOutsideAngular(() => editFn.apply(ace, args));
            };
        }
        catch (e) {
            // do nothing
        }
    }
    hookLanguage() {
        let first = true;
        this.appState
            .map(store => store.lang)
            .subscribe(lang => {
            this.injector.get('c8yLocales').switchToLanguage(lang);
            if (!first) {
                this.injector.get('$rootScope').$apply();
            }
            first = false;
        });
    }
    hookTab() {
        // Just for instantiation of the c8yAction service
        this.injector.get('c8yActions');
        const $location = this.injector.get('$location');
        const c8yTabs = this.injector.get('c8yTabs');
        let liveTabs = [];
        c8yTabs.addTab = tab => {
            liveTabs.push({
                ...tab,
                label: tab.label || tab.name,
                path: decodeURIComponent(tab.path)
            });
            this.$liveTabs.next(liveTabs);
        };
        this.$ng1RouteChangeStart.subscribe(() => {
            liveTabs = [];
            this.$liveTabs.next(liveTabs);
        });
        this.$ng1RouteChangeSuccess.subscribe(() => {
            const path = $location.path();
            if (this.router.url !== path) {
                this.router.navigate(path === '/' ? '' : path.split('/'), {
                    queryParams: $location.search(),
                    skipLocationChange: true
                });
            }
            if (this.actionService) {
                this.actionService.refresh();
            }
        });
        this.$routeChanges = this.$ng1RouteChangeSuccess.pipe(merge(this.fromNg1Event(c8yTabs, c8yTabs.EVENT_UPDATE), of(1)), debounceTime(100));
    }
    hookNavigator() {
        this.navigationNodes$ = this.injector.get('c8yNavigator').rootNodes$;
    }
    getTabs() {
        const onlyVisible = ({ show }) => show;
        const upgradeTab = tab => ({
            ...tab,
            label: tab.label || tab.name,
            path: decodeURIComponent(tab.path)
        });
        const routeTabs = this.$routeChanges.pipe(switchMap(() => {
            const routes = this.injector.get('c8yTabs').routeTabs;
            const visibilityPromise = Promise.all(routes.map(({ checkingVisibility }) => checkingVisibility));
            return visibilityPromise.then(() => routes.filter(onlyVisible).map(upgradeTab));
        }), startWith([]));
        return combineLatest(routeTabs, this.$liveTabs).pipe(map(([route, live]) => route.concat(live)));
    }
    getQuickLinks() {
        const c8yQuickLinks = this.injector.get('c8yQuickLinks');
        return c8yQuickLinks.list();
    }
    getActionBarItems() {
        const c8yActionBar = this.injector.get('c8yActionBar');
        const $rootScope = this.injector.get('$rootScope');
        const getActionBarElements = () => c8yActionBar.elements.map(element => ({
            priority: element.getAttribute('action-bar-priority') || 0,
            template: element,
            placement: element.getAttribute('action-bar-position') || 'right'
        }));
        return this.fromNg1Event($rootScope, 'c8yActionBarChanged').pipe(startWith(1), map(getActionBarElements));
    }
    getBreadcrumbs() {
        const $location = this.injector.get('$location');
        const path = $location.path();
        const c8yBreadcrumbs = this.injector.get('c8yBreadcrumbs');
        const breadcrumbs = c8yBreadcrumbs.get(path) || {};
        const breadcrumbsData = this.resolveBreadcrumbsData(breadcrumbs.data);
        return from(breadcrumbsData).pipe(map((value) => {
            const liveBreadcrumbs = c8yBreadcrumbs.getLiveBreadcrumbs();
            value = value.concat(liveBreadcrumbs);
            return value.map(items => ({ items: items }));
        }));
    }
    resolveBreadcrumbsData(data) {
        try {
            return this.injector.invoke(data);
        }
        catch (ex) {
            // empty
        }
        if (isArray(data)) {
            return of([data]);
        }
        return of([]);
    }
    getSearch() {
        const c8ySearch = this.injector.get('c8ySearch');
        return c8ySearch.list().map(item => {
            return {
                icon: 'search',
                name: item.name,
                term: '',
                onSearch() {
                    if (this.term) {
                        c8ySearch.search(this.term);
                    }
                }
            };
        });
    }
    getActions() {
        const registeredActions = this.injector.get('c8yActions').registeredActions;
        return of(registeredActions
            .filter(action => !action.hidden)
            .map(action => ({
            // The priority was reversed: Aligned it to dashboard, high first, low last.
            priority: (action.priority || 0) * -1,
            label: action.text,
            icon: action.icon,
            disabled: action.disabled,
            action: () => {
                this.injector.invoke(action.action, action);
            }
        })));
    }
    fromNg1Event(obj, evt) {
        let stopListening;
        function add(handler) {
            stopListening = obj.$on(evt, handler);
        }
        return fromEventPattern(add, () => stopListening());
    }
    hookUserMenu() {
        const userMenuService = this.injector.get('c8yUserMenuService');
        const c8yAccessDenied = this.injector.get('c8yAccessDenied');
        userMenuService.add({
            icon: 'access',
            priority: 10,
            label: gettext('Access denied requests'),
            click: c8yAccessDenied.showAccessDeniedRequestsList
        });
    }
}
export function bridgeServiceFactory(injector, appState, router, ngZone, routerService, actionService) {
    return new BridgeService(injector, appState, router, ngZone, routerService, actionService);
}
export const bridgeServiceProvider = {
    provide: BridgeService,
    useFactory: bridgeServiceFactory,
    deps: ['$injector', AppStateService, Router, NgZone, RouterService, ActionService]
};
//# sourceMappingURL=data:application/json;base64,