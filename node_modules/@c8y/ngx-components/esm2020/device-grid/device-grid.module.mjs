import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CommonModule, DataGridModule, DeviceStatusModule, DynamicFormsModule, FormsModule, ProductExperienceModule } from '@c8y/ngx-components';
import { AssetSelectorModule } from '@c8y/ngx-components/assets-navigator';
import { PopoverModule } from 'ngx-bootstrap/popover';
import { AlarmsCellRendererComponent } from './columns/alarms.cell-renderer.component';
import { AlarmsHeaderCellRendererComponent } from './columns/alarms.header-cell-renderer.component';
import { BaseFilteringFormRendererComponent } from './columns/base.filtering-form-renderer.component';
import { GroupCellRendererComponent } from './columns/group.cell-renderer.component';
import { GroupFilteringFormRendererComponent } from './columns/group.filtering-form-renderer.component';
import { ModelCellRendererComponent } from './columns/model.cell-renderer.component';
import { NameCellRendererComponent } from './columns/name.cell-renderer.component';
import { RegistrationDateCellRendererComponent } from './columns/registration-date.cell-renderer.component';
import { SerialNumberCellRendererComponent } from './columns/serial-number.cell-renderer.component';
import { StatusCellRendererComponent } from './columns/status.cell-renderer.component';
import { DeviceGridComponent } from './device-grid.component';
import * as i0 from "@angular/core";
export class DeviceGridModule {
}
DeviceGridModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: DeviceGridModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DeviceGridModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.0.6", ngImport: i0, type: DeviceGridModule, declarations: [DeviceGridComponent,
        BaseFilteringFormRendererComponent,
        GroupFilteringFormRendererComponent,
        StatusCellRendererComponent,
        NameCellRendererComponent,
        ModelCellRendererComponent,
        SerialNumberCellRendererComponent,
        GroupCellRendererComponent,
        RegistrationDateCellRendererComponent,
        AlarmsCellRendererComponent,
        AlarmsHeaderCellRendererComponent], imports: [CommonModule,
        FormsModule,
        DeviceStatusModule,
        DataGridModule,
        AssetSelectorModule,
        DynamicFormsModule,
        PopoverModule,
        RouterModule,
        ProductExperienceModule], exports: [DeviceGridComponent,
        BaseFilteringFormRendererComponent,
        GroupFilteringFormRendererComponent,
        StatusCellRendererComponent,
        NameCellRendererComponent,
        ModelCellRendererComponent,
        SerialNumberCellRendererComponent,
        GroupCellRendererComponent,
        RegistrationDateCellRendererComponent,
        AlarmsCellRendererComponent,
        AlarmsHeaderCellRendererComponent] });
DeviceGridModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: DeviceGridModule, imports: [CommonModule,
        FormsModule,
        DeviceStatusModule,
        DataGridModule,
        AssetSelectorModule,
        DynamicFormsModule,
        PopoverModule,
        RouterModule,
        ProductExperienceModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: DeviceGridModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        DeviceStatusModule,
                        DataGridModule,
                        AssetSelectorModule,
                        DynamicFormsModule,
                        PopoverModule,
                        RouterModule,
                        ProductExperienceModule
                    ],
                    declarations: [
                        DeviceGridComponent,
                        BaseFilteringFormRendererComponent,
                        GroupFilteringFormRendererComponent,
                        StatusCellRendererComponent,
                        NameCellRendererComponent,
                        ModelCellRendererComponent,
                        SerialNumberCellRendererComponent,
                        GroupCellRendererComponent,
                        RegistrationDateCellRendererComponent,
                        AlarmsCellRendererComponent,
                        AlarmsHeaderCellRendererComponent
                    ],
                    exports: [
                        DeviceGridComponent,
                        BaseFilteringFormRendererComponent,
                        GroupFilteringFormRendererComponent,
                        StatusCellRendererComponent,
                        NameCellRendererComponent,
                        ModelCellRendererComponent,
                        SerialNumberCellRendererComponent,
                        GroupCellRendererComponent,
                        RegistrationDateCellRendererComponent,
                        AlarmsCellRendererComponent,
                        AlarmsHeaderCellRendererComponent
                    ],
                    entryComponents: [
                        DeviceGridComponent,
                        BaseFilteringFormRendererComponent,
                        GroupFilteringFormRendererComponent,
                        StatusCellRendererComponent,
                        NameCellRendererComponent,
                        ModelCellRendererComponent,
                        SerialNumberCellRendererComponent,
                        GroupCellRendererComponent,
                        RegistrationDateCellRendererComponent,
                        AlarmsCellRendererComponent,
                        AlarmsHeaderCellRendererComponent
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWdyaWQubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2aWNlLWdyaWQvZGV2aWNlLWdyaWQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFDTCxZQUFZLEVBQ1osY0FBYyxFQUNkLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsV0FBVyxFQUNYLHVCQUF1QixFQUN4QixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUN2RixPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUNwRyxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUN0RyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNyRixPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUN4RyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNyRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNuRixPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUM1RyxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUNwRyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUN2RixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7QUFzRDlELE1BQU0sT0FBTyxnQkFBZ0I7OzZHQUFoQixnQkFBZ0I7OEdBQWhCLGdCQUFnQixpQkF2Q3pCLG1CQUFtQjtRQUNuQixrQ0FBa0M7UUFDbEMsbUNBQW1DO1FBQ25DLDJCQUEyQjtRQUMzQix5QkFBeUI7UUFDekIsMEJBQTBCO1FBQzFCLGlDQUFpQztRQUNqQywwQkFBMEI7UUFDMUIscUNBQXFDO1FBQ3JDLDJCQUEyQjtRQUMzQixpQ0FBaUMsYUFyQmpDLFlBQVk7UUFDWixXQUFXO1FBQ1gsa0JBQWtCO1FBQ2xCLGNBQWM7UUFDZCxtQkFBbUI7UUFDbkIsa0JBQWtCO1FBQ2xCLGFBQWE7UUFDYixZQUFZO1FBQ1osdUJBQXVCLGFBZ0J2QixtQkFBbUI7UUFDbkIsa0NBQWtDO1FBQ2xDLG1DQUFtQztRQUNuQywyQkFBMkI7UUFDM0IseUJBQXlCO1FBQ3pCLDBCQUEwQjtRQUMxQixpQ0FBaUM7UUFDakMsMEJBQTBCO1FBQzFCLHFDQUFxQztRQUNyQywyQkFBMkI7UUFDM0IsaUNBQWlDOzhHQWdCeEIsZ0JBQWdCLFlBbER6QixZQUFZO1FBQ1osV0FBVztRQUNYLGtCQUFrQjtRQUNsQixjQUFjO1FBQ2QsbUJBQW1CO1FBQ25CLGtCQUFrQjtRQUNsQixhQUFhO1FBQ2IsWUFBWTtRQUNaLHVCQUF1QjsyRkEwQ2QsZ0JBQWdCO2tCQXBENUIsUUFBUTttQkFBQztvQkFDUixPQUFPLEVBQUU7d0JBQ1AsWUFBWTt3QkFDWixXQUFXO3dCQUNYLGtCQUFrQjt3QkFDbEIsY0FBYzt3QkFDZCxtQkFBbUI7d0JBQ25CLGtCQUFrQjt3QkFDbEIsYUFBYTt3QkFDYixZQUFZO3dCQUNaLHVCQUF1QjtxQkFDeEI7b0JBQ0QsWUFBWSxFQUFFO3dCQUNaLG1CQUFtQjt3QkFDbkIsa0NBQWtDO3dCQUNsQyxtQ0FBbUM7d0JBQ25DLDJCQUEyQjt3QkFDM0IseUJBQXlCO3dCQUN6QiwwQkFBMEI7d0JBQzFCLGlDQUFpQzt3QkFDakMsMEJBQTBCO3dCQUMxQixxQ0FBcUM7d0JBQ3JDLDJCQUEyQjt3QkFDM0IsaUNBQWlDO3FCQUNsQztvQkFDRCxPQUFPLEVBQUU7d0JBQ1AsbUJBQW1CO3dCQUNuQixrQ0FBa0M7d0JBQ2xDLG1DQUFtQzt3QkFDbkMsMkJBQTJCO3dCQUMzQix5QkFBeUI7d0JBQ3pCLDBCQUEwQjt3QkFDMUIsaUNBQWlDO3dCQUNqQywwQkFBMEI7d0JBQzFCLHFDQUFxQzt3QkFDckMsMkJBQTJCO3dCQUMzQixpQ0FBaUM7cUJBQ2xDO29CQUNELGVBQWUsRUFBRTt3QkFDZixtQkFBbUI7d0JBQ25CLGtDQUFrQzt3QkFDbEMsbUNBQW1DO3dCQUNuQywyQkFBMkI7d0JBQzNCLHlCQUF5Qjt3QkFDekIsMEJBQTBCO3dCQUMxQixpQ0FBaUM7d0JBQ2pDLDBCQUEwQjt3QkFDMUIscUNBQXFDO3dCQUNyQywyQkFBMkI7d0JBQzNCLGlDQUFpQztxQkFDbEM7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7XG4gIENvbW1vbk1vZHVsZSxcbiAgRGF0YUdyaWRNb2R1bGUsXG4gIERldmljZVN0YXR1c01vZHVsZSxcbiAgRHluYW1pY0Zvcm1zTW9kdWxlLFxuICBGb3Jtc01vZHVsZSxcbiAgUHJvZHVjdEV4cGVyaWVuY2VNb2R1bGVcbn0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBBc3NldFNlbGVjdG9yTW9kdWxlIH0gZnJvbSAnQGM4eS9uZ3gtY29tcG9uZW50cy9hc3NldHMtbmF2aWdhdG9yJztcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICduZ3gtYm9vdHN0cmFwL3BvcG92ZXInO1xuaW1wb3J0IHsgQWxhcm1zQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL2FsYXJtcy5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBbGFybXNIZWFkZXJDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvYWxhcm1zLmhlYWRlci1jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCYXNlRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL2Jhc2UuZmlsdGVyaW5nLWZvcm0tcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEdyb3VwQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL2dyb3VwLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEdyb3VwRmlsdGVyaW5nRm9ybVJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL2dyb3VwLmZpbHRlcmluZy1mb3JtLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNb2RlbENlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1ucy9tb2RlbC5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOYW1lQ2VsbFJlbmRlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2x1bW5zL25hbWUuY2VsbC1yZW5kZXJlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgUmVnaXN0cmF0aW9uRGF0ZUNlbGxSZW5kZXJlckNvbXBvbmVudCB9IGZyb20gJy4vY29sdW1ucy9yZWdpc3RyYXRpb24tZGF0ZS5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZXJpYWxOdW1iZXJDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvc2VyaWFsLW51bWJlci5jZWxsLXJlbmRlcmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdGF0dXNDZWxsUmVuZGVyZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbHVtbnMvc3RhdHVzLmNlbGwtcmVuZGVyZXIuY29tcG9uZW50JztcbmltcG9ydCB7IERldmljZUdyaWRDb21wb25lbnQgfSBmcm9tICcuL2RldmljZS1ncmlkLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgRm9ybXNNb2R1bGUsXG4gICAgRGV2aWNlU3RhdHVzTW9kdWxlLFxuICAgIERhdGFHcmlkTW9kdWxlLFxuICAgIEFzc2V0U2VsZWN0b3JNb2R1bGUsXG4gICAgRHluYW1pY0Zvcm1zTW9kdWxlLFxuICAgIFBvcG92ZXJNb2R1bGUsXG4gICAgUm91dGVyTW9kdWxlLFxuICAgIFByb2R1Y3RFeHBlcmllbmNlTW9kdWxlXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIERldmljZUdyaWRDb21wb25lbnQsXG4gICAgQmFzZUZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbXBvbmVudCxcbiAgICBHcm91cEZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbXBvbmVudCxcbiAgICBTdGF0dXNDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgTmFtZUNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBNb2RlbENlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBTZXJpYWxOdW1iZXJDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgR3JvdXBDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgUmVnaXN0cmF0aW9uRGF0ZUNlbGxSZW5kZXJlckNvbXBvbmVudCxcbiAgICBBbGFybXNDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgQWxhcm1zSGVhZGVyQ2VsbFJlbmRlcmVyQ29tcG9uZW50XG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBEZXZpY2VHcmlkQ29tcG9uZW50LFxuICAgIEJhc2VGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQsXG4gICAgR3JvdXBGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQsXG4gICAgU3RhdHVzQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIE5hbWVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgTW9kZWxDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgU2VyaWFsTnVtYmVyQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIEdyb3VwQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIFJlZ2lzdHJhdGlvbkRhdGVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgQWxhcm1zQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIEFsYXJtc0hlYWRlckNlbGxSZW5kZXJlckNvbXBvbmVudFxuICBdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtcbiAgICBEZXZpY2VHcmlkQ29tcG9uZW50LFxuICAgIEJhc2VGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQsXG4gICAgR3JvdXBGaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQsXG4gICAgU3RhdHVzQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIE5hbWVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgTW9kZWxDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgU2VyaWFsTnVtYmVyQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIEdyb3VwQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIFJlZ2lzdHJhdGlvbkRhdGVDZWxsUmVuZGVyZXJDb21wb25lbnQsXG4gICAgQWxhcm1zQ2VsbFJlbmRlcmVyQ29tcG9uZW50LFxuICAgIEFsYXJtc0hlYWRlckNlbGxSZW5kZXJlckNvbXBvbmVudFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIERldmljZUdyaWRNb2R1bGUge31cbiJdfQ==