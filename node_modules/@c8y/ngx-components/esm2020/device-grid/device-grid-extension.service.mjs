import { Injectable, InjectFlags, InjectionToken, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { ExtensionPointWithoutStateForPlugins, fromTriggerOnce, hookGeneric, PluginsResolveService } from '@c8y/ngx-components';
import { flatten } from 'lodash-es';
import { shareReplay } from 'rxjs/operators';
import { DeviceGridService } from './device-grid.service';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components";
import * as i2 from "@angular/router";
import * as i3 from "./device-grid.service";
/**
 * A hook to use for Multi Provider extension.
 * @deprecated Consider using the `hookDeviceGridAction` function instead.
 */
export const HOOK_DEVICE_GRID_ACTION = new InjectionToken('DeviceGridActionHook');
/**
 * You can either provide a single `DeviceGridActionExtension` as parameter:
 * ```typescript
 *  hookDeviceGridAction(...)
 * ```
 *
 * Or an array to directly register multiple:
 * ```typescript
 *  hookDeviceGridAction([...])
 * ```
 *
 * Or you provide an Service that implements `ExtensionFactory<DeviceGridActionExtension>`
 * ```typescript
 *  export class MyDeviceGridActionFactory implements ExtensionFactory<DeviceGridActionExtension> {...}
 *  ...
 *  hookDeviceGridAction(MyDeviceGridActionFactory)
 * ```
 * A typed alternative to `HOOK_DEVICE_GRID_ACTION_DELETE`.
 * @param action The `DeviceGridDeleteExtension`'s or `ExtensionFactory` to be provided.
 * @returns An `Provider` to be provided in your module.
 */
export function hookDeviceGridAction(action, options) {
    return hookGeneric(action, HOOK_DEVICE_GRID_ACTION, options);
}
/**
 * A service which defines device grid action options.
 */
export class DeviceGridExtensionService extends ExtensionPointWithoutStateForPlugins {
    constructor(rootInjector, plugins, router, deviceGridService) {
        super(rootInjector, plugins);
        this.router = router;
        this.deviceGridService = deviceGridService;
        this.items$ = this.setupItemsObservable();
    }
    setupItemsObservable() {
        return fromTriggerOnce(this.router, this.refresh$, [
            () => flatten(this.injectors.map(injector => injector.get(HOOK_DEVICE_GRID_ACTION, [
                {
                    type: "DELETE" /* BuiltInActionType.Delete */,
                    deviceMatches: (_mo) => true,
                    onAction: (mo) => this.deviceGridService.delete(mo),
                    refreshAfterActionDone: true
                }
            ], InjectFlags.Self))),
            () => this.factories
        ]).pipe(shareReplay(1));
    }
}
DeviceGridExtensionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: DeviceGridExtensionService, deps: [{ token: i0.Injector }, { token: i1.PluginsResolveService }, { token: i2.Router }, { token: i3.DeviceGridService }], target: i0.ɵɵFactoryTarget.Injectable });
DeviceGridExtensionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: DeviceGridExtensionService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: DeviceGridExtensionService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.PluginsResolveService }, { type: i2.Router }, { type: i3.DeviceGridService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWdyaWQtZXh0ZW5zaW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9kZXZpY2UtZ3JpZC9kZXZpY2UtZ3JpZC1leHRlbnNpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QyxPQUFPLEVBRUwsb0NBQW9DLEVBQ3BDLGVBQWUsRUFFZixXQUFXLEVBQ1gscUJBQXFCLEVBR3RCLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVwQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7Ozs7O0FBeUIxRDs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLGNBQWMsQ0FDdkQsc0JBQXNCLENBQ3ZCLENBQUM7QUFFRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkc7QUFDSCxNQUFNLFVBQVUsb0JBQW9CLENBQ2xDLE1BQWtELEVBQ2xELE9BQThCO0lBRTlCLE9BQU8sV0FBVyxDQUE0QixNQUFNLEVBQUUsdUJBQXVCLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDMUYsQ0FBQztBQUVEOztHQUVHO0FBSUgsTUFBTSxPQUFPLDBCQUEyQixTQUFRLG9DQUEwRDtJQUN4RyxZQUNFLFlBQXNCLEVBQ3RCLE9BQThCLEVBQ3RCLE1BQWMsRUFDZCxpQkFBb0M7UUFFNUMsS0FBSyxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUhyQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2Qsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUc1QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFFUyxvQkFBb0I7UUFDNUIsT0FBTyxlQUFlLENBQXVCLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUN2RSxHQUFHLEVBQUUsQ0FDSCxPQUFPLENBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FDNUIsUUFBUSxDQUFDLEdBQUcsQ0FDVix1QkFBdUIsRUFDdkI7Z0JBQ0U7b0JBQ0UsSUFBSSx5Q0FBMEI7b0JBQzlCLGFBQWEsRUFBRSxDQUFDLEdBQW1CLEVBQUUsRUFBRSxDQUFDLElBQUk7b0JBQzVDLFFBQVEsRUFBRSxDQUFDLEVBQWtCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO29CQUNuRSxzQkFBc0IsRUFBRSxJQUFJO2lCQUM3QjthQUNGLEVBQ0QsV0FBVyxDQUFDLElBQUksQ0FDakIsQ0FDRixDQUNGO1lBQ0gsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVM7U0FDckIsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQixDQUFDOzt1SEFoQ1UsMEJBQTBCOzJIQUExQiwwQkFBMEIsY0FGekIsTUFBTTsyRkFFUCwwQkFBMEI7a0JBSHRDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0RmxhZ3MsIEluamVjdGlvblRva2VuLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IElNYW5hZ2VkT2JqZWN0IH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHtcbiAgRXh0ZW5zaW9uRmFjdG9yeSxcbiAgRXh0ZW5zaW9uUG9pbnRXaXRob3V0U3RhdGVGb3JQbHVnaW5zLFxuICBmcm9tVHJpZ2dlck9uY2UsXG4gIEdlbmVyaWNIb29rVHlwZSxcbiAgaG9va0dlbmVyaWMsXG4gIFBsdWdpbnNSZXNvbHZlU2VydmljZSxcbiAgSG9va09wdGlvbnMsXG4gIEJ1aWx0SW5BY3Rpb25UeXBlXG59IGZyb20gJ0BjOHkvbmd4LWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgZmxhdHRlbiB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzaGFyZVJlcGxheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IERldmljZUdyaWRBY3Rpb25Ib29rIH0gZnJvbSAnLi9kZXZpY2UtZ3JpZC5tb2RlbCc7XG5pbXBvcnQgeyBEZXZpY2VHcmlkU2VydmljZSB9IGZyb20gJy4vZGV2aWNlLWdyaWQuc2VydmljZSc7XG5cbi8qKlxuICogQW4gZXh0ZW5zaW9uIEhPT0sgY2FuIHVzZSBlaXRoZXIgYSBwdXJlIHZhbHVlOlxuICogYGBgdHlwZXNjcmlwdFxuICogIHsgcHJvdmlkZTogSE9PS19YLCB1c2VWYWx1ZTogeyAuLi5ob29rVmFsdWUgfSwgbXVsdGk6IHRydWUgfVxuICogYGBgXG4gKlxuICogT3IgYW4gYXJyYXkgdG8gZGlyZWN0bHkgcmVnaXN0ZXIgbXVsdGlwbGU6XG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgeyBwcm92aWRlOiBIT09LX1gsIHVzZVZhbHVlOiBbeyAuLi5ob29rVmFsdWVzIH1dLCBtdWx0aTogdHJ1ZSB9XG4gKiBgYGBcbiAqXG4gKiBPciBhbiBFeHRlbnNpb25GYWN0b3J5IHdoaWNoIGFsbG93cyB0byBkZWZpbmUgYSBnZXQoKSBmdW5jdGlvbi4gVGhpcyBmdW5jdGlvblxuICogZ2V0cyBjYWxsZWQgb24gZWFjaCBuYXZpZ2F0aW9uIHdpdGggdGhlIGN1cnJlbnQgcm91dGUgYW5kIGNhbiByZXR1cm4gdmFsdWVzXG4gKiBhc3luYyAob2JzZXJ2YWJsZSBvciBwcm9taXNlKS5cbiAqIGBgYHR5cGVzY3JpcHRcbiAqICB7IHByb3ZpZGU6IEhPT0tfWCwgdXNlRmFjdG9yeTogeyBnZXQ6IChyb3V0ZSkgPT4gZG9Tb21ldGhpbmdBc3luYyhyb3V0ZSkgfSwgbXVsdGk6IHRydWUgfVxuICogYGBgXG4gKi9cbmV4cG9ydCB0eXBlIERldmljZUdyaWRBY3Rpb25FeHRlbnNpb24gPVxuICB8IERldmljZUdyaWRBY3Rpb25Ib29rXG4gIHwgRGV2aWNlR3JpZEFjdGlvbkhvb2tbXVxuICB8IEV4dGVuc2lvbkZhY3Rvcnk8RGV2aWNlR3JpZEFjdGlvbkhvb2s+O1xuXG4vKipcbiAqIEEgaG9vayB0byB1c2UgZm9yIE11bHRpIFByb3ZpZGVyIGV4dGVuc2lvbi5cbiAqIEBkZXByZWNhdGVkIENvbnNpZGVyIHVzaW5nIHRoZSBgaG9va0RldmljZUdyaWRBY3Rpb25gIGZ1bmN0aW9uIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBjb25zdCBIT09LX0RFVklDRV9HUklEX0FDVElPTiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxEZXZpY2VHcmlkQWN0aW9uRXh0ZW5zaW9uPihcbiAgJ0RldmljZUdyaWRBY3Rpb25Ib29rJ1xuKTtcblxuLyoqXG4gKiBZb3UgY2FuIGVpdGhlciBwcm92aWRlIGEgc2luZ2xlIGBEZXZpY2VHcmlkQWN0aW9uRXh0ZW5zaW9uYCBhcyBwYXJhbWV0ZXI6XG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgaG9va0RldmljZUdyaWRBY3Rpb24oLi4uKVxuICogYGBgXG4gKlxuICogT3IgYW4gYXJyYXkgdG8gZGlyZWN0bHkgcmVnaXN0ZXIgbXVsdGlwbGU6XG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAgaG9va0RldmljZUdyaWRBY3Rpb24oWy4uLl0pXG4gKiBgYGBcbiAqXG4gKiBPciB5b3UgcHJvdmlkZSBhbiBTZXJ2aWNlIHRoYXQgaW1wbGVtZW50cyBgRXh0ZW5zaW9uRmFjdG9yeTxEZXZpY2VHcmlkQWN0aW9uRXh0ZW5zaW9uPmBcbiAqIGBgYHR5cGVzY3JpcHRcbiAqICBleHBvcnQgY2xhc3MgTXlEZXZpY2VHcmlkQWN0aW9uRmFjdG9yeSBpbXBsZW1lbnRzIEV4dGVuc2lvbkZhY3Rvcnk8RGV2aWNlR3JpZEFjdGlvbkV4dGVuc2lvbj4gey4uLn1cbiAqICAuLi5cbiAqICBob29rRGV2aWNlR3JpZEFjdGlvbihNeURldmljZUdyaWRBY3Rpb25GYWN0b3J5KVxuICogYGBgXG4gKiBBIHR5cGVkIGFsdGVybmF0aXZlIHRvIGBIT09LX0RFVklDRV9HUklEX0FDVElPTl9ERUxFVEVgLlxuICogQHBhcmFtIGFjdGlvbiBUaGUgYERldmljZUdyaWREZWxldGVFeHRlbnNpb25gJ3Mgb3IgYEV4dGVuc2lvbkZhY3RvcnlgIHRvIGJlIHByb3ZpZGVkLlxuICogQHJldHVybnMgQW4gYFByb3ZpZGVyYCB0byBiZSBwcm92aWRlZCBpbiB5b3VyIG1vZHVsZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhvb2tEZXZpY2VHcmlkQWN0aW9uKFxuICBhY3Rpb246IEdlbmVyaWNIb29rVHlwZTxEZXZpY2VHcmlkQWN0aW9uRXh0ZW5zaW9uPixcbiAgb3B0aW9ucz86IFBhcnRpYWw8SG9va09wdGlvbnM+XG4pIHtcbiAgcmV0dXJuIGhvb2tHZW5lcmljPERldmljZUdyaWRBY3Rpb25FeHRlbnNpb24+KGFjdGlvbiwgSE9PS19ERVZJQ0VfR1JJRF9BQ1RJT04sIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIEEgc2VydmljZSB3aGljaCBkZWZpbmVzIGRldmljZSBncmlkIGFjdGlvbiBvcHRpb25zLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBEZXZpY2VHcmlkRXh0ZW5zaW9uU2VydmljZSBleHRlbmRzIEV4dGVuc2lvblBvaW50V2l0aG91dFN0YXRlRm9yUGx1Z2luczxEZXZpY2VHcmlkQWN0aW9uSG9vaz4ge1xuICBjb25zdHJ1Y3RvcihcbiAgICByb290SW5qZWN0b3I6IEluamVjdG9yLFxuICAgIHBsdWdpbnM6IFBsdWdpbnNSZXNvbHZlU2VydmljZSxcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgZGV2aWNlR3JpZFNlcnZpY2U6IERldmljZUdyaWRTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKHJvb3RJbmplY3RvciwgcGx1Z2lucyk7XG4gICAgdGhpcy5pdGVtcyQgPSB0aGlzLnNldHVwSXRlbXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0dXBJdGVtc09ic2VydmFibGUoKTogT2JzZXJ2YWJsZTxEZXZpY2VHcmlkQWN0aW9uSG9va1tdPiB7XG4gICAgcmV0dXJuIGZyb21UcmlnZ2VyT25jZTxEZXZpY2VHcmlkQWN0aW9uSG9vaz4odGhpcy5yb3V0ZXIsIHRoaXMucmVmcmVzaCQsIFtcbiAgICAgICgpID0+XG4gICAgICAgIGZsYXR0ZW4oXG4gICAgICAgICAgdGhpcy5pbmplY3RvcnMubWFwKGluamVjdG9yID0+XG4gICAgICAgICAgICBpbmplY3Rvci5nZXQoXG4gICAgICAgICAgICAgIEhPT0tfREVWSUNFX0dSSURfQUNUSU9OLFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdHlwZTogQnVpbHRJbkFjdGlvblR5cGUuRGVsZXRlLFxuICAgICAgICAgICAgICAgICAgZGV2aWNlTWF0Y2hlczogKF9tbzogSU1hbmFnZWRPYmplY3QpID0+IHRydWUsXG4gICAgICAgICAgICAgICAgICBvbkFjdGlvbjogKG1vOiBJTWFuYWdlZE9iamVjdCkgPT4gdGhpcy5kZXZpY2VHcmlkU2VydmljZS5kZWxldGUobW8pLFxuICAgICAgICAgICAgICAgICAgcmVmcmVzaEFmdGVyQWN0aW9uRG9uZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgSW5qZWN0RmxhZ3MuU2VsZlxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICgpID0+IHRoaXMuZmFjdG9yaWVzXG4gICAgXSkucGlwZShzaGFyZVJlcGxheSgxKSk7XG4gIH1cbn1cbiJdfQ==