import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { OperationService } from '@c8y/client';
import { AlertService, gettext, ManagedObjectRealtimeService, OperationRealtimeService } from '@c8y/ngx-components';
import { includes, isEmpty } from 'lodash-es';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BehaviorSubject, of, pipe, Subject } from 'rxjs';
import { filter, map, startWith, takeUntil } from 'rxjs/operators';
import { CommandTemplatesComponent } from '../command-templates';
import { CommandDeliveryType, DeviceShellService } from '../shared';
import * as i0 from "@angular/core";
import * as i1 from "../shared";
import * as i2 from "@c8y/ngx-components";
import * as i3 from "@c8y/client";
import * as i4 from "@angular/router";
import * as i5 from "ngx-bootstrap/modal";
import * as i6 from "@angular/common";
import * as i7 from "@angular/forms";
import * as i8 from "@c8y/ngx-components/operations/operations-timeline";
export class DeviceShellComponent {
    constructor(service, operationRealtime, moRealtime, operationService, route, modalService, alertService) {
        this.service = service;
        this.operationRealtime = operationRealtime;
        this.moRealtime = moRealtime;
        this.operationService = operationService;
        this.route = route;
        this.modalService = modalService;
        this.alertService = alertService;
        this.device = this.route.snapshot.parent.data.contextData;
        this.device$ = of({});
        this.deliveryTypes = (this.service.getDeliveryTypes() || []).map(deliveryType => ({ ...deliveryType, isSupportedByCommand: true }));
        this.command = {};
        this.smsEnabled = false;
        this.sendingCommand$ = new BehaviorSubject(false);
        this.filterPipe = pipe(map((operations) => (operations || []).filter((operation) => !!operation.c8y_Command)));
        this.executeViaLabel = gettext('Execute via ({{deliveryType}})');
        this.destroyed$ = new Subject();
    }
    async ngOnInit() {
        this.smsEnabled = await this.service.canSendCommandsViaSMS();
        this.device$ = this.moRealtime.onUpdate$(this.device.id).pipe(startWith(this.device));
        this.operations = await this.operationService.list({
            deviceId: this.device.id,
            fragmentType: 'c8y_Command',
            dateFrom: new Date(0).toISOString(),
            dateTo: new Date().toISOString(),
            pageSize: 50,
            withTotalPages: true,
            revert: true
        });
        this.operationRealtime
            .onCreate$(this.device.id)
            .pipe(takeUntil(this.destroyed$))
            .subscribe(() => this.alertService.success(gettext('Command sent.')));
        this.operationRealtime
            .onUpdate$(this.device.id)
            .pipe(filter(op => op.failureReason !== 'Operation cancelled by user.'), // avoid duplicate alerts
        takeUntil(this.destroyed$))
            .subscribe(() => this.alertService.success(gettext('Command status updated.')));
    }
    getPredefinedCommand() {
        const modal = this.modalService.show(CommandTemplatesComponent, {
            ariaDescribedby: 'modal-body',
            ariaLabelledBy: 'modal-title'
        });
        modal.content.onTemplateSelected.pipe(takeUntil(this.destroyed$)).subscribe(result => {
            this.command = { ...result.commandTemplate };
            this.deliveryTypes = this.deliveryTypes.map(deliveryType => ({
                ...deliveryType,
                isSupportedByCommand: isEmpty(this.command.deliveryTypes) ||
                    includes(this.command.deliveryTypes, deliveryType.name)
            }));
        });
    }
    resetSupportedDeliveryTypes() {
        this.deliveryTypes = (this.service.getDeliveryTypes() || []).map(deliveryType => ({
            ...deliveryType,
            isSupportedByCommand: true
        }));
    }
    async execute(commandDeliveryType) {
        const useSMS = commandDeliveryType === CommandDeliveryType.SMS;
        if (useSMS && !this.smsEnabled) {
            this.alertService.warning(gettext('SMS transport is not configured.'));
            return;
        }
        this.sendingCommand$.next(true);
        await this.service.createCommandOperation(this.device.id, this.command, commandDeliveryType);
        this.command.text = '';
        this.command.name = '';
        this.resetSupportedDeliveryTypes();
        this.sendingCommand$.next(false);
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
}
DeviceShellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: DeviceShellComponent, deps: [{ token: i1.DeviceShellService }, { token: i2.OperationRealtimeService }, { token: i2.ManagedObjectRealtimeService }, { token: i3.OperationService }, { token: i4.ActivatedRoute }, { token: i5.BsModalService }, { token: i2.AlertService }], target: i0.ɵɵFactoryTarget.Component });
DeviceShellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.6", type: DeviceShellComponent, selector: "c8y-device-shell", providers: [OperationRealtimeService, ManagedObjectRealtimeService], ngImport: i0, template: "<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"operationRealtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n\n<div class=\"card content-fullpage d-grid grid__col--6-6--md\">\n  <div class=\"inner-scroll d-flex d-col bg-level-0\">\n    <div class=\"card-header large-padding separator sticky-top\">\n      <div class=\"card-title\">\n        {{ 'Command' | translate }}\n      </div>\n    </div>\n\n    <div class=\"card-block d-flex d-col flex-grow large-padding\">\n      <div class=\"d-flex p-b-16\">\n        <button\n          class=\"btn btn-default btn-sm\"\n          type=\"button\"\n          (click)=\"getPredefinedCommand()\"\n          [title]=\"'Display a list of predefined commands' | translate\"\n        >\n          {{ 'Predefined commands' | translate }}\n        </button>\n\n        <div class=\"m-l-auto\">\n          <device-status [mo]=\"device$ | async\"></device-status>\n        </div>\n      </div>\n      <textarea\n        [attr.aria-label]=\"'Commands' | translate\"\n        class=\"form-control inner-scroll flex-grow bg-level-2 text-monospace\"\n        [(ngModel)]=\"command.text\"\n        (ngModelChange)=\"$event || resetSupportedDeliveryTypes()\"\n        placeholder=\"{{ 'Add commands or use predefined commands above.' | translate }}\"\n      ></textarea>\n    </div>\n\n    <div class=\"card-footer large-padding separator\">\n      <ng-container *ngFor=\"let deliveryType of deliveryTypes\">\n        <button\n          class=\"btn btn-primary\"\n          type=\"button\"\n          *ngIf=\"deliveryType.isSupportedByCommand\"\n          [disabled]=\"!command?.text || (sendingCommand$ | async)\"\n          (click)=\"execute(deliveryType.name)\"\n        >\n          <span\n            [title]=\"\n              deliveryType.default\n                ? ('Execute' | translate)\n                : (executeViaLabel | translate: { deliveryType: deliveryType.name })\n            \"\n          >\n            {{\n              deliveryType.default\n                ? ('Execute' | translate)\n                : (executeViaLabel | translate: { deliveryType: deliveryType.name })\n            }}\n          </span>\n        </button>\n      </ng-container>\n    </div>\n  </div>\n  <div class=\"inner-scroll bg-level-1\">\n    <div class=\"card-header large-padding separator sticky-top\">\n      <div class=\"card-title\">\n        {{ 'Operations' | translate }}\n      </div>\n    </div>\n    <div class=\"card-block large-padding\">\n      <c8y-operations-timeline\n        [operations]=\"operations\"\n        [sourceId]=\"device.id\"\n        [filterPipe]=\"filterPipe\"\n        [bodyTemplate]=\"timelineItemBody\"\n        [footerTemplates]=\"[timelineItemFooter]\"\n        [propertiesToHide]=\"['c8y_Command']\"\n      ></c8y-operations-timeline>\n      <ng-template #timelineItemBody let-operation>\n        <small>{{ operation.c8y_Command?.text || operation.description }}</small>\n      </ng-template>\n      <ng-template #timelineItemFooter let-operation>\n        <div *ngIf=\"operation.c8y_Command?.text\">\n          <div class=\"legend form-block\" translate>Command</div>\n          <pre class=\"p-8 text-pre-normal\">\n              <code>{{operation.c8y_Command.text}}</code>\n          </pre>\n        </div>\n        <div *ngIf=\"operation.c8y_Command?.result\">\n          <div class=\"legend form-block\" translate>Response</div>\n          <pre class=\"p-8 text-pre-normal\">\n              <code>{{operation.c8y_Command.result}}</code>\n          </pre>\n        </div>\n      </ng-template>\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.ActionBarItemComponent, selector: "c8y-action-bar-item", inputs: ["placement", "priority", "itemClass", "injector", "groupId"] }, { kind: "directive", type: i2.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i7.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i7.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i2.DeviceStatusComponent, selector: "device-status", inputs: ["mo"] }, { kind: "component", type: i2.RealtimeButtonComponent, selector: "c8y-realtime-btn", inputs: ["service", "label", "title"] }, { kind: "component", type: i8.OperationsTimelineComponent, selector: "c8y-operations-timeline", inputs: ["operations", "sourceId", "filterPipe", "bodyTemplate", "footerTemplates", "propertiesToHide"] }, { kind: "pipe", type: i6.AsyncPipe, name: "async" }, { kind: "pipe", type: i2.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: DeviceShellComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-device-shell', providers: [OperationRealtimeService, ManagedObjectRealtimeService], template: "<c8y-action-bar-item [placement]=\"'right'\">\n  <c8y-realtime-btn [service]=\"operationRealtime\"></c8y-realtime-btn>\n</c8y-action-bar-item>\n\n<div class=\"card content-fullpage d-grid grid__col--6-6--md\">\n  <div class=\"inner-scroll d-flex d-col bg-level-0\">\n    <div class=\"card-header large-padding separator sticky-top\">\n      <div class=\"card-title\">\n        {{ 'Command' | translate }}\n      </div>\n    </div>\n\n    <div class=\"card-block d-flex d-col flex-grow large-padding\">\n      <div class=\"d-flex p-b-16\">\n        <button\n          class=\"btn btn-default btn-sm\"\n          type=\"button\"\n          (click)=\"getPredefinedCommand()\"\n          [title]=\"'Display a list of predefined commands' | translate\"\n        >\n          {{ 'Predefined commands' | translate }}\n        </button>\n\n        <div class=\"m-l-auto\">\n          <device-status [mo]=\"device$ | async\"></device-status>\n        </div>\n      </div>\n      <textarea\n        [attr.aria-label]=\"'Commands' | translate\"\n        class=\"form-control inner-scroll flex-grow bg-level-2 text-monospace\"\n        [(ngModel)]=\"command.text\"\n        (ngModelChange)=\"$event || resetSupportedDeliveryTypes()\"\n        placeholder=\"{{ 'Add commands or use predefined commands above.' | translate }}\"\n      ></textarea>\n    </div>\n\n    <div class=\"card-footer large-padding separator\">\n      <ng-container *ngFor=\"let deliveryType of deliveryTypes\">\n        <button\n          class=\"btn btn-primary\"\n          type=\"button\"\n          *ngIf=\"deliveryType.isSupportedByCommand\"\n          [disabled]=\"!command?.text || (sendingCommand$ | async)\"\n          (click)=\"execute(deliveryType.name)\"\n        >\n          <span\n            [title]=\"\n              deliveryType.default\n                ? ('Execute' | translate)\n                : (executeViaLabel | translate: { deliveryType: deliveryType.name })\n            \"\n          >\n            {{\n              deliveryType.default\n                ? ('Execute' | translate)\n                : (executeViaLabel | translate: { deliveryType: deliveryType.name })\n            }}\n          </span>\n        </button>\n      </ng-container>\n    </div>\n  </div>\n  <div class=\"inner-scroll bg-level-1\">\n    <div class=\"card-header large-padding separator sticky-top\">\n      <div class=\"card-title\">\n        {{ 'Operations' | translate }}\n      </div>\n    </div>\n    <div class=\"card-block large-padding\">\n      <c8y-operations-timeline\n        [operations]=\"operations\"\n        [sourceId]=\"device.id\"\n        [filterPipe]=\"filterPipe\"\n        [bodyTemplate]=\"timelineItemBody\"\n        [footerTemplates]=\"[timelineItemFooter]\"\n        [propertiesToHide]=\"['c8y_Command']\"\n      ></c8y-operations-timeline>\n      <ng-template #timelineItemBody let-operation>\n        <small>{{ operation.c8y_Command?.text || operation.description }}</small>\n      </ng-template>\n      <ng-template #timelineItemFooter let-operation>\n        <div *ngIf=\"operation.c8y_Command?.text\">\n          <div class=\"legend form-block\" translate>Command</div>\n          <pre class=\"p-8 text-pre-normal\">\n              <code>{{operation.c8y_Command.text}}</code>\n          </pre>\n        </div>\n        <div *ngIf=\"operation.c8y_Command?.result\">\n          <div class=\"legend form-block\" translate>Response</div>\n          <pre class=\"p-8 text-pre-normal\">\n              <code>{{operation.c8y_Command.result}}</code>\n          </pre>\n        </div>\n      </ng-template>\n    </div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DeviceShellService }, { type: i2.OperationRealtimeService }, { type: i2.ManagedObjectRealtimeService }, { type: i3.OperationService }, { type: i4.ActivatedRoute }, { type: i5.BsModalService }, { type: i2.AlertService }]; } });
//# sourceMappingURL=data:application/json;base64,