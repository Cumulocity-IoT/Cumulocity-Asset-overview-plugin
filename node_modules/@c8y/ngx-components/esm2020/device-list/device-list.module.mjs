import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { CoreModule, CommonModule, hookNavigator } from '@c8y/ngx-components';
import { DeviceGridModule } from '@c8y/ngx-components/device-grid';
import { DeviceListNavigationFactory } from './device-list-navigation.factory';
import { DeviceListComponent } from './device-list.component';
import { AddSmartGroupComponent } from './add-smart-group.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
const routes = [
    {
        path: 'device',
        component: DeviceListComponent
    }
];
export class DeviceListModule {
}
DeviceListModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: DeviceListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DeviceListModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.0.6", ngImport: i0, type: DeviceListModule, declarations: [DeviceListComponent, AddSmartGroupComponent], imports: [CoreModule, CommonModule, DeviceGridModule, i1.RouterModule] });
DeviceListModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: DeviceListModule, providers: [hookNavigator(DeviceListNavigationFactory)], imports: [CoreModule, CommonModule, DeviceGridModule, RouterModule.forChild(routes)] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: DeviceListModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CoreModule, CommonModule, DeviceGridModule, RouterModule.forChild(routes)],
                    declarations: [DeviceListComponent, AddSmartGroupComponent],
                    entryComponents: [DeviceListComponent],
                    exports: [],
                    providers: [hookNavigator(DeviceListNavigationFactory)]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWxpc3QubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vZGV2aWNlLWxpc3QvZGV2aWNlLWxpc3QubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFTLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzlFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRW5FLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDOzs7QUFFckUsTUFBTSxNQUFNLEdBQVk7SUFDdEI7UUFDRSxJQUFJLEVBQUUsUUFBUTtRQUNkLFNBQVMsRUFBRSxtQkFBbUI7S0FDL0I7Q0FDRixDQUFDO0FBU0YsTUFBTSxPQUFPLGdCQUFnQjs7NkdBQWhCLGdCQUFnQjs4R0FBaEIsZ0JBQWdCLGlCQUxaLG1CQUFtQixFQUFFLHNCQUFzQixhQURoRCxVQUFVLEVBQUUsWUFBWSxFQUFFLGdCQUFnQjs4R0FNekMsZ0JBQWdCLGFBRmhCLENBQUMsYUFBYSxDQUFDLDJCQUEyQixDQUFDLENBQUMsWUFKN0MsVUFBVSxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQzsyRkFNeEUsZ0JBQWdCO2tCQVA1QixRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRSxDQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDcEYsWUFBWSxFQUFFLENBQUMsbUJBQW1CLEVBQUUsc0JBQXNCLENBQUM7b0JBQzNELGVBQWUsRUFBRSxDQUFDLG1CQUFtQixDQUFDO29CQUN0QyxPQUFPLEVBQUUsRUFBRTtvQkFDWCxTQUFTLEVBQUUsQ0FBQyxhQUFhLENBQUMsMkJBQTJCLENBQUMsQ0FBQztpQkFDeEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGUsIFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBDb3JlTW9kdWxlLCBDb21tb25Nb2R1bGUsIGhvb2tOYXZpZ2F0b3IgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzJztcbmltcG9ydCB7IERldmljZUdyaWRNb2R1bGUgfSBmcm9tICdAYzh5L25neC1jb21wb25lbnRzL2RldmljZS1ncmlkJztcblxuaW1wb3J0IHsgRGV2aWNlTGlzdE5hdmlnYXRpb25GYWN0b3J5IH0gZnJvbSAnLi9kZXZpY2UtbGlzdC1uYXZpZ2F0aW9uLmZhY3RvcnknO1xuaW1wb3J0IHsgRGV2aWNlTGlzdENvbXBvbmVudCB9IGZyb20gJy4vZGV2aWNlLWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7IEFkZFNtYXJ0R3JvdXBDb21wb25lbnQgfSBmcm9tICcuL2FkZC1zbWFydC1ncm91cC5jb21wb25lbnQnO1xuXG5jb25zdCByb3V0ZXM6IFJvdXRlW10gPSBbXG4gIHtcbiAgICBwYXRoOiAnZGV2aWNlJyxcbiAgICBjb21wb25lbnQ6IERldmljZUxpc3RDb21wb25lbnRcbiAgfVxuXTtcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvcmVNb2R1bGUsIENvbW1vbk1vZHVsZSwgRGV2aWNlR3JpZE1vZHVsZSwgUm91dGVyTW9kdWxlLmZvckNoaWxkKHJvdXRlcyldLFxuICBkZWNsYXJhdGlvbnM6IFtEZXZpY2VMaXN0Q29tcG9uZW50LCBBZGRTbWFydEdyb3VwQ29tcG9uZW50XSxcbiAgZW50cnlDb21wb25lbnRzOiBbRGV2aWNlTGlzdENvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtdLFxuICBwcm92aWRlcnM6IFtob29rTmF2aWdhdG9yKERldmljZUxpc3ROYXZpZ2F0aW9uRmFjdG9yeSldXG59KVxuZXhwb3J0IGNsYXNzIERldmljZUxpc3RNb2R1bGUge31cbiJdfQ==