import { Injectable } from '@angular/core';
import { QueriesUtil } from '@c8y/client';
import { SearchFilters } from '@c8y/ngx-components';
import { AssetNodeService } from '@c8y/ngx-components/assets-navigator';
import { DeviceGridService } from '@c8y/ngx-components/device-grid';
import { BehaviorSubject } from 'rxjs';
import { AlarmsDeviceGridColumn, ImeiDeviceGridColumn, ModelDeviceGridColumn, NameDeviceGridColumn, RegistrationDateDeviceGridColumn, SerialNumberDeviceGridColumn, SystemIdDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/ngx-components/device-grid";
import * as i2 from "@c8y/ngx-components/assets-navigator";
export class AssetSearchService {
    constructor(deviceGridService, assetNodeService) {
        this.deviceGridService = deviceGridService;
        this.assetNodeService = assetNodeService;
        this.GRID_CONFIG_STORAGE_KEY = 'search-grid-config';
        this.DEFAULT_PAGE_SIZE = 50;
        this.getGlobalSearchData = this.getSearchData.bind(this);
        this.appliedFilters$ = new BehaviorSubject({
            allFilters: true,
            onlyDevices: true,
            onlyGroupsAndAssets: true
        });
        this.queriesUtil = new QueriesUtil();
    }
    /**
     * Resets the status of applied filters, used during the search.
     * Applies only to filters: 'All', 'Show only devices', 'Show only groups and assets'.
     */
    resetAppliedFilters() {
        this.appliedFilters$.next({
            allFilters: true,
            onlyDevices: true,
            onlyGroupsAndAssets: true
        });
    }
    buildCombinedRootQueryFilter(columns, pagination) {
        const rootQuery = {
            __filter: {
                __and: { __not: { __has: `c8y_IsBinary` } }
            }
        };
        const { onlyDevices, onlyGroupsAndAssets } = this.appliedFilters$.value;
        const searchQuery = this.buildSearchQuery({ onlyDevices, onlyGroupsAndAssets });
        const userQuery = this.deviceGridService.getQueryObj(columns, pagination);
        const queryPart = this.queriesUtil.addOrderbys(rootQuery, userQuery.__orderby, 'append');
        const fullQuery = this.queriesUtil.addAndFilter(queryPart, userQuery.__filter);
        const queryWithSearch = this.queriesUtil.addAndFilter(fullQuery, searchQuery);
        return this.queriesUtil.buildQuery(queryWithSearch);
    }
    async getData(columns, pagination, text) {
        const query = this.buildCombinedRootQueryFilter(columns, pagination);
        return this.assetNodeService.getAllInventories({ ...pagination, query, text });
    }
    getDefaultColumns() {
        const defaultColumns = [
            new NameDeviceGridColumn({ sortOrder: 'asc' }),
            new ModelDeviceGridColumn(),
            new SerialNumberDeviceGridColumn({ visible: false }),
            new RegistrationDateDeviceGridColumn({ visible: false }),
            new SystemIdDeviceGridColumn({ visible: false }),
            new ImeiDeviceGridColumn({ visible: false }),
            new AlarmsDeviceGridColumn()
        ];
        return defaultColumns;
    }
    getDefaultActionControls() {
        return [];
    }
    getDefaultBulkActionControls() {
        return [];
    }
    getDefaultPagination() {
        const { pagination } = this.deviceGridService.getConfig(this.GRID_CONFIG_STORAGE_KEY);
        return {
            pageSize: pagination.pageSize,
            currentPage: 1
        };
    }
    buildSearchQuery(model) {
        const filter = {};
        const ors = [];
        if (model.types?.length) {
            ors.push({ type: { __in: model.types } });
        }
        if (model.onlyDevices) {
            ors.push({ __has: 'c8y_IsDevice' });
        }
        if (model.onlyGroupsAndAssets) {
            ors.push({ __has: 'c8y_IsDynamicGroup' });
            ors.push({ __has: 'c8y_IsDeviceGroup' });
        }
        if (ors.length) {
            filter.__or = ors;
        }
        return filter;
    }
    async getSearchData(text, pagination = { currentPage: 1, pageSize: this.DEFAULT_PAGE_SIZE }) {
        const { onlyDevices, onlyGroupsAndAssets } = this.appliedFilters$.value;
        const query = this.buildSearchQuery({ onlyDevices, onlyGroupsAndAssets });
        const queryString = this.queriesUtil.buildQuery(query);
        return this.assetNodeService.getAllInventories({ ...pagination, query: queryString, text });
    }
}
AssetSearchService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: AssetSearchService, deps: [{ token: i1.DeviceGridService }, { token: i2.AssetNodeService }], target: i0.ɵɵFactoryTarget.Injectable });
AssetSearchService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: AssetSearchService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: AssetSearchService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.DeviceGridService }, { type: i2.AssetNodeService }]; } });
//# sourceMappingURL=data:application/json;base64,