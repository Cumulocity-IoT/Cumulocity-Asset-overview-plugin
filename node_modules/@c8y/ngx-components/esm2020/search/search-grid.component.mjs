import { Component, EventEmitter, Inject, Input, Optional, Output, ViewChild } from '@angular/core';
import { SmartGroupsService } from '@c8y/client';
import { DataGridComponent, DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER, DATA_GRID_CONFIGURATION_STRATEGY, FilteringActionType, gettext, SearchFilters, UserPreferencesConfigurationStrategy } from '@c8y/ngx-components';
import { AlarmsDeviceGridColumn, ImeiDeviceGridColumn, ModelDeviceGridColumn, NameDeviceGridColumn, RegistrationDateDeviceGridColumn, SerialNumberDeviceGridColumn, SystemIdDeviceGridColumn } from '@c8y/ngx-components/device-grid';
import { DeleteAssetsModalComponent, SubAssetsService } from '@c8y/ngx-components/sub-assets';
import { BsModalService } from 'ngx-bootstrap/modal';
import { AssetSearchService } from './search.service';
import { AssetTypeSearchGridColumn } from './columns/asset-type-search-grid-column';
import { SEARCH_CONFIG } from './search-config.model';
import * as i0 from "@angular/core";
import * as i1 from "./search.service";
import * as i2 from "ngx-bootstrap/modal";
import * as i3 from "@c8y/client";
import * as i4 from "@c8y/ngx-components/sub-assets";
import * as i5 from "@c8y/ngx-components";
import * as i6 from "@angular/common";
export class SearchGridComponent {
    constructor(assetSearchService, bsModalService, smartGroupsService, subAssetsGridService, moduleConfig) {
        this.assetSearchService = assetSearchService;
        this.bsModalService = bsModalService;
        this.smartGroupsService = smartGroupsService;
        this.subAssetsGridService = subAssetsGridService;
        this.moduleConfig = moduleConfig;
        this.title = '';
        this.loadingItemsLabel = gettext('Loading results…');
        this.selectable = false;
        this.onColumnsChange = new EventEmitter();
        this.searchText = '';
        this.pagination = this.assetSearchService.getDefaultPagination();
        this.bulkActionControls = this.assetSearchService.getDefaultBulkActionControls();
        this.refresh = new EventEmitter();
        this.sizeCount = 0;
        this.showAdvancedFilters = moduleConfig?.showAdvancedFilters ?? false;
        this.customPlaceholder = moduleConfig?.placeholder ?? undefined;
    }
    set _columns(value) {
        if (value) {
            this.columns = value;
        }
        else {
            this.columns = this.subAssetsGridService.getUserConfiguredColumns(this.assetSearchService.getDefaultColumns(), this.assetSearchService.GRID_CONFIG_STORAGE_KEY);
        }
    }
    set _pagination(value) {
        if (value) {
            this.pagination = value;
        }
    }
    set _actionControls(value) {
        if (value) {
            this.actionControls = value;
        }
        else {
            this.actionControls = this.assetSearchService.getDefaultActionControls();
        }
    }
    set _bulkActionControls(value) {
        if (value) {
            this.bulkActionControls = value;
        }
        else {
            this.bulkActionControls = this.assetSearchService.getDefaultBulkActionControls();
        }
    }
    getGridConfigContext() {
        return { key: this.columnsConfigKey || this.assetSearchService.GRID_CONFIG_STORAGE_KEY };
    }
    ngOnInit() {
        if (!this.filteringName) {
            this.columns = this.subAssetsGridService.getUserConfiguredColumns([
                new AssetTypeSearchGridColumn(this.showAdvancedFilters, { sortOrder: 'desc' }, this.assetSearchService, this.customPlaceholder),
                ...this.assetSearchService.getDefaultColumns()
            ], this.assetSearchService.GRID_CONFIG_STORAGE_KEY);
        }
        else {
            this.columns = [
                new AssetTypeSearchGridColumn(this.showAdvancedFilters, { sortOrder: 'desc' }, this.assetSearchService),
                new NameDeviceGridColumn({
                    sortOrder: 'asc',
                    filter: { externalFilterQuery: { names: [this.filteringName] } }
                }),
                new ModelDeviceGridColumn(),
                new SerialNumberDeviceGridColumn({ visible: false }),
                new RegistrationDateDeviceGridColumn({ visible: false }),
                new SystemIdDeviceGridColumn({ visible: false }),
                new ImeiDeviceGridColumn({ visible: false }),
                new AlarmsDeviceGridColumn()
            ];
        }
        this.serverSideDataCallback = this.onDataSourceModifier.bind(this);
        this.setActionControls();
    }
    ngAfterViewInit() {
        this.setInitialFilterForTypeColumn();
    }
    trackByName(_index, column) {
        return column.name;
    }
    async onDataSourceModifier(dataSourceModifier) {
        const response = await this.assetSearchService.getData(dataSourceModifier.columns, dataSourceModifier.pagination, dataSourceModifier.searchText);
        const { res, data, paging } = response;
        if (paging.currentPage === 1) {
            this.sizeCount = 0;
        }
        this.sizeCount += data.length;
        this.onColumnsChange.emit(dataSourceModifier.columns);
        return {
            res,
            data,
            paging,
            filteredSize: this.sizeCount,
            size: undefined
        };
    }
    setActionControls() {
        const actionControls = [];
        const deleteAction = {
            type: "DELETE" /* BuiltInActionType.Delete */,
            callback: (asset) => this.onDeleteAsset(asset, this.parentGroup)
        };
        actionControls.push(deleteAction);
        if (!this.actionControls) {
            this.actionControls = actionControls;
        }
    }
    updateFiltering(columnNames, action) {
        const { type } = action;
        if (type === FilteringActionType.ResetFilter) {
            this.dataGrid.clearFilters();
        }
        else {
            /**
             * TODO: find better solution. After new changes from DM team, we're running into race condition where
             * this.dataGrid.updateFiltering is executed before this.configurationStrategy.getConfig$() value is emitted.
             * Columns setter sets columns after this.dataGrid.updateFiltering executes its logic. Value of this.columns in
             * dataGrid.updateFiltering is just not yet set.
             */
            setTimeout(() => {
                this.dataGrid.updateFiltering(columnNames, action, false);
            }, 500);
        }
    }
    onColumnFilterReset(column) {
        if (column.name === 'type') {
            this.assetSearchService.resetAppliedFilters();
        }
    }
    onDeleteAsset(asset, parentRef) {
        const initialState = {
            showWithDeviceUserCheckbox: this.subAssetsGridService.shouldShowWithDeviceUserCheckbox(asset),
            asset,
            showWithCascadeCheckbox: !this.smartGroupsService.isSmartGroup(asset) &&
                !this.smartGroupsService.isSmartGroupV2(asset)
        };
        const modalRef = this.bsModalService.show(DeleteAssetsModalComponent, { initialState });
        modalRef.content.closeSubject.subscribe(async (result) => {
            if (result) {
                await this.subAssetsGridService.deleteAsset(asset, parentRef, result);
                this.refresh.emit();
            }
        });
    }
    setInitialFilterForTypeColumn() {
        const checkboxes = this.assetSearchService.appliedFilters$.value;
        // Set filter only when all checkboxes are not selected
        if (checkboxes[SearchFilters.ONLY_DEVICES] !== checkboxes[SearchFilters.ONLY_GROUPS_AND_ASSETS]) {
            const externalFilterQuery = {
                [SearchFilters.ONLY_DEVICES]: checkboxes[SearchFilters.ONLY_DEVICES],
                [SearchFilters.ONLY_GROUPS_AND_ASSETS]: checkboxes[SearchFilters.ONLY_GROUPS_AND_ASSETS]
            };
            this.updateFiltering(['type'], {
                type: FilteringActionType.ApplyFilter,
                payload: {
                    filteringModifier: {
                        externalFilterQuery
                    }
                }
            });
        }
    }
}
SearchGridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: SearchGridComponent, deps: [{ token: i1.AssetSearchService }, { token: i2.BsModalService }, { token: i3.SmartGroupsService }, { token: i4.SubAssetsService }, { token: SEARCH_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Component });
SearchGridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.6", type: SearchGridComponent, selector: "c8y-search-grid", inputs: { parentGroup: ["parent-group", "parentGroup"], title: "title", loadingItemsLabel: "loadingItemsLabel", _columns: ["columns", "_columns"], _pagination: ["pagination", "_pagination"], _actionControls: ["actionControls", "_actionControls"], selectable: "selectable", _bulkActionControls: ["bulkActionControls", "_bulkActionControls"], searchText: "searchText", filteringName: "filteringName", columnsConfigKey: "columnsConfigKey" }, outputs: { onColumnsChange: "onColumnsChange" }, providers: [
        {
            provide: DATA_GRID_CONFIGURATION_STRATEGY,
            useClass: UserPreferencesConfigurationStrategy
        },
        {
            provide: DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER,
            useExisting: SearchGridComponent
        }
    ], viewQueries: [{ propertyName: "dataGrid", first: true, predicate: DataGridComponent, descendants: true, static: true }], ngImport: i0, template: "<div class=\"card--grid--fullpage border-top border-bottom\">\n  <c8y-data-grid\n    [title]=\"'Search results' | translate\"\n    [loadingItemsLabel]=\"loadingItemsLabel\"\n    [columns]=\"columns\"\n    [pagination]=\"pagination\"\n    [actionControls]=\"actionControls\"\n    [selectable]=\"selectable\"\n    [bulkActionControls]=\"bulkActionControls\"\n    [serverSideDataCallback]=\"serverSideDataCallback\"\n    [infiniteScroll]=\"'auto'\"\n    [showSearch]=\"true\"\n    [searchText]=\"searchText\"\n    [refresh]=\"refresh\"\n    (onColumnFilterReset)=\"onColumnFilterReset($event)\"\n  >\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n      <c8y-column [name]=\"column.name\"></c8y-column>\n    </ng-container>\n\n    <c8y-ui-empty-state\n      [icon]=\"'search'\"\n      [title]=\"'No results to display.' | translate\"\n      [subtitle]=\"'Refine your search terms or check your spelling.' | translate\"\n      [horizontal]=\"true\"\n    ></c8y-ui-empty-state>\n  </c8y-data-grid>\n</div>", dependencies: [{ kind: "component", type: i5.EmptyStateComponent, selector: "c8y-ui-empty-state", inputs: ["icon", "title", "subtitle", "horizontal"] }, { kind: "directive", type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.ColumnDirective, selector: "c8y-column", inputs: ["name"] }, { kind: "component", type: i5.DataGridComponent, selector: "c8y-data-grid", inputs: ["title", "loadMoreItemsLabel", "loadingItemsLabel", "showSearch", "refresh", "columns", "rows", "pagination", "infiniteScroll", "serverSideDataCallback", "selectable", "selectionPrimaryKey", "displayOptions", "actionControls", "bulkActionControls", "headerActionControls", "searchText", "configureColumnsEnabled", "showCounterWarning"], outputs: ["rowMouseOver", "rowMouseLeave", "rowClick", "onConfigChange", "onBeforeFilter", "onBeforeSearch", "onFilter", "itemsSelect", "onReload", "onAddCustomColumn", "onRemoveCustomColumn", "onColumnFilterReset", "onSort", "onPageSizeChange", "onColumnReordered", "onColumnVisibilityChange"] }, { kind: "pipe", type: i5.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: SearchGridComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-search-grid', providers: [
                        {
                            provide: DATA_GRID_CONFIGURATION_STRATEGY,
                            useClass: UserPreferencesConfigurationStrategy
                        },
                        {
                            provide: DATA_GRID_CONFIGURATION_CONTEXT_PROVIDER,
                            useExisting: SearchGridComponent
                        }
                    ], template: "<div class=\"card--grid--fullpage border-top border-bottom\">\n  <c8y-data-grid\n    [title]=\"'Search results' | translate\"\n    [loadingItemsLabel]=\"loadingItemsLabel\"\n    [columns]=\"columns\"\n    [pagination]=\"pagination\"\n    [actionControls]=\"actionControls\"\n    [selectable]=\"selectable\"\n    [bulkActionControls]=\"bulkActionControls\"\n    [serverSideDataCallback]=\"serverSideDataCallback\"\n    [infiniteScroll]=\"'auto'\"\n    [showSearch]=\"true\"\n    [searchText]=\"searchText\"\n    [refresh]=\"refresh\"\n    (onColumnFilterReset)=\"onColumnFilterReset($event)\"\n  >\n    <ng-container *ngFor=\"let column of columns; trackBy: trackByName\">\n      <c8y-column [name]=\"column.name\"></c8y-column>\n    </ng-container>\n\n    <c8y-ui-empty-state\n      [icon]=\"'search'\"\n      [title]=\"'No results to display.' | translate\"\n      [subtitle]=\"'Refine your search terms or check your spelling.' | translate\"\n      [horizontal]=\"true\"\n    ></c8y-ui-empty-state>\n  </c8y-data-grid>\n</div>" }]
        }], ctorParameters: function () { return [{ type: i1.AssetSearchService }, { type: i2.BsModalService }, { type: i3.SmartGroupsService }, { type: i4.SubAssetsService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [SEARCH_CONFIG]
                }] }]; }, propDecorators: { parentGroup: [{
                type: Input,
                args: ['parent-group']
            }], title: [{
                type: Input
            }], loadingItemsLabel: [{
                type: Input
            }], _columns: [{
                type: Input,
                args: ['columns']
            }], _pagination: [{
                type: Input,
                args: ['pagination']
            }], _actionControls: [{
                type: Input,
                args: ['actionControls']
            }], selectable: [{
                type: Input
            }], _bulkActionControls: [{
                type: Input,
                args: ['bulkActionControls']
            }], onColumnsChange: [{
                type: Output
            }], searchText: [{
                type: Input
            }], filteringName: [{
                type: Input
            }], columnsConfigKey: [{
                type: Input
            }], dataGrid: [{
                type: ViewChild,
                args: [DataGridComponent, { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,