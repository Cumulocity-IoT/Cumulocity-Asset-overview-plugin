import { TemplateType } from '../sso-configuration.model';
import { at, get, head, isUndefined, map, reject } from 'lodash-es';
import { GrantType, TenantLoginOptionType, UserManagementSource } from '@c8y/client';
import { RequestConfiguration } from '../template-parts/request-configuration.model';
import { Injectable } from '@angular/core';
import { ExternalToken } from '../template-parts/external-token-config.model';
import * as i0 from "@angular/core";
export class KeyCloakConfigurationMapper {
    constructor() {
        this.urlPattern = /^(.+)\/auth\/realms\/((.+?))$/;
    }
    mapFrom(templateModel) {
        const ssoConfiguration = {
            template: TemplateType.KEYCLOAK,
            buttonName: templateModel.buttonName,
            userIdConfig: templateModel.userIdConfig,
            userManagementSource: UserManagementSource.REMOTE,
            type: TenantLoginOptionType.OAUTH2,
            onNewUser: templateModel.onNewUser,
            issuer: `${templateModel.keyCloakAddress}/auth/realms/${templateModel.realmName}`,
            redirectToPlatform: templateModel.redirectToPlatform,
            providerName: 'keycloak',
            audience: templateModel.audience,
            clientId: templateModel.clientId,
            logoutRequest: templateModel.logoutRequest.toRequest(),
            visibleOnLoginPage: templateModel.visibleOnLoginPage,
            signatureVerificationConfig: {
                jwks: {
                    jwksUri: `${templateModel.keyCloakAddress}/auth/realms/${templateModel.realmName}/protocol/openid-connect/certs`
                }
            },
            tokenRequest: {
                headers: {},
                method: 'POST',
                requestParams: {},
                operation: 'EXECUTE',
                url: `${templateModel.keyCloakAddress}/auth/realms/${templateModel.realmName}/protocol/openid-connect/token`,
                body: 'grant_type=authorization_code&code=${code}&redirect_uri=${redirectUri}&client_id=${clientId}&client_secret=${client secret}'
            },
            authorizationRequest: {
                headers: {},
                method: 'GET',
                requestParams: {
                    scope: templateModel.scopeId,
                    client_id: '${clientId}',
                    redirect_uri: '${redirectUri}',
                    response_type: 'code'
                },
                operation: 'REDIRECT',
                url: `${templateModel.keyCloakAddress}/auth/realms/${templateModel.realmName}/protocol/openid-connect/auth`,
                body: ''
            },
            refreshRequest: {
                headers: {},
                method: 'POST',
                requestParams: {
                    client_id: '${clientId}',
                    redirect_uri: '${redirectUri}',
                    response_type: 'refresh'
                },
                operation: 'EXECUTE',
                url: `${templateModel.keyCloakAddress}/auth/realms/${templateModel.realmName}/protocol/openid-connect/token`,
                body: 'grant_type=refresh_token&refresh_token=${refreshToken}&client_id=${clientId}&client_secret=' +
                    templateModel.clientSecret
            },
            grantType: GrantType.AUTHORIZATION_CODE,
            accessTokenToUserDataMappings: templateModel.accessTokenToUserDataMappings,
            externalTokenConfig: templateModel.externalTokenConfig.toExternalTokenConfig()
        };
        return ssoConfiguration;
    }
    mapTo(ssoConfiguration) {
        return {
            keyCloakAddress: this.getKeyCloakAddressFromUrl(ssoConfiguration.issuer),
            realmName: this.getRealmName(ssoConfiguration.issuer),
            clientId: ssoConfiguration.clientId,
            clientSecret: this.getClientSecret(ssoConfiguration),
            scopeId: this.getScopeId(ssoConfiguration),
            buttonName: ssoConfiguration.buttonName,
            userIdConfig: ssoConfiguration.userIdConfig,
            onNewUser: ssoConfiguration.onNewUser,
            redirectToPlatform: ssoConfiguration.redirectToPlatform,
            audience: ssoConfiguration.audience,
            logoutRequest: new RequestConfiguration(ssoConfiguration.logoutRequest),
            visibleOnLoginPage: ssoConfiguration.visibleOnLoginPage,
            accessTokenToUserDataMappings: ssoConfiguration.accessTokenToUserDataMappings,
            externalTokenConfig: new ExternalToken(ssoConfiguration.externalTokenConfig)
        };
    }
    getKeyCloakAddressFromUrl(url) {
        const [, keyCloakAddress] = (url || '').match(this.urlPattern) || [];
        return keyCloakAddress;
    }
    getRealmName(url) {
        const [, , realmName] = (url || '').match(this.urlPattern) || [];
        return realmName;
    }
    getClientSecret(ssoConfiguration) {
        const bodies = at(ssoConfiguration, ['tokenRequest.body', 'refreshRequest.body']);
        const clientSecrets = map(bodies, body => this.getClientSecretFromBody(body));
        const clientSecret = this.getFirstDefined(clientSecrets);
        return clientSecret ? decodeURIComponent(clientSecret) : '';
    }
    getClientSecretFromBody(body) {
        const [, clientSecret] = (body || '').match(/client_secret=([^&]+)/) || [];
        return clientSecret;
    }
    getFirstDefined(values) {
        return head(reject(values, isUndefined));
    }
    getScopeId(ssoConfiguration) {
        return get(ssoConfiguration, 'authorizationRequest.requestParams.scope', '');
    }
}
KeyCloakConfigurationMapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: KeyCloakConfigurationMapper, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
KeyCloakConfigurationMapper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: KeyCloakConfigurationMapper, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: KeyCloakConfigurationMapper, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,