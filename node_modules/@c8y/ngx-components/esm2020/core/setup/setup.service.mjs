import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { OptionsService } from '../common/options.service';
import { Permissions } from '../common/permissions.service';
import { AppStateService } from '../common/ui-state.service';
import { Steppers } from '../stepper/stepper.model';
import { StepperService } from '../stepper/stepper.service';
import { NEEDED_ROLE_FOR_SETUP, SETUP_FINISHED_STEP_ID } from './setup.model';
import * as i0 from "@angular/core";
import * as i1 from "../stepper/stepper.service";
import * as i2 from "../common/permissions.service";
import * as i3 from "../common/options.service";
import * as i4 from "../common/ui-state.service";
export class SetupService {
    /**
     * @ignore only DI and initialization
     */
    constructor(stepperService, permissions, options, ui) {
        this.stepperService = stepperService;
        this.permissions = permissions;
        this.options = options;
        this.ui = ui;
        this.isSetupNeeded$ = this.ui.currentApplication.pipe(map(app => this.ui.isOwnerOfApplication(app)), switchMap(isOwner => {
            if (!isOwner) {
                return of([]);
            }
            return this.stepperService.getById$(Steppers.SETUP);
        }), map((steps) => this.getNotCompletedSetupSteps(steps)), map(notCompletedSetupSteps => this.options.forceSetup ||
            (this.options.isSetup && this.needsSetup(notCompletedSetupSteps))));
    }
    needsSetup(notCompletedSetupSteps) {
        notCompletedSetupSteps = this.excludeSetupFinishStep(notCompletedSetupSteps);
        if (this.hasPermission()) {
            return notCompletedSetupSteps.length > 0;
        }
        // Show setup screen as there are required steps but the user
        // has no permission. The Setup screen will show an error to
        // the user.
        return this.hasRequiredSteps(notCompletedSetupSteps);
    }
    excludeSetupFinishStep(notCompletedSetupSteps) {
        return notCompletedSetupSteps.filter(({ setupId }) => setupId !== SETUP_FINISHED_STEP_ID);
    }
    hasRequiredSteps(notCompletedSetupSteps) {
        return notCompletedSetupSteps.some(step => step.required);
    }
    hasPermission() {
        return this.permissions.hasRole(NEEDED_ROLE_FOR_SETUP);
    }
    getNotCompletedSetupSteps(steps) {
        if (!this.ui.currentApplication.value) {
            return steps;
        }
        return steps.filter(step => step.setupId &&
            !(this.ui.currentApplication.value.config?.setup || []).includes(step.setupId));
    }
}
SetupService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: SetupService, deps: [{ token: i1.StepperService }, { token: i2.Permissions }, { token: i3.OptionsService }, { token: i4.AppStateService }], target: i0.ɵɵFactoryTarget.Injectable });
SetupService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: SetupService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: SetupService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.StepperService }, { type: i2.Permissions }, { type: i3.OptionsService }, { type: i4.AppStateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvc2V0dXAvc2V0dXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzVELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzVELE9BQU8sRUFBRSxxQkFBcUIsRUFBYSxzQkFBc0IsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7O0FBS3pGLE1BQU0sT0FBTyxZQUFZO0lBTXZCOztPQUVHO0lBQ0gsWUFDVSxjQUE4QixFQUM5QixXQUF3QixFQUN4QixPQUF1QixFQUN4QixFQUFtQjtRQUhsQixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFDeEIsT0FBRSxHQUFGLEVBQUUsQ0FBaUI7UUFFMUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FDbkQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUM3QyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbEIsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDWixPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNmO1lBQ0QsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFDLEVBQ0YsR0FBRyxDQUFDLENBQUMsS0FBa0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQ2xFLEdBQUcsQ0FDRCxzQkFBc0IsQ0FBQyxFQUFFLENBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVTtZQUN2QixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUNwRSxDQUNGLENBQUM7SUFDSixDQUFDO0lBRU8sVUFBVSxDQUFDLHNCQUFtQztRQUNwRCxzQkFBc0IsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUM3RSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsRUFBRTtZQUN4QixPQUFPLHNCQUFzQixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7U0FDMUM7UUFDRCw2REFBNkQ7UUFDN0QsNERBQTREO1FBQzVELFlBQVk7UUFDWixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFTyxzQkFBc0IsQ0FBQyxzQkFBbUM7UUFDaEUsT0FBTyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxPQUFPLEtBQUssc0JBQXNCLENBQUMsQ0FBQztJQUM1RixDQUFDO0lBRU8sZ0JBQWdCLENBQUMsc0JBQW1DO1FBQzFELE9BQU8sc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFTyxhQUFhO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU8seUJBQXlCLENBQUMsS0FBa0I7UUFDbEQsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFO1lBQ3JDLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQ2pCLElBQUksQ0FBQyxFQUFFLENBQ0wsSUFBSSxDQUFDLE9BQU87WUFDWixDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUNqRixDQUFDO0lBQ0osQ0FBQzs7eUdBaEVVLFlBQVk7NkdBQVosWUFBWSxjQUZYLE1BQU07MkZBRVAsWUFBWTtrQkFIeEIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBPcHRpb25zU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9vcHRpb25zLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGVybWlzc2lvbnMgfSBmcm9tICcuLi9jb21tb24vcGVybWlzc2lvbnMuc2VydmljZSc7XG5pbXBvcnQgeyBBcHBTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vdWktc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBTdGVwcGVycyB9IGZyb20gJy4uL3N0ZXBwZXIvc3RlcHBlci5tb2RlbCc7XG5pbXBvcnQgeyBTdGVwcGVyU2VydmljZSB9IGZyb20gJy4uL3N0ZXBwZXIvc3RlcHBlci5zZXJ2aWNlJztcbmltcG9ydCB7IE5FRURFRF9ST0xFX0ZPUl9TRVRVUCwgU2V0dXBTdGVwLCBTRVRVUF9GSU5JU0hFRF9TVEVQX0lEIH0gZnJvbSAnLi9zZXR1cC5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFNldHVwU2VydmljZSB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGFwcGxpY2F0aW9ucyBuZWVkcyB0byBzaG93IGEgc2V0dXAgd2l6YXJkLlxuICAgKi9cbiAgaXNTZXR1cE5lZWRlZCQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIEBpZ25vcmUgb25seSBESSBhbmQgaW5pdGlhbGl6YXRpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc3RlcHBlclNlcnZpY2U6IFN0ZXBwZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgcGVybWlzc2lvbnM6IFBlcm1pc3Npb25zLFxuICAgIHByaXZhdGUgb3B0aW9uczogT3B0aW9uc1NlcnZpY2UsXG4gICAgcHVibGljIHVpOiBBcHBTdGF0ZVNlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5pc1NldHVwTmVlZGVkJCA9IHRoaXMudWkuY3VycmVudEFwcGxpY2F0aW9uLnBpcGUoXG4gICAgICBtYXAoYXBwID0+IHRoaXMudWkuaXNPd25lck9mQXBwbGljYXRpb24oYXBwKSksXG4gICAgICBzd2l0Y2hNYXAoaXNPd25lciA9PiB7XG4gICAgICAgIGlmICghaXNPd25lcikge1xuICAgICAgICAgIHJldHVybiBvZihbXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3RlcHBlclNlcnZpY2UuZ2V0QnlJZCQoU3RlcHBlcnMuU0VUVVApO1xuICAgICAgfSksXG4gICAgICBtYXAoKHN0ZXBzOiBTZXR1cFN0ZXBbXSkgPT4gdGhpcy5nZXROb3RDb21wbGV0ZWRTZXR1cFN0ZXBzKHN0ZXBzKSksXG4gICAgICBtYXAoXG4gICAgICAgIG5vdENvbXBsZXRlZFNldHVwU3RlcHMgPT5cbiAgICAgICAgICB0aGlzLm9wdGlvbnMuZm9yY2VTZXR1cCB8fFxuICAgICAgICAgICh0aGlzLm9wdGlvbnMuaXNTZXR1cCAmJiB0aGlzLm5lZWRzU2V0dXAobm90Q29tcGxldGVkU2V0dXBTdGVwcykpXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgbmVlZHNTZXR1cChub3RDb21wbGV0ZWRTZXR1cFN0ZXBzOiBTZXR1cFN0ZXBbXSk6IGJvb2xlYW4ge1xuICAgIG5vdENvbXBsZXRlZFNldHVwU3RlcHMgPSB0aGlzLmV4Y2x1ZGVTZXR1cEZpbmlzaFN0ZXAobm90Q29tcGxldGVkU2V0dXBTdGVwcyk7XG4gICAgaWYgKHRoaXMuaGFzUGVybWlzc2lvbigpKSB7XG4gICAgICByZXR1cm4gbm90Q29tcGxldGVkU2V0dXBTdGVwcy5sZW5ndGggPiAwO1xuICAgIH1cbiAgICAvLyBTaG93IHNldHVwIHNjcmVlbiBhcyB0aGVyZSBhcmUgcmVxdWlyZWQgc3RlcHMgYnV0IHRoZSB1c2VyXG4gICAgLy8gaGFzIG5vIHBlcm1pc3Npb24uIFRoZSBTZXR1cCBzY3JlZW4gd2lsbCBzaG93IGFuIGVycm9yIHRvXG4gICAgLy8gdGhlIHVzZXIuXG4gICAgcmV0dXJuIHRoaXMuaGFzUmVxdWlyZWRTdGVwcyhub3RDb21wbGV0ZWRTZXR1cFN0ZXBzKTtcbiAgfVxuXG4gIHByaXZhdGUgZXhjbHVkZVNldHVwRmluaXNoU3RlcChub3RDb21wbGV0ZWRTZXR1cFN0ZXBzOiBTZXR1cFN0ZXBbXSkge1xuICAgIHJldHVybiBub3RDb21wbGV0ZWRTZXR1cFN0ZXBzLmZpbHRlcigoeyBzZXR1cElkIH0pID0+IHNldHVwSWQgIT09IFNFVFVQX0ZJTklTSEVEX1NURVBfSUQpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYXNSZXF1aXJlZFN0ZXBzKG5vdENvbXBsZXRlZFNldHVwU3RlcHM6IFNldHVwU3RlcFtdKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIG5vdENvbXBsZXRlZFNldHVwU3RlcHMuc29tZShzdGVwID0+IHN0ZXAucmVxdWlyZWQpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYXNQZXJtaXNzaW9uKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBlcm1pc3Npb25zLmhhc1JvbGUoTkVFREVEX1JPTEVfRk9SX1NFVFVQKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Tm90Q29tcGxldGVkU2V0dXBTdGVwcyhzdGVwczogU2V0dXBTdGVwW10pOiBTZXR1cFN0ZXBbXSB7XG4gICAgaWYgKCF0aGlzLnVpLmN1cnJlbnRBcHBsaWNhdGlvbi52YWx1ZSkge1xuICAgICAgcmV0dXJuIHN0ZXBzO1xuICAgIH1cbiAgICByZXR1cm4gc3RlcHMuZmlsdGVyKFxuICAgICAgc3RlcCA9PlxuICAgICAgICBzdGVwLnNldHVwSWQgJiZcbiAgICAgICAgISh0aGlzLnVpLmN1cnJlbnRBcHBsaWNhdGlvbi52YWx1ZS5jb25maWc/LnNldHVwIHx8IFtdKS5pbmNsdWRlcyhzdGVwLnNldHVwSWQpXG4gICAgKTtcbiAgfVxufVxuIl19