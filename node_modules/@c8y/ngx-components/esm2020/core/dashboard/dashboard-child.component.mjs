import { Component, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { DashboardChildActionComponent } from './dashboard-child-action.component';
import { DashboardChildChange } from './dashboard-child-change';
import { DashboardComponent } from './dashboard.component';
import * as i0 from "@angular/core";
import * as i1 from "./dashboard.component";
import * as i2 from "@angular/platform-browser";
import * as i3 from "../common/icon.directive";
import * as i4 from "@angular/common";
import * as i5 from "@angular/cdk/drag-drop";
import * as i6 from "ngx-bootstrap/dropdown";
import * as i7 from "ngx-bootstrap/tooltip";
import * as i8 from "../i18n/c8y-translate.pipe";
/**
 * A dashboard child allows to position elements
 * correctly on a grid. The user can then resize and
 * rearrange the elements, as long as they are not `frozen`.
 *
 * By setting `c8y-dashboard-child-actions` and
 * `c8y-dashboard-child-title` on the element you can add
 * custom actions or a custom title to the current child.
 *
 * By adding the correct branded classes, you can define
 * the look and feel of the child. By default it is displayed
 * as a card.
 *
 * Example:
 *
 * ```html
 *   <c8y-dashboard-child
 *     #cpWidget3
 *     [isFrozen]="isFrozen"
 *     [x]="0"
 *     [y]="3"
 *     [width]="4"
 *     [height]="4"
 *     [class]="'card-dashboard panel-content-transparent'"
 *   >
 *     <c8y-dashboard-child-title *ngIf="showTitle">
 *       <span>Transparent!</span>
 *     </c8y-dashboard-child-title>
 *     <c8y-dashboard-child-action>
 *       <a href="" (click)="showTitle = !showTitle; (false)">
 *         <i [c8yIcon]="'heading'"></i> Hide/show title
 *       </a>
 *     </c8y-dashboard-child-action>
 *     <c8y-dashboard-child-action>
 *       <a href="" (click)="cpWidget3.isFrozen = !cpWidget3.isFrozen; (false)">
 *         <i [c8yIcon]="cpWidget3.isFrozen ? 'lock' : 'unlock'"></i> Toggle freeze
 *       </a>
 *     </c8y-dashboard-child-action>
 *     x: {{ cpWidget3.x }}<br />
 *     y: {{ cpWidget3.y }}<br />
 *     width: {{ cpWidget3.width }}<br />
 *     height: {{ cpWidget3.height }}<br />
 *   </c8y-dashboard-child>
 * ```
 */
export class DashboardChildComponent {
    constructor(dashboard, sanitizer, element) {
        this.dashboard = dashboard;
        this.sanitizer = sanitizer;
        this.element = element;
        this.actions = [];
        this.isResize = false;
        this.isDragging = false;
        this.klasses = {};
        this._pxWidth = '100%';
        this._pxHeight = '100%';
        /**
         * The width of the component in grid-columns.
         */
        this.width = 1;
        /**
         * The height of the component in grid-rows.
         */
        this.height = 1;
        /**
         * The margin of the child in pixel.
         */
        this.margin = 12;
        /**
         * If a dashboard is frozen, all children cannot be moved
         * or resized.
         */
        this.isFrozen = false;
        /**
         * The child content is initialized, as soon it is scrolled into viewport
         */
        this.useIntersection = false;
        /**
         * An event fired if a child change is started (dragging or resizing)
         */
        this.changeStart = new EventEmitter();
        /**
         * An event fired if a child change is ended
         */
        this.changeEnd = new EventEmitter();
        /**
         * All classes added to this child
         */
        this.class = {};
        /**
         * An indicator if the child is intersected (that mean visible for the user)
         */
        this.intersected = false;
        /**
         * Tells if the last change was a dragging or resizing event;
         */
        this.lastChange = null;
    }
    set templateActions(actions) {
        this.addActions(actions, true);
    }
    /**
     * Updates the pixel width of the child (used for resizing)
     */
    set pxWidth(value) {
        this._pxWidth = `${value}px`;
    }
    /**
     * Updates the pixel height of the child (used for resizing)
     */
    set pxHeight(value) {
        this._pxHeight = `${value}px`;
    }
    /**
     * nasty workaround for that issue:
     * https://github.com/angular/angular/issues/9343
     */
    get inlineStyle() {
        return this.sanitizer.bypassSecurityTrustStyle(`
    grid-column-start: ${this.x + 1};
    grid-row-start: ${this.y + 1};
    grid-column-end: span ${this.width};
    grid-row-end: span ${this.height};
    display: block;
    margin: ${this.margin || 12}px;
    order: ${this.getOrder()};
    `);
    }
    ngOnChanges() {
        this.klasses = {
            card: true,
            'card-dashboard': true,
            disabled: this.isFrozen,
            'on-resize': this.isResize,
            ...this.class
        };
    }
    ngOnInit() {
        if (this.x === undefined || this.y === undefined) {
            setTimeout(() => this.setDynamicDimension());
        }
        if (this.useIntersection && 'IntersectionObserver' in window) {
            const intersectionObserver = new IntersectionObserver(event => (this.intersected = this.childInView(event[0], intersectionObserver)));
            intersectionObserver.observe(this.element.nativeElement);
        }
        else {
            this.intersected = true;
        }
    }
    ngAfterViewInit() {
        this.dashboard.children.push(this);
    }
    setDynamicDimension() {
        const ds = new DashboardChildChange(this);
        const { x, y } = ds.findFreeDimension();
        this.x = x;
        this.y = y;
        this.dashboard.emitChange(this);
    }
    resizeStarted($event) {
        this.isResize = true;
        this.dashboard.updateRectSize();
        this.dragSource = $event.source;
        const positioning = new DashboardChildChange(this);
        this.changeSubscription = positioning.resize$.subscribe();
        this.changeStart.emit(this);
        this.ngOnChanges();
    }
    dragStarted($event) {
        this.isDragging = true;
        this.dashboard.updateRectSize();
        this.dragSource = $event.source;
        const positioning = new DashboardChildChange(this);
        this.changeSubscription = positioning.drag$.subscribe();
        this.changeStart.emit(this);
    }
    reset($event) {
        this.lastChange = this.isResize ? 'resize' : 'drag';
        this.isResize = false;
        this.isDragging = false;
        this._pxWidth = '100%';
        this._pxHeight = '100%';
        this.ngOnChanges();
        if ($event) {
            $event.source.reset();
        }
        if (this.changeSubscription) {
            this.changeSubscription.unsubscribe();
            this.dashboard.emitChange(this);
            this.changeEnd.emit(this);
        }
    }
    ngOnDestroy() {
        if (this.changeSubscription) {
            this.changeSubscription.unsubscribe();
        }
        this.removeSelfFromDashboard();
    }
    addActions(actions, prepend = false) {
        if (prepend) {
            this.actions = [...actions, ...this.actions];
        }
        else {
            this.actions = [...this.actions, ...actions];
        }
    }
    removeSelfFromDashboard() {
        const i = this.dashboard.children.indexOf(this);
        if (i >= 0) {
            this.dashboard.children.splice(i, 1);
        }
    }
    getOrder() {
        return `${Math.round((this.y + (this.x + 1) / 100) * 100)}`;
    }
    childInView(event, observer) {
        if (event.isIntersecting) {
            observer.unobserve(event.target);
            return true;
        }
        return false;
    }
}
DashboardChildComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: DashboardChildComponent, deps: [{ token: i1.DashboardComponent }, { token: i2.DomSanitizer }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
DashboardChildComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.6", type: DashboardChildComponent, selector: "c8y-dashboard-child", inputs: { x: "x", y: "y", width: "width", height: "height", data: "data", margin: "margin", isFrozen: "isFrozen", useIntersection: "useIntersection", class: "class" }, outputs: { changeStart: "changeStart", changeEnd: "changeEnd" }, host: { properties: { "attr.style": "this.inlineStyle" }, classAttribute: "dashboard-grid-child" }, queries: [{ propertyName: "templateActions", predicate: DashboardChildActionComponent }], usesOnChanges: true, ngImport: i0, template: "<div cdkDropList>\n  <div *ngIf=\"isResize\" class=\"card-placeholder\"></div>\n  <div\n    [ngClass]=\"klasses\"\n    cdkDrag\n    [ngStyle]=\"{ width: _pxWidth, height: _pxHeight }\"\n    (cdkDragStarted)=\"dragStarted($event)\"\n    (cdkDragEnded)=\"reset($event)\"\n    [cdkDragDisabled]=\"isFrozen\"\n  >\n    <div\n      class=\"card-header-actions card-header-grid\"\n      [ngClass]=\"{ 'drag-handle': !isFrozen, draggableCursor: !isFrozen }\"\n      cdkDragHandle\n      [style.--dashboard-time-context]=\"\n        data?.config?.widgetInstanceGlobalTimeContext ? 'block' : 'none'\n      \"\n    >\n      <ng-content select=\"c8y-dashboard-child-title\"></ng-content>\n      <div class=\"header-actions d-flex a-i-center\" *ngIf=\"!isFrozen && actions.length > 0\">\n        <span class=\"m-l-auto\" style=\"display: var(--dashboard-time-context)\">\n          <button\n            class=\"btn-clean\"\n            tooltip=\"{{ 'This widget is in sync with the dashboard time range.' | translate }}\"\n            placement=\"top\"\n            container=\"body\"\n            [attr.aria-label]=\"'This widget is in sync with the dashboard time range.' | translate\"\n          >\n            <span class=\"c8y-icon-badge d-inline-flex\">\n              <i c8yIcon=\"clock\"></i>\n              <span class=\"badge badge-success\">\n                <i c8yIcon=\"link\" class=\"text-gray-white\"></i>\n              </span>\n            </span>\n          </button>\n        </span>\n        <div class=\"optionsBtn dropdown\" dropdown placement=\"bottom right\">\n          <button\n            title=\"{{ 'Settings' | translate }}\"\n            class=\"btnIcon c8y-dropdown\"\n            (click)=\"(false)\"\n            dropdownToggle\n            aria-haspopup=\"true\"\n          >\n            <i [c8yIcon]=\"'cog'\"></i>\n          </button>\n          <ul class=\"dropdown-menu dropdown-menu-right\" style=\"right: -1px\" *dropdownMenu>\n            <ng-container *ngFor=\"let action of actions\">\n              <ng-container *ngTemplateOutlet=\"action.template\"></ng-container>\n            </ng-container>\n          </ul>\n        </div>\n      </div>\n    </div>\n    <div class=\"card-inner-scroll\">\n      <ng-content></ng-content>\n    </div>\n    <div\n      *ngIf=\"!isFrozen && !isDragging\"\n      class=\"resize-handle hidden-xs\"\n      cdkDrag\n      [cdkDragDisabled]=\"isFrozen\"\n      (cdkDragStarted)=\"resizeStarted($event)\"\n      (cdkDragEnded)=\"reset($event)\"\n    ></div>\n    <div class=\"resize-icon hidden-xs\" *ngIf=\"!isFrozen && !isDragging\"></div>\n\n    <div *cdkDragPlaceholder class=\"card-placeholder\"></div>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i4.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: i5.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "cdkDropListData", "cdkDropListOrientation", "id", "cdkDropListLockAxis", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListAutoScrollDisabled", "cdkDropListAutoScrollStep"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { kind: "directive", type: i5.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragData", "cdkDragLockAxis", "cdkDragRootElement", "cdkDragBoundary", "cdkDragStartDelay", "cdkDragFreeDragPosition", "cdkDragDisabled", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragPreviewContainer"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { kind: "directive", type: i5.CdkDragHandle, selector: "[cdkDragHandle]", inputs: ["cdkDragHandleDisabled"] }, { kind: "directive", type: i5.CdkDragPlaceholder, selector: "ng-template[cdkDragPlaceholder]", inputs: ["data"] }, { kind: "directive", type: i6.BsDropdownMenuDirective, selector: "[bsDropdownMenu],[dropdownMenu]", exportAs: ["bs-dropdown-menu"] }, { kind: "directive", type: i6.BsDropdownToggleDirective, selector: "[bsDropdownToggle],[dropdownToggle]", exportAs: ["bs-dropdown-toggle"] }, { kind: "directive", type: i6.BsDropdownDirective, selector: "[bsDropdown], [dropdown]", inputs: ["placement", "triggers", "container", "dropup", "autoClose", "isAnimated", "insideClick", "isDisabled", "isOpen"], outputs: ["isOpenChange", "onShown", "onHidden"], exportAs: ["bs-dropdown"] }, { kind: "directive", type: i7.TooltipDirective, selector: "[tooltip], [tooltipHtml]", inputs: ["adaptivePosition", "tooltip", "placement", "triggers", "container", "containerClass", "boundariesElement", "isOpen", "isDisabled", "delay", "tooltipHtml", "tooltipPlacement", "tooltipIsOpen", "tooltipEnable", "tooltipAppendToBody", "tooltipAnimation", "tooltipClass", "tooltipContext", "tooltipPopupDelay", "tooltipFadeDuration", "tooltipTrigger"], outputs: ["tooltipChange", "onShown", "onHidden", "tooltipStateChanged"], exportAs: ["bs-tooltip"] }, { kind: "pipe", type: i8.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: DashboardChildComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-dashboard-child', host: {
                        class: 'dashboard-grid-child'
                    }, template: "<div cdkDropList>\n  <div *ngIf=\"isResize\" class=\"card-placeholder\"></div>\n  <div\n    [ngClass]=\"klasses\"\n    cdkDrag\n    [ngStyle]=\"{ width: _pxWidth, height: _pxHeight }\"\n    (cdkDragStarted)=\"dragStarted($event)\"\n    (cdkDragEnded)=\"reset($event)\"\n    [cdkDragDisabled]=\"isFrozen\"\n  >\n    <div\n      class=\"card-header-actions card-header-grid\"\n      [ngClass]=\"{ 'drag-handle': !isFrozen, draggableCursor: !isFrozen }\"\n      cdkDragHandle\n      [style.--dashboard-time-context]=\"\n        data?.config?.widgetInstanceGlobalTimeContext ? 'block' : 'none'\n      \"\n    >\n      <ng-content select=\"c8y-dashboard-child-title\"></ng-content>\n      <div class=\"header-actions d-flex a-i-center\" *ngIf=\"!isFrozen && actions.length > 0\">\n        <span class=\"m-l-auto\" style=\"display: var(--dashboard-time-context)\">\n          <button\n            class=\"btn-clean\"\n            tooltip=\"{{ 'This widget is in sync with the dashboard time range.' | translate }}\"\n            placement=\"top\"\n            container=\"body\"\n            [attr.aria-label]=\"'This widget is in sync with the dashboard time range.' | translate\"\n          >\n            <span class=\"c8y-icon-badge d-inline-flex\">\n              <i c8yIcon=\"clock\"></i>\n              <span class=\"badge badge-success\">\n                <i c8yIcon=\"link\" class=\"text-gray-white\"></i>\n              </span>\n            </span>\n          </button>\n        </span>\n        <div class=\"optionsBtn dropdown\" dropdown placement=\"bottom right\">\n          <button\n            title=\"{{ 'Settings' | translate }}\"\n            class=\"btnIcon c8y-dropdown\"\n            (click)=\"(false)\"\n            dropdownToggle\n            aria-haspopup=\"true\"\n          >\n            <i [c8yIcon]=\"'cog'\"></i>\n          </button>\n          <ul class=\"dropdown-menu dropdown-menu-right\" style=\"right: -1px\" *dropdownMenu>\n            <ng-container *ngFor=\"let action of actions\">\n              <ng-container *ngTemplateOutlet=\"action.template\"></ng-container>\n            </ng-container>\n          </ul>\n        </div>\n      </div>\n    </div>\n    <div class=\"card-inner-scroll\">\n      <ng-content></ng-content>\n    </div>\n    <div\n      *ngIf=\"!isFrozen && !isDragging\"\n      class=\"resize-handle hidden-xs\"\n      cdkDrag\n      [cdkDragDisabled]=\"isFrozen\"\n      (cdkDragStarted)=\"resizeStarted($event)\"\n      (cdkDragEnded)=\"reset($event)\"\n    ></div>\n    <div class=\"resize-icon hidden-xs\" *ngIf=\"!isFrozen && !isDragging\"></div>\n\n    <div *cdkDragPlaceholder class=\"card-placeholder\"></div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.DashboardComponent }, { type: i2.DomSanitizer }, { type: i0.ElementRef }]; }, propDecorators: { templateActions: [{
                type: ContentChildren,
                args: [DashboardChildActionComponent]
            }], x: [{
                type: Input
            }], y: [{
                type: Input
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], data: [{
                type: Input
            }], margin: [{
                type: Input
            }], isFrozen: [{
                type: Input
            }], useIntersection: [{
                type: Input
            }], changeStart: [{
                type: Output
            }], changeEnd: [{
                type: Output
            }], class: [{
                type: Input
            }], inlineStyle: [{
                type: HostBinding,
                args: ['attr.style']
            }] } });
//# sourceMappingURL=data:application/json;base64,