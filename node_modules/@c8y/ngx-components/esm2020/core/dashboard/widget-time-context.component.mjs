import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { DashboardChildActionComponent } from './dashboard-child-action.component';
import { DashboardChildComponent } from './dashboard-child.component';
import { WidgetsDashboardEventService } from './widgets-dashboard-event.service';
import { FormGroup } from '@angular/forms';
import { gettext } from '../i18n';
import { ActivatedRoute, Router } from '@angular/router';
import { filter } from 'rxjs/operators';
import { DateContextQueryParams, TimeSpanInMs } from './widget-time-context.model';
import * as i0 from "@angular/core";
import * as i1 from "./widgets-dashboard-event.service";
import * as i2 from "./dashboard-child.component";
import * as i3 from "@angular/router";
import * as i4 from "../common/icon.directive";
import * as i5 from "../i18n/c8y-translate.directive";
import * as i6 from "@angular/common";
import * as i7 from "../action-bar/action-bar-item.component";
import * as i8 from "ngx-bootstrap/dropdown";
import * as i9 from "@angular/forms";
import * as i10 from "@ngx-formly/core";
import * as i11 from "./dashboard-child-action.component";
import * as i12 from "../i18n/c8y-translate.pipe";
import * as i13 from "../common/date.pipe";
export class WidgetTimeContextComponent {
    /**
     * @ignore only DI.
     */
    constructor(widgetEventService, dashboardChild, router, activatedRoute) {
        this.widgetEventService = widgetEventService;
        this.dashboardChild = dashboardChild;
        this.router = router;
        this.activatedRoute = activatedRoute;
        /**
         * Indicates if the component can decouple or not.
         */
        this.canDecouple = true;
        /**
         * Emits each change as an array of dates [from, to].
         */
        this.dateContextChange = new EventEmitter();
        /**
         * Indicates if the time context is bound to the global scope.
         */
        this.isCoupled = true;
        this.decoupleTimeContextLabel = gettext('Decouple time context');
        this.coupleTimeContextLabel = gettext('Couple time context');
        this.currentPredefinedTimeSpan = null;
        this.setPredefinedDates();
    }
    /**
     * @ignore Subscribing to the global context.
     */
    ngOnInit() {
        const initialDate = this.getInitialDate();
        this.initForm(initialDate);
        this.subscribeToGlobalContext();
        this.update(initialDate);
        this.subscribeToQueryParamsChange();
    }
    /**
     * @ignore Adding custom actions.
     */
    ngAfterViewInit() {
        if (this.canDecouple) {
            this.dashboardChild.addActions([this.action]);
        }
    }
    /**
     * Toggles the coupling on or off.
     */
    toggleDecoupling() {
        this.isCoupled = !this.isCoupled;
        if (this.isCoupled) {
            this.subscribeToGlobalContext();
            this.globalDate = this.widgetEventService.getLastValue('TIME_CONTEXT');
            this.updateFormValues(this.globalDate);
            this.dateContextChange.emit(this.globalDate);
        }
        else {
            this.unsubscribeFromGlobalContext();
            if (!this.localDate) {
                this.localDate = this.globalDate;
            }
            this.updateFormValues(this.localDate);
        }
    }
    /**
     * Applies form value to global or local date context.
     */
    applyDatetimeContext() {
        this.update([new Date(this.form.value.fromDate), new Date(this.form.value.toDate)]);
    }
    /**
     * Resets form to initial value and update context.
     */
    reset() {
        this.updateDefaultDate();
        this.updateFormValues(this.defaultDate);
        this.update(this.defaultDate);
    }
    /**
     * @ignore unsubscribing.
     */
    ngOnDestroy() {
        this.unsubscribeFromGlobalContext();
    }
    predefinedDateFromSelected(selectedDateFrom) {
        this.updateDefaultDate();
        const calculatedDateFrom = new Date(this.defaultDate[1].valueOf() - selectedDateFrom.timeSpanInMs);
        this.update([calculatedDateFrom, this.defaultDate[1]], selectedDateFrom);
    }
    updateDefaultDate() {
        const todayDate = new Date();
        const yesterdayDate = new Date(todayDate.valueOf() - 1000 * 60 * 60 * 24);
        this.defaultDate = [yesterdayDate, todayDate];
    }
    setPredefinedDates() {
        this.updateDefaultDate();
        const todayDateCopy = new Date(this.defaultDate[1].valueOf());
        const lastMonthTimeSpan = todayDateCopy.valueOf() -
            new Date(todayDateCopy.setMonth(todayDateCopy.getMonth() - 1)).valueOf();
        this.predefinedTimeSpanList = [
            { title: gettext('Last minute'), timeSpanInMs: TimeSpanInMs.MINUTE },
            { title: gettext('Last hour'), timeSpanInMs: TimeSpanInMs.HOUR },
            { title: gettext('Last day'), timeSpanInMs: TimeSpanInMs.DAY },
            { title: gettext('Last week'), timeSpanInMs: TimeSpanInMs.WEEK },
            { title: gettext('Last month'), timeSpanInMs: lastMonthTimeSpan }
        ];
    }
    /**
     * Initializes datetime picker form with proper fields and initial value.
     * @param initialValue Value to fill form with.
     */
    initForm(initialValue) {
        this.form = new FormGroup({});
        this.fields = [
            {
                type: 'date-time',
                key: 'fromDate',
                templateOptions: {
                    label: gettext('From`date`')
                },
                expressionProperties: {
                    'templateOptions.maxDate': (model) => model?.toDate
                }
            },
            {
                type: 'date-time',
                key: 'toDate',
                templateOptions: {
                    label: gettext('To`date`')
                },
                expressionProperties: {
                    'templateOptions.minDate': (model) => model?.fromDate
                }
            }
        ];
        this.model = {
            fromDate: initialValue[0].toISOString(),
            toDate: initialValue[1].toISOString()
        };
    }
    /**
     * Fires a new WidgetChangeEvent either on the local change emitter or on the global one.
     * @param dateRange The event data to send.
     * @param predefinedDateFrom Time range selected from dropdown.
     */
    update(dateRange, predefinedDateFrom) {
        if (this.isCoupled) {
            this.widgetEventService.emit({ type: 'TIME_CONTEXT', data: dateRange });
        }
        else {
            this.localDate = dateRange;
            this.dateContextChange.emit(dateRange);
        }
        this.currentPredefinedTimeSpan =
            predefinedDateFrom || this.getCurrentPredefinedTimeSpan(dateRange);
    }
    subscribeToGlobalContext() {
        const event$ = this.widgetEventService.getObservable('TIME_CONTEXT');
        this.subscription = event$.subscribe((dateContextChange) => {
            this.globalDate = dateContextChange;
            this.dateContextChange.emit(dateContextChange);
            this.updateFormValues(dateContextChange);
            this.setDateContextQueryParams();
        });
    }
    updateFormValues(value) {
        this.model = {
            fromDate: value[0].toISOString(),
            toDate: value[1].toISOString()
        };
    }
    unsubscribeFromGlobalContext() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    getInitialDate() {
        const dateContextFrom = this.activatedRoute.snapshot.queryParams[DateContextQueryParams.DATE_CONTEXT_FROM];
        const dateContextTo = this.activatedRoute.snapshot.queryParams[DateContextQueryParams.DATE_CONTEXT_TO];
        if (this.isValidDateRange(dateContextFrom, dateContextTo)) {
            return [new Date(dateContextFrom), new Date(dateContextTo)];
        }
        return this.widgetEventService.getLastValue('TIME_CONTEXT') || this.defaultDate;
    }
    isValidDateRange(stringifiedDateFrom, stringifiedDateTo) {
        const dateFrom = new Date(stringifiedDateFrom);
        const dateTo = new Date(stringifiedDateTo);
        if (dateFrom instanceof Date &&
            !isNaN(dateFrom?.getTime()) &&
            dateTo instanceof Date &&
            !isNaN(dateTo?.getTime())) {
            return dateFrom < dateTo;
        }
        return false;
    }
    /**
     * Sets date context as url query params.
     */
    setDateContextQueryParams() {
        const queryParams = {
            dateContextFrom: this.globalDate[0].toISOString(),
            dateContextTo: this.globalDate[1].toISOString()
        };
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams,
            queryParamsHandling: 'merge'
        });
    }
    subscribeToQueryParamsChange() {
        this.activatedRoute.queryParams
            .pipe(filter(({ dateContextFrom, dateContextTo }) => {
            return (this.isValidDateRange(dateContextFrom, dateContextTo) &&
                (this.globalDate[0].toISOString() !== dateContextFrom ||
                    this.globalDate[1].toISOString() !== dateContextTo));
        }))
            .subscribe(({ dateContextFrom, dateContextTo }) => {
            const dateContext = [new Date(dateContextFrom), new Date(dateContextTo)];
            this.widgetEventService.emit({ type: 'TIME_CONTEXT', data: dateContext });
        });
    }
    getCurrentPredefinedTimeSpan(dateRange) {
        if (dateRange[1].toISOString() !== this.defaultDate[1].toISOString()) {
            return;
        }
        const timeSpan = dateRange[1].valueOf() - dateRange[0].valueOf();
        return this.predefinedTimeSpanList.find(predefTimeSpan => predefTimeSpan.timeSpanInMs === timeSpan);
    }
}
WidgetTimeContextComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: WidgetTimeContextComponent, deps: [{ token: i1.WidgetsDashboardEventService }, { token: i2.DashboardChildComponent }, { token: i3.Router }, { token: i3.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
WidgetTimeContextComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.6", type: WidgetTimeContextComponent, selector: "c8y-widget-time-context", inputs: { canDecouple: "canDecouple" }, outputs: { dateContextChange: "dateContextChange" }, host: { classAttribute: "d-flex a-i-center gap-4" }, viewQueries: [{ propertyName: "action", first: true, predicate: DashboardChildActionComponent, descendants: true }], ngImport: i0, template: "<c8y-action-bar-item\n  *ngIf=\"isCoupled\"\n  [groupId]=\"'timecontext'\"\n  [placement]=\"'left'\"\n  itemClass=\"navbar-form\"\n>\n  <ng-container\n    [ngTemplateOutlet]=\"dateTimePicker\"\n    [ngTemplateOutletContext]=\"{ date: globalDate }\"\n  ></ng-container>\n</c8y-action-bar-item>\n\n<ng-container\n  *ngIf=\"!isCoupled\"\n  [ngTemplateOutlet]=\"dateTimePicker\"\n  [ngTemplateOutletContext]=\"{ date: localDate }\"\n></ng-container>\n\n<ng-template #dateTimePicker let-date=\"date\">\n  <label>{{ 'Time range' | translate }}</label>\n  <div\n    class=\"dropdown m-r-4\"\n    dropdown\n    #dropdown=\"bs-dropdown\"\n    container=\"body\"\n    [insideClick]=\"true\"\n  >\n    <button\n      class=\"dropdown-toggle form-control l-h-1 d-flex a-i-center\"\n      dropdownToggle\n      title=\"{{ date[0] | c8yDate: 'short' }} \u2014 {{ date[1] | c8yDate: 'short' }}\"\n      aria-haspopup=\"true\"\n    >\n      <span>{{ date[0] | c8yDate: 'shortDate' }} \u2014 {{ date[1] | c8yDate: 'shortDate' }}</span>\n      <span class=\"caret m-r-8 m-l-4\"></span>\n    </button>\n\n    <div *dropdownMenu class=\"dropdown-menu dropdown-menu--date-range\">\n      <div class=\"p-16\">\n        <formly-form [form]=\"form\" [fields]=\"fields\" [model]=\"model\"></formly-form>\n      </div>\n      <div class=\"p-16 d-flex gap-8 separator-top\">\n        <button\n          class=\"btn btn-default btn-sm flex-grow\"\n          (click)=\"reset(); dropdown.isOpen = false\"\n          title=\"{{ 'Reset' | translate }}\"\n          type=\"button\"\n          translate\n        >\n          Reset\n        </button>\n\n        <button\n          class=\"btn btn-primary btn-sm flex-grow\"\n          (click)=\"applyDatetimeContext(); dropdown.isOpen = false\"\n          [disabled]=\"(form.pristine && form.untouched) || form.invalid\"\n          title=\"{{ 'Apply' | translate }}\"\n          type=\"button\"\n          translate\n        >\n          Apply\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"c8y-select-wrapper\">\n    <select\n      class=\"form-control\"\n      [attr.aria-label]=\"'Range' | translate\"\n      [ngModel]=\"currentPredefinedTimeSpan\"\n      (ngModelChange)=\"predefinedDateFromSelected($event)\"\n    >\n      <option value=\"undefined\" disabled=\"true\">{{ 'Custom range`time`' | translate }}</option>\n      <option *ngFor=\"let dateFrom of predefinedTimeSpanList\" [ngValue]=\"dateFrom\">\n        {{ dateFrom.title }}\n      </option>\n    </select>\n    <span></span>\n  </div>\n</ng-template>\n\n<c8y-dashboard-child-action>\n  <button (click)=\"toggleDecoupling();\" type=\"button\">\n    <i [c8yIcon]=\"isCoupled ? 'schedule1' : 'today'\"></i>\n    <span class=\"m-l-4\">\n      {{ (isCoupled ? decoupleTimeContextLabel : coupleTimeContextLabel) | translate }}\n    </span>\n  </button>\n</c8y-dashboard-child-action>\n", dependencies: [{ kind: "directive", type: i4.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i5.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i6.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i7.ActionBarItemComponent, selector: "c8y-action-bar-item", inputs: ["placement", "priority", "itemClass", "injector", "groupId"] }, { kind: "directive", type: i8.BsDropdownMenuDirective, selector: "[bsDropdownMenu],[dropdownMenu]", exportAs: ["bs-dropdown-menu"] }, { kind: "directive", type: i8.BsDropdownToggleDirective, selector: "[bsDropdownToggle],[dropdownToggle]", exportAs: ["bs-dropdown-toggle"] }, { kind: "directive", type: i8.BsDropdownDirective, selector: "[bsDropdown], [dropdown]", inputs: ["placement", "triggers", "container", "dropup", "autoClose", "isAnimated", "insideClick", "isDisabled", "isOpen"], outputs: ["isOpenChange", "onShown", "onHidden"], exportAs: ["bs-dropdown"] }, { kind: "directive", type: i9.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i9.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i9.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i9.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i9.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i10.FormlyForm, selector: "formly-form", inputs: ["form", "model", "fields", "options"], outputs: ["modelChange"] }, { kind: "component", type: i11.DashboardChildActionComponent, selector: "c8y-dashboard-child-action" }, { kind: "pipe", type: i12.C8yTranslatePipe, name: "translate" }, { kind: "pipe", type: i13.DatePipe, name: "c8yDate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: WidgetTimeContextComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-widget-time-context', host: { class: 'd-flex a-i-center gap-4' }, template: "<c8y-action-bar-item\n  *ngIf=\"isCoupled\"\n  [groupId]=\"'timecontext'\"\n  [placement]=\"'left'\"\n  itemClass=\"navbar-form\"\n>\n  <ng-container\n    [ngTemplateOutlet]=\"dateTimePicker\"\n    [ngTemplateOutletContext]=\"{ date: globalDate }\"\n  ></ng-container>\n</c8y-action-bar-item>\n\n<ng-container\n  *ngIf=\"!isCoupled\"\n  [ngTemplateOutlet]=\"dateTimePicker\"\n  [ngTemplateOutletContext]=\"{ date: localDate }\"\n></ng-container>\n\n<ng-template #dateTimePicker let-date=\"date\">\n  <label>{{ 'Time range' | translate }}</label>\n  <div\n    class=\"dropdown m-r-4\"\n    dropdown\n    #dropdown=\"bs-dropdown\"\n    container=\"body\"\n    [insideClick]=\"true\"\n  >\n    <button\n      class=\"dropdown-toggle form-control l-h-1 d-flex a-i-center\"\n      dropdownToggle\n      title=\"{{ date[0] | c8yDate: 'short' }} \u2014 {{ date[1] | c8yDate: 'short' }}\"\n      aria-haspopup=\"true\"\n    >\n      <span>{{ date[0] | c8yDate: 'shortDate' }} \u2014 {{ date[1] | c8yDate: 'shortDate' }}</span>\n      <span class=\"caret m-r-8 m-l-4\"></span>\n    </button>\n\n    <div *dropdownMenu class=\"dropdown-menu dropdown-menu--date-range\">\n      <div class=\"p-16\">\n        <formly-form [form]=\"form\" [fields]=\"fields\" [model]=\"model\"></formly-form>\n      </div>\n      <div class=\"p-16 d-flex gap-8 separator-top\">\n        <button\n          class=\"btn btn-default btn-sm flex-grow\"\n          (click)=\"reset(); dropdown.isOpen = false\"\n          title=\"{{ 'Reset' | translate }}\"\n          type=\"button\"\n          translate\n        >\n          Reset\n        </button>\n\n        <button\n          class=\"btn btn-primary btn-sm flex-grow\"\n          (click)=\"applyDatetimeContext(); dropdown.isOpen = false\"\n          [disabled]=\"(form.pristine && form.untouched) || form.invalid\"\n          title=\"{{ 'Apply' | translate }}\"\n          type=\"button\"\n          translate\n        >\n          Apply\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"c8y-select-wrapper\">\n    <select\n      class=\"form-control\"\n      [attr.aria-label]=\"'Range' | translate\"\n      [ngModel]=\"currentPredefinedTimeSpan\"\n      (ngModelChange)=\"predefinedDateFromSelected($event)\"\n    >\n      <option value=\"undefined\" disabled=\"true\">{{ 'Custom range`time`' | translate }}</option>\n      <option *ngFor=\"let dateFrom of predefinedTimeSpanList\" [ngValue]=\"dateFrom\">\n        {{ dateFrom.title }}\n      </option>\n    </select>\n    <span></span>\n  </div>\n</ng-template>\n\n<c8y-dashboard-child-action>\n  <button (click)=\"toggleDecoupling();\" type=\"button\">\n    <i [c8yIcon]=\"isCoupled ? 'schedule1' : 'today'\"></i>\n    <span class=\"m-l-4\">\n      {{ (isCoupled ? decoupleTimeContextLabel : coupleTimeContextLabel) | translate }}\n    </span>\n  </button>\n</c8y-dashboard-child-action>\n" }]
        }], ctorParameters: function () { return [{ type: i1.WidgetsDashboardEventService }, { type: i2.DashboardChildComponent }, { type: i3.Router }, { type: i3.ActivatedRoute }]; }, propDecorators: { canDecouple: [{
                type: Input
            }], dateContextChange: [{
                type: Output
            }], action: [{
                type: ViewChild,
                args: [DashboardChildActionComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,