import { ContentChildren, Input, Output, EventEmitter, Component, ViewChild, ElementRef, QueryList, forwardRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { fromEvent } from 'rxjs';
import { debounceTime, map, distinctUntilChanged, filter } from 'rxjs/operators';
import { BsDropdownDirective } from 'ngx-bootstrap/dropdown';
import { ListItemComponent } from '../list-group/list-item.component';
import { findIndex, get, set } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "ngx-bootstrap/dropdown";
import * as i2 from "../common/icon.directive";
import * as i3 from "@angular/common";
import * as i4 from "../list-group/list-group.component";
import * as i5 from "@angular/forms";
import * as i6 from "../forms/required-input-placeholder.directive";
import * as i7 from "../i18n/c8y-translate.pipe";
export class TypeaheadComponent {
    constructor() {
        this.required = false;
        this.disabled = false;
        this.allowFreeEntries = true;
        this.displayProperty = 'name';
        this.icon = 'caret-down';
        this.name = this.displayProperty;
        this.autoClose = true;
        this.hideNew = false;
        this.container = '';
        this.selected = {
            id: null
        };
        this.onSearch = new EventEmitter();
        this.onIconClick = new EventEmitter();
        this.KEYCODE_UP = 38;
        this.KEYCODE_DOWN = 40;
        this.KEYCODE_TAB = 9;
        this.KEYCODE_ENTER = 13;
        this.KEYCODE_ESC = 27;
    }
    writeValue(value) {
        this.selected = value;
        if (value && this.searchControl) {
            this.searchControl.nativeElement.value = get(value, this.displayProperty, '');
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    doBlur() {
        if (this.onTouched) {
            this.onTouched();
        }
    }
    getDisplayProperty() {
        return get(this.selected, this.displayProperty, '');
    }
    onShown() {
        this.searchControl.nativeElement.focus();
    }
    /**
     * Resets the input field - clear value and clean field to be pristine and untouched.
     */
    reset() {
        this.searchControlModel.reset();
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    ngAfterViewInit() {
        this.subscription = fromEvent(this.searchControl.nativeElement, 'keydown')
            .pipe(map((e) => this.handleKeyboard(e)), filter((e) => e), debounceTime(200), map((e) => e.target.value), distinctUntilChanged())
            .subscribe(value => {
            this.selected = {
                id: null
            };
            set(this.selected, this.displayProperty, value || '');
            if (typeof this.onChange === 'function') {
                this.onChange(this.selected);
            }
            this.onSearch.emit(value);
        });
    }
    handleKeyboard(event) {
        const keyCode = event.keyCode;
        if ([this.KEYCODE_ENTER, this.KEYCODE_DOWN, this.KEYCODE_TAB, this.KEYCODE_UP].includes(keyCode)) {
            const items = this.list.toArray();
            const index = findIndex(items, item => item.active);
            if (keyCode === this.KEYCODE_ENTER || keyCode === this.KEYCODE_TAB) {
                if (index > -1) {
                    event.preventDefault();
                    items[index].element.nativeElement.click();
                }
                this.dropdown.hide();
                this.searchControl.nativeElement.blur();
            }
            else {
                this.dropdown.show();
                const upOrDown = keyCode === this.KEYCODE_DOWN ? 1 : -1;
                if (index > -1) {
                    items[index].active = false;
                }
                this.selectNextItemOnKeyboardMove(items, index, upOrDown);
            }
            return;
        }
        else if (keyCode === this.KEYCODE_ESC && this.autoClose) {
            event.stopPropagation();
            this.dropdown.hide();
            this.searchControl.nativeElement.blur();
            return;
        }
        else {
            this.dropdown.show();
        }
        return event;
    }
    validate(_ctrl) {
        if (this.required && !get(_ctrl.value, this.displayProperty, '')) {
            return { required: true };
        }
        if (!this.allowFreeEntries &&
            this.selected &&
            this.selected.id === null &&
            _ctrl.value[this.displayProperty]) {
            return { notExisting: true };
        }
        return null;
    }
    selectNextItemOnKeyboardMove(items, index, upOrDown) {
        if (items[index + upOrDown]) {
            if (!items[index + upOrDown].selectable) {
                this.selectNextItemOnKeyboardMove(items, index + upOrDown, upOrDown);
                return;
            }
            items[index + upOrDown].active = true;
        }
    }
}
TypeaheadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: TypeaheadComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TypeaheadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.6", type: TypeaheadComponent, selector: "c8y-typeahead", inputs: { required: "required", maxlength: "maxlength", disabled: "disabled", allowFreeEntries: "allowFreeEntries", placeholder: "placeholder", displayProperty: "displayProperty", icon: "icon", name: "name", autoClose: "autoClose", hideNew: "hideNew", container: "container", selected: "selected" }, outputs: { onSearch: "onSearch", onIconClick: "onIconClick" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef(() => TypeaheadComponent)
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => TypeaheadComponent),
            multi: true
        }
    ], queries: [{ propertyName: "list", predicate: ListItemComponent }], viewQueries: [{ propertyName: "searchControl", first: true, predicate: ["searchControl"], descendants: true }, { propertyName: "searchControlModel", first: true, predicate: ["searchControlModel"], descendants: true }, { propertyName: "dropdown", first: true, predicate: ["dropdown"], descendants: true }], ngImport: i0, template: "<div\n  class=\"c8y-search-dropdown dropdown fit-w\"\n  dropdown\n  [container]=\"container\"\n  placement=\"bottom left\"\n  #dropdown=\"bs-dropdown\"\n  [autoClose]=\"true\"\n  (onShown)=\"onShown()\"\n  [isDisabled]=\"disabled\"\n>\n  <div role=\"button\" class=\"input-group input-group-dropdown\">\n    <input\n      #searchControl\n      #searchControlModel=\"ngModel\"\n      type=\"text\"\n      class=\"form-control text-truncate\"\n      [ngClass]=\"{\n        'p-r-80':\n          !hideNew &&\n          (selected\n            ? selected.id === null && getDisplayProperty()?.length > 0 && allowFreeEntries\n            : false),\n        'p-r-40': hideNew || getDisplayProperty()?.length === 0\n      }\"\n      [required]=\"required\"\n      [ngModel]=\"selected ? getDisplayProperty() : ''\"\n      [placeholder]=\"placeholder | translate\"\n      (blur)=\"doBlur()\"\n      [name]=\"name\"\n      [maxlength]=\"maxlength\"\n      [disabled]=\"disabled\"\n    />\n    <span\n      class=\"label label-info p-absolute\"\n      style=\"top: 10px; right: 40px; z-index: 10\"\n      *ngIf=\"\n        !hideNew &&\n        (selected\n          ? selected.id === null && getDisplayProperty()?.length > 0 && allowFreeEntries\n          : false)\n      \"\n    >\n      {{ 'New' | translate }}\n    </span>\n\n    <span class=\"input-group-btn\">\n      <button\n        class=\"btn btn-dot\"\n        title=\"{{ 'Search' | translate }}\"\n        type=\"button\"\n        [disabled]=\"disabled\"\n        (click)=\"onIconClick.emit({ icon, $event });\"\n        dropdownToggle\n        data-cy=\"typeahead-button\"\n      >\n        <i [c8yIcon]=\"icon\" class=\"text-primary\"></i>\n      </button>\n    </span>\n  </div>\n\n  <c8y-list-group\n    class=\"dropdown-menu dropdown-menu--modal\"\n    data-cy=\"typeahead--dropdown-menu\"\n    role=\"menu\"\n    *dropdownMenu\n    [style.width]=\"container === 'body' ? searchControl.clientWidth + 'px' : undefined\"\n  >\n    <ng-content select=\"div, c8y-li, c8y-list-item, button, a\"></ng-content>\n  </c8y-list-group>\n</div>\n", dependencies: [{ kind: "directive", type: i1.BsDropdownMenuDirective, selector: "[bsDropdownMenu],[dropdownMenu]", exportAs: ["bs-dropdown-menu"] }, { kind: "directive", type: i1.BsDropdownToggleDirective, selector: "[bsDropdownToggle],[dropdownToggle]", exportAs: ["bs-dropdown-toggle"] }, { kind: "directive", type: i1.BsDropdownDirective, selector: "[bsDropdown], [dropdown]", inputs: ["placement", "triggers", "container", "dropup", "autoClose", "isAnimated", "insideClick", "isDisabled", "isOpen"], outputs: ["isOpenChange", "onShown", "onHidden"], exportAs: ["bs-dropdown"] }, { kind: "directive", type: i2.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.ListGroupComponent, selector: "c8y-list-group" }, { kind: "directive", type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i5.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i6.RequiredInputPlaceholderDirective, selector: "input[required], input[formControlName]" }, { kind: "pipe", type: i7.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: TypeaheadComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-typeahead', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef(() => TypeaheadComponent)
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => TypeaheadComponent),
                            multi: true
                        }
                    ], template: "<div\n  class=\"c8y-search-dropdown dropdown fit-w\"\n  dropdown\n  [container]=\"container\"\n  placement=\"bottom left\"\n  #dropdown=\"bs-dropdown\"\n  [autoClose]=\"true\"\n  (onShown)=\"onShown()\"\n  [isDisabled]=\"disabled\"\n>\n  <div role=\"button\" class=\"input-group input-group-dropdown\">\n    <input\n      #searchControl\n      #searchControlModel=\"ngModel\"\n      type=\"text\"\n      class=\"form-control text-truncate\"\n      [ngClass]=\"{\n        'p-r-80':\n          !hideNew &&\n          (selected\n            ? selected.id === null && getDisplayProperty()?.length > 0 && allowFreeEntries\n            : false),\n        'p-r-40': hideNew || getDisplayProperty()?.length === 0\n      }\"\n      [required]=\"required\"\n      [ngModel]=\"selected ? getDisplayProperty() : ''\"\n      [placeholder]=\"placeholder | translate\"\n      (blur)=\"doBlur()\"\n      [name]=\"name\"\n      [maxlength]=\"maxlength\"\n      [disabled]=\"disabled\"\n    />\n    <span\n      class=\"label label-info p-absolute\"\n      style=\"top: 10px; right: 40px; z-index: 10\"\n      *ngIf=\"\n        !hideNew &&\n        (selected\n          ? selected.id === null && getDisplayProperty()?.length > 0 && allowFreeEntries\n          : false)\n      \"\n    >\n      {{ 'New' | translate }}\n    </span>\n\n    <span class=\"input-group-btn\">\n      <button\n        class=\"btn btn-dot\"\n        title=\"{{ 'Search' | translate }}\"\n        type=\"button\"\n        [disabled]=\"disabled\"\n        (click)=\"onIconClick.emit({ icon, $event });\"\n        dropdownToggle\n        data-cy=\"typeahead-button\"\n      >\n        <i [c8yIcon]=\"icon\" class=\"text-primary\"></i>\n      </button>\n    </span>\n  </div>\n\n  <c8y-list-group\n    class=\"dropdown-menu dropdown-menu--modal\"\n    data-cy=\"typeahead--dropdown-menu\"\n    role=\"menu\"\n    *dropdownMenu\n    [style.width]=\"container === 'body' ? searchControl.clientWidth + 'px' : undefined\"\n  >\n    <ng-content select=\"div, c8y-li, c8y-list-item, button, a\"></ng-content>\n  </c8y-list-group>\n</div>\n" }]
        }], propDecorators: { searchControl: [{
                type: ViewChild,
                args: ['searchControl', { static: false }]
            }], searchControlModel: [{
                type: ViewChild,
                args: ['searchControlModel', { static: false }]
            }], dropdown: [{
                type: ViewChild,
                args: ['dropdown', { static: false }]
            }], list: [{
                type: ContentChildren,
                args: [ListItemComponent]
            }], required: [{
                type: Input
            }], maxlength: [{
                type: Input
            }], disabled: [{
                type: Input
            }], allowFreeEntries: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], displayProperty: [{
                type: Input
            }], icon: [{
                type: Input
            }], name: [{
                type: Input
            }], autoClose: [{
                type: Input
            }], hideNew: [{
                type: Input
            }], container: [{
                type: Input
            }], selected: [{
                type: Input
            }], onSearch: [{
                type: Output
            }], onIconClick: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,