import { Component } from '@angular/core';
import { UserService } from '@c8y/client';
import { AlertService } from '../alert/alert.service';
import { gettext } from '../i18n';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "../alert/alert.service";
import * as i3 from "../i18n/c8y-translate.directive";
import * as i4 from "@angular/common";
import * as i5 from "angularx-qrcode";
export class TotpSetupComponent {
    constructor(user, alert) {
        this.user = user;
        this.alert = alert;
    }
    get qrCodeImage() {
        return this.totpSecret ? this.totpSecret.secretQrUrl : '';
    }
    get secret() {
        return this.totpSecret ? this.totpSecret.rawSecret : '';
    }
    get qrData() {
        // TODO: waiting for BE:, now we need extract it from secretQrUrl
        // https://cumulocity.atlassian.net/browse/MTM-36387
        // return this.totpSecret ? this.totpSecret.qrData : '';
        const otpAuth = this.qrCodeImage.split('chl=')[1];
        if (!otpAuth) {
            this.alert.danger(gettext('Failed to generate a QR code.'));
            return '';
        }
        return decodeURIComponent(otpAuth);
    }
    async ngOnInit() {
        try {
            const { data } = await this.user.generateTotpSecret();
            this.totpSecret = data;
        }
        catch (ex) {
            this.alert.addServerFailure(ex);
        }
    }
}
TotpSetupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: TotpSetupComponent, deps: [{ token: i1.UserService }, { token: i2.AlertService }], target: i0.ɵɵFactoryTarget.Component });
TotpSetupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.6", type: TotpSetupComponent, selector: "c8y-totp-setup", ngImport: i0, template: "<div class=\"text-center\">\n  <p class=\"m-24 m-t-16 m-b-0\" translate>\n    Scan this QR code with your smartphone using the authenticator app.\n  </p>\n\n  <div class=\"d-flex j-c-center\">\n    <qrcode\n      [width]=\"180\"\n      *ngIf=\"totpSecret\"\n      [qrdata]=\"qrData\"\n      [errorCorrectionLevel]=\"'M'\"\n      [elementType]=\"'svg'\"\n    ></qrcode>\n  </div>\n  <p class=\"text-center text-muted\">\n    {{ secret }}\n  </p>\n</div>\n", dependencies: [{ kind: "directive", type: i3.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i5.QRCodeComponent, selector: "qrcode", inputs: ["allowEmptyString", "colorDark", "colorLight", "cssClass", "elementType", "errorCorrectionLevel", "imageSrc", "imageHeight", "imageWidth", "margin", "qrdata", "scale", "version", "width", "alt", "ariaLabel", "title"], outputs: ["qrCodeURL"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: TotpSetupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-totp-setup', template: "<div class=\"text-center\">\n  <p class=\"m-24 m-t-16 m-b-0\" translate>\n    Scan this QR code with your smartphone using the authenticator app.\n  </p>\n\n  <div class=\"d-flex j-c-center\">\n    <qrcode\n      [width]=\"180\"\n      *ngIf=\"totpSecret\"\n      [qrdata]=\"qrData\"\n      [errorCorrectionLevel]=\"'M'\"\n      [elementType]=\"'svg'\"\n    ></qrcode>\n  </div>\n  <p class=\"text-center text-muted\">\n    {{ secret }}\n  </p>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.UserService }, { type: i2.AlertService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90cC1zZXR1cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2F1dGhlbnRpY2F0aW9uL3RvdHAtc2V0dXAuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vY29yZS9hdXRoZW50aWNhdGlvbi90b3RwLXNldHVwLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFTLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNqRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFNBQVMsQ0FBQzs7Ozs7OztBQU1sQyxNQUFNLE9BQU8sa0JBQWtCO0lBdUI3QixZQUFvQixJQUFpQixFQUFVLEtBQW1CO1FBQTlDLFNBQUksR0FBSixJQUFJLENBQWE7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFjO0lBQUcsQ0FBQztJQXBCdEUsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzVELENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDMUQsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLGlFQUFpRTtRQUNqRSxvREFBb0Q7UUFDcEQsd0RBQXdEO1FBQ3hELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsK0JBQStCLENBQUMsQ0FBQyxDQUFDO1lBQzVELE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxPQUFPLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFJRCxLQUFLLENBQUMsUUFBUTtRQUNaLElBQUk7WUFDRixNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDdEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7U0FDeEI7UUFBQyxPQUFPLEVBQUUsRUFBRTtZQUNYLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDakM7SUFDSCxDQUFDOzsrR0FoQ1Usa0JBQWtCO21HQUFsQixrQkFBa0Isc0RDVC9CLHdjQWtCQTsyRkRUYSxrQkFBa0I7a0JBSjlCLFNBQVM7K0JBQ0UsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElUb3RwLCBVc2VyU2VydmljZSB9IGZyb20gJ0BjOHkvY2xpZW50JztcbmltcG9ydCB7IEFsZXJ0U2VydmljZSB9IGZyb20gJy4uL2FsZXJ0L2FsZXJ0LnNlcnZpY2UnO1xuaW1wb3J0IHsgZ2V0dGV4dCB9IGZyb20gJy4uL2kxOG4nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktdG90cC1zZXR1cCcsXG4gIHRlbXBsYXRlVXJsOiAnLi90b3RwLXNldHVwLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBUb3RwU2V0dXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICB0b3RwU2VjcmV0OiBJVG90cDtcblxuICBnZXQgcXJDb2RlSW1hZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMudG90cFNlY3JldCA/IHRoaXMudG90cFNlY3JldC5zZWNyZXRRclVybCA6ICcnO1xuICB9XG5cbiAgZ2V0IHNlY3JldCgpIHtcbiAgICByZXR1cm4gdGhpcy50b3RwU2VjcmV0ID8gdGhpcy50b3RwU2VjcmV0LnJhd1NlY3JldCA6ICcnO1xuICB9XG5cbiAgZ2V0IHFyRGF0YSgpIHtcbiAgICAvLyBUT0RPOiB3YWl0aW5nIGZvciBCRTosIG5vdyB3ZSBuZWVkIGV4dHJhY3QgaXQgZnJvbSBzZWNyZXRRclVybFxuICAgIC8vIGh0dHBzOi8vY3VtdWxvY2l0eS5hdGxhc3NpYW4ubmV0L2Jyb3dzZS9NVE0tMzYzODdcbiAgICAvLyByZXR1cm4gdGhpcy50b3RwU2VjcmV0ID8gdGhpcy50b3RwU2VjcmV0LnFyRGF0YSA6ICcnO1xuICAgIGNvbnN0IG90cEF1dGggPSB0aGlzLnFyQ29kZUltYWdlLnNwbGl0KCdjaGw9JylbMV07XG4gICAgaWYgKCFvdHBBdXRoKSB7XG4gICAgICB0aGlzLmFsZXJ0LmRhbmdlcihnZXR0ZXh0KCdGYWlsZWQgdG8gZ2VuZXJhdGUgYSBRUiBjb2RlLicpKTtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChvdHBBdXRoKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdXNlcjogVXNlclNlcnZpY2UsIHByaXZhdGUgYWxlcnQ6IEFsZXJ0U2VydmljZSkge31cblxuICBhc3luYyBuZ09uSW5pdCgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLnVzZXIuZ2VuZXJhdGVUb3RwU2VjcmV0KCk7XG4gICAgICB0aGlzLnRvdHBTZWNyZXQgPSBkYXRhO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICB0aGlzLmFsZXJ0LmFkZFNlcnZlckZhaWx1cmUoZXgpO1xuICAgIH1cbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gIDxwIGNsYXNzPVwibS0yNCBtLXQtMTYgbS1iLTBcIiB0cmFuc2xhdGU+XG4gICAgU2NhbiB0aGlzIFFSIGNvZGUgd2l0aCB5b3VyIHNtYXJ0cGhvbmUgdXNpbmcgdGhlIGF1dGhlbnRpY2F0b3IgYXBwLlxuICA8L3A+XG5cbiAgPGRpdiBjbGFzcz1cImQtZmxleCBqLWMtY2VudGVyXCI+XG4gICAgPHFyY29kZVxuICAgICAgW3dpZHRoXT1cIjE4MFwiXG4gICAgICAqbmdJZj1cInRvdHBTZWNyZXRcIlxuICAgICAgW3FyZGF0YV09XCJxckRhdGFcIlxuICAgICAgW2Vycm9yQ29ycmVjdGlvbkxldmVsXT1cIidNJ1wiXG4gICAgICBbZWxlbWVudFR5cGVdPVwiJ3N2ZydcIlxuICAgID48L3FyY29kZT5cbiAgPC9kaXY+XG4gIDxwIGNsYXNzPVwidGV4dC1jZW50ZXIgdGV4dC1tdXRlZFwiPlxuICAgIHt7IHNlY3JldCB9fVxuICA8L3A+XG48L2Rpdj5cbiJdfQ==