import { Component, Input } from '@angular/core';
import { PasswordService } from './password.service';
import { LoginService } from '../login/login.service';
import { assign, map } from 'lodash-es';
import { gettext } from '../i18n/gettext';
import * as i0 from "@angular/core";
import * as i1 from "../login/login.service";
import * as i2 from "./password.service";
import * as i3 from "../common/icon.directive";
import * as i4 from "../i18n/c8y-translate.directive";
import * as i5 from "@angular/common";
import * as i6 from "../i18n/c8y-translate.pipe";
export class PasswordCheckListComponent {
    constructor(loginService, passwordStrengthChecker, passwordService) {
        this.loginService = loginService;
        this.passwordStrengthChecker = passwordStrengthChecker;
        this.passwordService = passwordService;
        this.minGreenLength = 0;
        this.checklist = [
            {
                label: gettext('Include lowercase characters (for example, abcdef)'),
                check: this.passwordStrengthChecker.hasLowerCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include uppercase characters (for example, ABCDEF)'),
                check: this.passwordStrengthChecker.hasUpperCase,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include numbers (for example, 123456)'),
                check: this.passwordStrengthChecker.hasNumbers,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Include symbols (for example, !@#$%^)'),
                check: this.passwordStrengthChecker.hasSpecialChars,
                icon: '',
                contextualColor: ''
            },
            {
                label: gettext('Must have at least {{length}} characters'),
                check: password => password.length >= this.minGreenLength,
                icon: '',
                contextualColor: ''
            }
        ];
    }
    set password(password) {
        if (typeof password === 'string') {
            this.onPasswordChange(password);
        }
    }
    async ngOnInit() {
        this.minGreenLength = await this.loginService.getGreenMinLength();
        if (!this.minGreenLength) {
            this.minGreenLength = this.passwordService.getDefaultPasswordMinLength();
        }
    }
    get translateParams() {
        return {
            length: this.minGreenLength
        };
    }
    onPasswordChange(password) {
        this.checklist = map(this.checklist, requirement => {
            const checked = requirement.check(password);
            assign(requirement, {
                icon: checked ? 'check-circle' : '',
                contextualColor: checked ? '' : 'text-muted'
            });
            return requirement;
        });
    }
}
PasswordCheckListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: PasswordCheckListComponent, deps: [{ token: i1.LoginService }, { token: i2.PasswordService }, { token: i2.PasswordService }], target: i0.ɵɵFactoryTarget.Component });
PasswordCheckListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.6", type: PasswordCheckListComponent, selector: "c8y-password-check-list", inputs: { password: "password" }, ngImport: i0, template: "<div>\n  <span class=\"small\">{{ 'Please meet 5 out of the 5 conditions below' | translate }}:</span>\n  <ul class=\"list-unstyled\">\n    <li class=\"small\" *ngFor=\"let requirement of checklist\">\n      <i [c8yIcon]=\"requirement.icon\" class=\"text-success\"></i>\n      <span\n        class=\"small {{ requirement.contextualColor }}\"\n        [translate]=\"requirement.label\"\n        [translateParams]=\"this.translateParams\"\n      ></span>\n    </li>\n  </ul>\n</div>\n", dependencies: [{ kind: "directive", type: i3.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i4.C8yTranslateDirective, selector: "[translate],[ngx-translate]" }, { kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "pipe", type: i6.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: PasswordCheckListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-password-check-list', template: "<div>\n  <span class=\"small\">{{ 'Please meet 5 out of the 5 conditions below' | translate }}:</span>\n  <ul class=\"list-unstyled\">\n    <li class=\"small\" *ngFor=\"let requirement of checklist\">\n      <i [c8yIcon]=\"requirement.icon\" class=\"text-success\"></i>\n      <span\n        class=\"small {{ requirement.contextualColor }}\"\n        [translate]=\"requirement.label\"\n        [translateParams]=\"this.translateParams\"\n      ></span>\n    </li>\n  </ul>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.LoginService }, { type: i2.PasswordService }, { type: i2.PasswordService }]; }, propDecorators: { password: [{
                type: Input,
                args: ['password']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtY2hlY2stbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2F1dGhlbnRpY2F0aW9uL3Bhc3N3b3JkLWNoZWNrLWxpc3QuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vY29yZS9hdXRoZW50aWNhdGlvbi9wYXNzd29yZC1jaGVjay1saXN0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7Ozs7OztBQU8xQyxNQUFNLE9BQU8sMEJBQTBCO0lBMkNyQyxZQUNTLFlBQTBCLEVBQ3pCLHVCQUF3QyxFQUN4QyxlQUFnQztRQUZqQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUN6Qiw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQWlCO1FBQ3hDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQXRDMUMsbUJBQWMsR0FBRyxDQUFDLENBQUM7UUFFbkIsY0FBUyxHQUFHO1lBQ1Y7Z0JBQ0UsS0FBSyxFQUFFLE9BQU8sQ0FBQyxvREFBb0QsQ0FBQztnQkFDcEUsS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZO2dCQUNoRCxJQUFJLEVBQUUsRUFBRTtnQkFDUixlQUFlLEVBQUUsRUFBRTthQUNwQjtZQUNEO2dCQUNFLEtBQUssRUFBRSxPQUFPLENBQUMsb0RBQW9ELENBQUM7Z0JBQ3BFLEtBQUssRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsWUFBWTtnQkFDaEQsSUFBSSxFQUFFLEVBQUU7Z0JBQ1IsZUFBZSxFQUFFLEVBQUU7YUFDcEI7WUFDRDtnQkFDRSxLQUFLLEVBQUUsT0FBTyxDQUFDLHVDQUF1QyxDQUFDO2dCQUN2RCxLQUFLLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFVBQVU7Z0JBQzlDLElBQUksRUFBRSxFQUFFO2dCQUNSLGVBQWUsRUFBRSxFQUFFO2FBQ3BCO1lBQ0Q7Z0JBQ0UsS0FBSyxFQUFFLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQztnQkFDdkQsS0FBSyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxlQUFlO2dCQUNuRCxJQUFJLEVBQUUsRUFBRTtnQkFDUixlQUFlLEVBQUUsRUFBRTthQUNwQjtZQUNEO2dCQUNFLEtBQUssRUFBRSxPQUFPLENBQUMsMENBQTBDLENBQUM7Z0JBQzFELEtBQUssRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLGNBQWM7Z0JBQ3pELElBQUksRUFBRSxFQUFFO2dCQUNSLGVBQWUsRUFBRSxFQUFFO2FBQ3BCO1NBQ0YsQ0FBQztJQU1DLENBQUM7SUE5Q0osSUFDSSxRQUFRLENBQUMsUUFBZ0I7UUFDM0IsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQztJQTJDRCxLQUFLLENBQUMsUUFBUTtRQUNaLElBQUksQ0FBQyxjQUFjLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDbEUsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLDJCQUEyQixFQUFFLENBQUM7U0FDMUU7SUFDSCxDQUFDO0lBRUQsSUFBSSxlQUFlO1FBQ2pCLE9BQU87WUFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLGNBQWM7U0FDNUIsQ0FBQztJQUNKLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxRQUFRO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLEVBQUU7WUFDakQsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM1QyxNQUFNLENBQUMsV0FBVyxFQUFFO2dCQUNsQixJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ25DLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWTthQUM3QyxDQUFDLENBQUM7WUFDSCxPQUFPLFdBQVcsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7O3VIQXZFVSwwQkFBMEI7MkdBQTFCLDBCQUEwQixpR0NYdkMsb2VBYUE7MkZERmEsMEJBQTBCO2tCQUx0QyxTQUFTOytCQUNFLHlCQUF5QjsrSkFNL0IsUUFBUTtzQkFEWCxLQUFLO3VCQUFDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBhc3N3b3JkU2VydmljZSB9IGZyb20gJy4vcGFzc3dvcmQuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dpblNlcnZpY2UgfSBmcm9tICcuLi9sb2dpbi9sb2dpbi5zZXJ2aWNlJztcbmltcG9ydCB7IGFzc2lnbiwgbWFwIH0gZnJvbSAnbG9kYXNoLWVzJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjOHktcGFzc3dvcmQtY2hlY2stbGlzdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wYXNzd29yZC1jaGVjay1saXN0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBQYXNzd29yZENoZWNrTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgncGFzc3dvcmQnKVxuICBzZXQgcGFzc3dvcmQocGFzc3dvcmQ6IHN0cmluZykge1xuICAgIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLm9uUGFzc3dvcmRDaGFuZ2UocGFzc3dvcmQpO1xuICAgIH1cbiAgfVxuXG4gIG1pbkdyZWVuTGVuZ3RoID0gMDtcblxuICBjaGVja2xpc3QgPSBbXG4gICAge1xuICAgICAgbGFiZWw6IGdldHRleHQoJ0luY2x1ZGUgbG93ZXJjYXNlIGNoYXJhY3RlcnMgKGZvciBleGFtcGxlLCBhYmNkZWYpJyksXG4gICAgICBjaGVjazogdGhpcy5wYXNzd29yZFN0cmVuZ3RoQ2hlY2tlci5oYXNMb3dlckNhc2UsXG4gICAgICBpY29uOiAnJyxcbiAgICAgIGNvbnRleHR1YWxDb2xvcjogJydcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiBnZXR0ZXh0KCdJbmNsdWRlIHVwcGVyY2FzZSBjaGFyYWN0ZXJzIChmb3IgZXhhbXBsZSwgQUJDREVGKScpLFxuICAgICAgY2hlY2s6IHRoaXMucGFzc3dvcmRTdHJlbmd0aENoZWNrZXIuaGFzVXBwZXJDYXNlLFxuICAgICAgaWNvbjogJycsXG4gICAgICBjb250ZXh0dWFsQ29sb3I6ICcnXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogZ2V0dGV4dCgnSW5jbHVkZSBudW1iZXJzIChmb3IgZXhhbXBsZSwgMTIzNDU2KScpLFxuICAgICAgY2hlY2s6IHRoaXMucGFzc3dvcmRTdHJlbmd0aENoZWNrZXIuaGFzTnVtYmVycyxcbiAgICAgIGljb246ICcnLFxuICAgICAgY29udGV4dHVhbENvbG9yOiAnJ1xuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6IGdldHRleHQoJ0luY2x1ZGUgc3ltYm9scyAoZm9yIGV4YW1wbGUsICFAIyQlXiknKSxcbiAgICAgIGNoZWNrOiB0aGlzLnBhc3N3b3JkU3RyZW5ndGhDaGVja2VyLmhhc1NwZWNpYWxDaGFycyxcbiAgICAgIGljb246ICcnLFxuICAgICAgY29udGV4dHVhbENvbG9yOiAnJ1xuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6IGdldHRleHQoJ011c3QgaGF2ZSBhdCBsZWFzdCB7e2xlbmd0aH19IGNoYXJhY3RlcnMnKSxcbiAgICAgIGNoZWNrOiBwYXNzd29yZCA9PiBwYXNzd29yZC5sZW5ndGggPj0gdGhpcy5taW5HcmVlbkxlbmd0aCxcbiAgICAgIGljb246ICcnLFxuICAgICAgY29udGV4dHVhbENvbG9yOiAnJ1xuICAgIH1cbiAgXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgbG9naW5TZXJ2aWNlOiBMb2dpblNlcnZpY2UsXG4gICAgcHJpdmF0ZSBwYXNzd29yZFN0cmVuZ3RoQ2hlY2tlcjogUGFzc3dvcmRTZXJ2aWNlLFxuICAgIHByaXZhdGUgcGFzc3dvcmRTZXJ2aWNlOiBQYXNzd29yZFNlcnZpY2VcbiAgKSB7fVxuXG4gIGFzeW5jIG5nT25Jbml0KCkge1xuICAgIHRoaXMubWluR3JlZW5MZW5ndGggPSBhd2FpdCB0aGlzLmxvZ2luU2VydmljZS5nZXRHcmVlbk1pbkxlbmd0aCgpO1xuICAgIGlmICghdGhpcy5taW5HcmVlbkxlbmd0aCkge1xuICAgICAgdGhpcy5taW5HcmVlbkxlbmd0aCA9IHRoaXMucGFzc3dvcmRTZXJ2aWNlLmdldERlZmF1bHRQYXNzd29yZE1pbkxlbmd0aCgpO1xuICAgIH1cbiAgfVxuXG4gIGdldCB0cmFuc2xhdGVQYXJhbXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlbmd0aDogdGhpcy5taW5HcmVlbkxlbmd0aFxuICAgIH07XG4gIH1cblxuICBvblBhc3N3b3JkQ2hhbmdlKHBhc3N3b3JkKSB7XG4gICAgdGhpcy5jaGVja2xpc3QgPSBtYXAodGhpcy5jaGVja2xpc3QsIHJlcXVpcmVtZW50ID0+IHtcbiAgICAgIGNvbnN0IGNoZWNrZWQgPSByZXF1aXJlbWVudC5jaGVjayhwYXNzd29yZCk7XG4gICAgICBhc3NpZ24ocmVxdWlyZW1lbnQsIHtcbiAgICAgICAgaWNvbjogY2hlY2tlZCA/ICdjaGVjay1jaXJjbGUnIDogJycsXG4gICAgICAgIGNvbnRleHR1YWxDb2xvcjogY2hlY2tlZCA/ICcnIDogJ3RleHQtbXV0ZWQnXG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXF1aXJlbWVudDtcbiAgICB9KTtcbiAgfVxufVxuIiwiPGRpdj5cbiAgPHNwYW4gY2xhc3M9XCJzbWFsbFwiPnt7ICdQbGVhc2UgbWVldCA1IG91dCBvZiB0aGUgNSBjb25kaXRpb25zIGJlbG93JyB8IHRyYW5zbGF0ZSB9fTo8L3NwYW4+XG4gIDx1bCBjbGFzcz1cImxpc3QtdW5zdHlsZWRcIj5cbiAgICA8bGkgY2xhc3M9XCJzbWFsbFwiICpuZ0Zvcj1cImxldCByZXF1aXJlbWVudCBvZiBjaGVja2xpc3RcIj5cbiAgICAgIDxpIFtjOHlJY29uXT1cInJlcXVpcmVtZW50Lmljb25cIiBjbGFzcz1cInRleHQtc3VjY2Vzc1wiPjwvaT5cbiAgICAgIDxzcGFuXG4gICAgICAgIGNsYXNzPVwic21hbGwge3sgcmVxdWlyZW1lbnQuY29udGV4dHVhbENvbG9yIH19XCJcbiAgICAgICAgW3RyYW5zbGF0ZV09XCJyZXF1aXJlbWVudC5sYWJlbFwiXG4gICAgICAgIFt0cmFuc2xhdGVQYXJhbXNdPVwidGhpcy50cmFuc2xhdGVQYXJhbXNcIlxuICAgICAgPjwvc3Bhbj5cbiAgICA8L2xpPlxuICA8L3VsPlxuPC9kaXY+XG4iXX0=