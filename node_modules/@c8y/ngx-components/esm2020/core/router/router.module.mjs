import { NgModule } from '@angular/core';
import { RouterModule as NgRouterModule, ROUTER_CONFIGURATION, ROUTES } from '@angular/router';
import { RouterService } from './router.service';
import { ContextRouteComponent } from './context-route.component';
import { HeaderModule } from '../header/header.module';
import { CommonModule } from '../common/common.module';
import { ContextRouteGuard } from './context-route.guard';
import { ViewContext } from './router.model';
import { RouterTabsResolver } from './router-tabs.resolver';
import { EmptyComponent } from './empty.component';
import * as i0 from "@angular/core";
import * as i1 from "./router.service";
import * as i2 from "@angular/router";
export const extraRoutes = [
    {
        path: 'users/new',
        component: EmptyComponent
    },
    {
        path: 'tenants/new',
        component: EmptyComponent
    }
];
// tslint:disable-next-line: forin
for (const key in ViewContext) {
    const context = ViewContext[key];
    extraRoutes.push({
        path: context,
        component: ContextRouteComponent,
        canActivate: [ContextRouteGuard],
        data: { context, contextData: {} },
        resolve: {
            tabs: RouterTabsResolver
            // contextData: ContextRouteGuard
        }
    });
}
/**
 * A C8Y router implementation. It implements some default routes needed
 * as well as context routes. Context routes are useful, if you want to
 * use context data on a certain view (e.g. a device), then this routes
 * automatically resolve the associated managed object.
 *
 * You can use this in combination of the Angular default RouterModule
 * or use only this module. Context routes can only be added via the
 * HOOK_ROUTES hook.
 */
export class RouterModule {
    constructor(routerService) {
        this.routerService = routerService;
        // Declared but never used is intended: to always have a instance of RouterService.
    }
    /**
     * Same interface as @angular/router module.
     * @param routes The configured routes.
     * @param config The router default configuration.
     * @returns The module and providers.
     */
    static forRoot(routes = [], config) {
        const providers = [
            { provide: ROUTES, multi: true, useValue: extraRoutes },
            { provide: ROUTES, multi: true, useValue: routes }
        ];
        if (config) {
            providers.push({
                provide: ROUTER_CONFIGURATION,
                useValue: config ? config : {}
            });
        }
        return {
            ngModule: RouterModule,
            providers
        };
    }
}
RouterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: RouterModule, deps: [{ token: i1.RouterService }], target: i0.ɵɵFactoryTarget.NgModule });
RouterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.0.6", ngImport: i0, type: RouterModule, declarations: [ContextRouteComponent, EmptyComponent], imports: [i2.RouterModule, HeaderModule, CommonModule] });
RouterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: RouterModule, imports: [NgRouterModule.forChild(extraRoutes), HeaderModule, CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: RouterModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ContextRouteComponent, EmptyComponent],
                    imports: [NgRouterModule.forChild(extraRoutes), HeaderModule, CommonModule]
                }]
        }], ctorParameters: function () { return [{ type: i1.RouterService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvcm91dGVyL3JvdXRlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF1QixRQUFRLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUVMLFlBQVksSUFBSSxjQUFjLEVBQzlCLG9CQUFvQixFQUNwQixNQUFNLEVBRVAsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsV0FBVyxFQUFTLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7O0FBRW5ELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBWTtJQUNsQztRQUNFLElBQUksRUFBRSxXQUFXO1FBQ2pCLFNBQVMsRUFBRSxjQUFjO0tBQzFCO0lBQ0Q7UUFDRSxJQUFJLEVBQUUsYUFBYTtRQUNuQixTQUFTLEVBQUUsY0FBYztLQUMxQjtDQUNGLENBQUM7QUFDRixrQ0FBa0M7QUFDbEMsS0FBSyxNQUFNLEdBQUcsSUFBSSxXQUFXLEVBQUU7SUFDN0IsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFDZixJQUFJLEVBQUUsT0FBTztRQUNiLFNBQVMsRUFBRSxxQkFBcUI7UUFDaEMsV0FBVyxFQUFFLENBQUMsaUJBQWlCLENBQUM7UUFDaEMsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUU7UUFDbEMsT0FBTyxFQUFFO1lBQ1AsSUFBSSxFQUFFLGtCQUFrQjtZQUN4QixpQ0FBaUM7U0FDbEM7S0FDRixDQUFDLENBQUM7Q0FDSjtBQUVEOzs7Ozs7Ozs7R0FTRztBQUtILE1BQU0sT0FBTyxZQUFZO0lBMEJ2QixZQUFvQixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUM5QyxtRkFBbUY7SUFDckYsQ0FBQztJQTNCRDs7Ozs7T0FLRztJQUNILE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBaUIsRUFBRSxFQUFFLE1BQXFCO1FBQ3ZELE1BQU0sU0FBUyxHQUFlO1lBQzVCLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUU7WUFDdkQsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtTQUNuRCxDQUFDO1FBRUYsSUFBSSxNQUFNLEVBQUU7WUFDVixTQUFTLENBQUMsSUFBSSxDQUFDO2dCQUNiLE9BQU8sRUFBRSxvQkFBb0I7Z0JBQzdCLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTthQUMvQixDQUFDLENBQUM7U0FDSjtRQUVELE9BQU87WUFDTCxRQUFRLEVBQUUsWUFBWTtZQUN0QixTQUFTO1NBQ1YsQ0FBQztJQUNKLENBQUM7O3lHQXhCVSxZQUFZOzBHQUFaLFlBQVksaUJBSFIscUJBQXFCLEVBQUUsY0FBYyw4QkFDSixZQUFZLEVBQUUsWUFBWTswR0FFL0QsWUFBWSxZQUZiLGNBQWMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEVBQUUsWUFBWSxFQUFFLFlBQVk7MkZBRS9ELFlBQVk7a0JBSnhCLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMscUJBQXFCLEVBQUUsY0FBYyxDQUFDO29CQUNyRCxPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFlBQVksRUFBRSxZQUFZLENBQUM7aUJBQzVFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUsIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBFeHRyYU9wdGlvbnMsXG4gIFJvdXRlck1vZHVsZSBhcyBOZ1JvdXRlck1vZHVsZSxcbiAgUk9VVEVSX0NPTkZJR1VSQVRJT04sXG4gIFJPVVRFUyxcbiAgUm91dGVzXG59IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBSb3V0ZXJTZXJ2aWNlIH0gZnJvbSAnLi9yb3V0ZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDb250ZXh0Um91dGVDb21wb25lbnQgfSBmcm9tICcuL2NvbnRleHQtcm91dGUuY29tcG9uZW50JztcbmltcG9ydCB7IEhlYWRlck1vZHVsZSB9IGZyb20gJy4uL2hlYWRlci9oZWFkZXIubW9kdWxlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJy4uL2NvbW1vbi9jb21tb24ubW9kdWxlJztcbmltcG9ydCB7IENvbnRleHRSb3V0ZUd1YXJkIH0gZnJvbSAnLi9jb250ZXh0LXJvdXRlLmd1YXJkJztcbmltcG9ydCB7IFZpZXdDb250ZXh0LCBSb3V0ZSB9IGZyb20gJy4vcm91dGVyLm1vZGVsJztcbmltcG9ydCB7IFJvdXRlclRhYnNSZXNvbHZlciB9IGZyb20gJy4vcm91dGVyLXRhYnMucmVzb2x2ZXInO1xuaW1wb3J0IHsgRW1wdHlDb21wb25lbnQgfSBmcm9tICcuL2VtcHR5LmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCBleHRyYVJvdXRlczogUm91dGVbXSA9IFtcbiAge1xuICAgIHBhdGg6ICd1c2Vycy9uZXcnLFxuICAgIGNvbXBvbmVudDogRW1wdHlDb21wb25lbnRcbiAgfSxcbiAge1xuICAgIHBhdGg6ICd0ZW5hbnRzL25ldycsXG4gICAgY29tcG9uZW50OiBFbXB0eUNvbXBvbmVudFxuICB9XG5dO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBmb3JpblxuZm9yIChjb25zdCBrZXkgaW4gVmlld0NvbnRleHQpIHtcbiAgY29uc3QgY29udGV4dCA9IFZpZXdDb250ZXh0W2tleV07XG4gIGV4dHJhUm91dGVzLnB1c2goe1xuICAgIHBhdGg6IGNvbnRleHQsXG4gICAgY29tcG9uZW50OiBDb250ZXh0Um91dGVDb21wb25lbnQsXG4gICAgY2FuQWN0aXZhdGU6IFtDb250ZXh0Um91dGVHdWFyZF0sXG4gICAgZGF0YTogeyBjb250ZXh0LCBjb250ZXh0RGF0YToge30gfSxcbiAgICByZXNvbHZlOiB7XG4gICAgICB0YWJzOiBSb3V0ZXJUYWJzUmVzb2x2ZXJcbiAgICAgIC8vIGNvbnRleHREYXRhOiBDb250ZXh0Um91dGVHdWFyZFxuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQSBDOFkgcm91dGVyIGltcGxlbWVudGF0aW9uLiBJdCBpbXBsZW1lbnRzIHNvbWUgZGVmYXVsdCByb3V0ZXMgbmVlZGVkXG4gKiBhcyB3ZWxsIGFzIGNvbnRleHQgcm91dGVzLiBDb250ZXh0IHJvdXRlcyBhcmUgdXNlZnVsLCBpZiB5b3Ugd2FudCB0b1xuICogdXNlIGNvbnRleHQgZGF0YSBvbiBhIGNlcnRhaW4gdmlldyAoZS5nLiBhIGRldmljZSksIHRoZW4gdGhpcyByb3V0ZXNcbiAqIGF1dG9tYXRpY2FsbHkgcmVzb2x2ZSB0aGUgYXNzb2NpYXRlZCBtYW5hZ2VkIG9iamVjdC5cbiAqXG4gKiBZb3UgY2FuIHVzZSB0aGlzIGluIGNvbWJpbmF0aW9uIG9mIHRoZSBBbmd1bGFyIGRlZmF1bHQgUm91dGVyTW9kdWxlXG4gKiBvciB1c2Ugb25seSB0aGlzIG1vZHVsZS4gQ29udGV4dCByb3V0ZXMgY2FuIG9ubHkgYmUgYWRkZWQgdmlhIHRoZVxuICogSE9PS19ST1VURVMgaG9vay5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbQ29udGV4dFJvdXRlQ29tcG9uZW50LCBFbXB0eUNvbXBvbmVudF0sXG4gIGltcG9ydHM6IFtOZ1JvdXRlck1vZHVsZS5mb3JDaGlsZChleHRyYVJvdXRlcyksIEhlYWRlck1vZHVsZSwgQ29tbW9uTW9kdWxlXVxufSlcbmV4cG9ydCBjbGFzcyBSb3V0ZXJNb2R1bGUge1xuICAvKipcbiAgICogU2FtZSBpbnRlcmZhY2UgYXMgQGFuZ3VsYXIvcm91dGVyIG1vZHVsZS5cbiAgICogQHBhcmFtIHJvdXRlcyBUaGUgY29uZmlndXJlZCByb3V0ZXMuXG4gICAqIEBwYXJhbSBjb25maWcgVGhlIHJvdXRlciBkZWZhdWx0IGNvbmZpZ3VyYXRpb24uXG4gICAqIEByZXR1cm5zIFRoZSBtb2R1bGUgYW5kIHByb3ZpZGVycy5cbiAgICovXG4gIHN0YXRpYyBmb3JSb290KHJvdXRlczogUm91dGVzID0gW10sIGNvbmZpZz86IEV4dHJhT3B0aW9ucyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8Um91dGVyTW9kdWxlPiB7XG4gICAgY29uc3QgcHJvdmlkZXJzOiBQcm92aWRlcltdID0gW1xuICAgICAgeyBwcm92aWRlOiBST1VURVMsIG11bHRpOiB0cnVlLCB1c2VWYWx1ZTogZXh0cmFSb3V0ZXMgfSxcbiAgICAgIHsgcHJvdmlkZTogUk9VVEVTLCBtdWx0aTogdHJ1ZSwgdXNlVmFsdWU6IHJvdXRlcyB9XG4gICAgXTtcblxuICAgIGlmIChjb25maWcpIHtcbiAgICAgIHByb3ZpZGVycy5wdXNoKHtcbiAgICAgICAgcHJvdmlkZTogUk9VVEVSX0NPTkZJR1VSQVRJT04sXG4gICAgICAgIHVzZVZhbHVlOiBjb25maWcgPyBjb25maWcgOiB7fVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBSb3V0ZXJNb2R1bGUsXG4gICAgICBwcm92aWRlcnNcbiAgICB9O1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXJTZXJ2aWNlOiBSb3V0ZXJTZXJ2aWNlKSB7XG4gICAgLy8gRGVjbGFyZWQgYnV0IG5ldmVyIHVzZWQgaXMgaW50ZW5kZWQ6IHRvIGFsd2F5cyBoYXZlIGEgaW5zdGFuY2Ugb2YgUm91dGVyU2VydmljZS5cbiAgfVxufVxuIl19