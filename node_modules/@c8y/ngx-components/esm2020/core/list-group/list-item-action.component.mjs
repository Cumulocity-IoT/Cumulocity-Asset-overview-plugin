import { Component, EventEmitter, forwardRef, HostListener, Input, Output, ViewChild } from '@angular/core';
import { assignWith } from 'lodash-es';
import { GainsightService } from '../product-experience/gainsight.service';
import { PRODUCT_EXPERIENCE_EVENT_SOURCE } from '../product-experience/product-experience.model';
import * as i0 from "@angular/core";
import * as i1 from "../product-experience/gainsight.service";
import * as i2 from "../common/icon.directive";
import * as i3 from "@angular/common";
import * as i4 from "../i18n/c8y-translate.pipe";
/**
 * Actions are functions that can be executed on the
 * current list item. They are displayed next to the
 * item and can be grouped in a dropdown.
 *
 * @example
 * ```html
 * <c8y-li>
 *   <c8y-li-action (click)="deleteDevice(device.id)" icon="times">
 *     Delete
 *   </c8y-li-action>
 *   <c8y-li-action (click)="(false)" icon="rocket">
 *     Launch to space
 *   </c8y-li-action>
 * </c8y-li>
 * ```
 */
export class ListItemActionComponent {
    constructor(gainsightService) {
        this.gainsightService = gainsightService;
        /**
         * An EventEmitter to determine what to do if the
         * action is triggered.
         */
        this.click = new EventEmitter();
    }
    onClick(event) {
        const element = event.closest('[title]') || event.closest('[uib-tooltip]');
        if (!element) {
            return;
        }
        const eventName = this.productExperienceEvent?.eventName || 'listItemAction';
        const actionName = element.getAttribute('title') || element.getAttribute('uib-tooltip');
        const action = this.gainsightService.translateToEnglish(actionName);
        // Assign url and action to event data only if they are not already defined
        const eventData = assignWith(this.productExperienceEvent?.data, {
            url: element.baseURI,
            action
        }, (targetVal, sourceVal) => sourceVal ?? targetVal);
        this.gainsightService.triggerEvent(eventName, eventData);
    }
}
ListItemActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: ListItemActionComponent, deps: [{ token: i1.GainsightService }], target: i0.ɵɵFactoryTarget.Component });
ListItemActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.6", type: ListItemActionComponent, selector: "c8y-list-item-action, c8y-li-action", inputs: { label: "label", icon: "icon" }, outputs: { click: "click" }, host: { listeners: { "click": "onClick($event.target)" } }, providers: [
        {
            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
            useExisting: forwardRef(() => ListItemActionComponent)
        }
    ], viewQueries: [{ propertyName: "template", first: true, predicate: ["template"], descendants: true }], ngImport: i0, template: "<ng-template #template>\n  <li>\n    <button title=\"{{ label | translate }}\" (click)=\"click.emit($event)\">\n      <i [c8yIcon]=\"icon\" *ngIf=\"icon\"></i>&nbsp;\n      <span *ngIf=\"label\">{{ label | translate }}</span>\n      <ng-content></ng-content>\n    </button>\n  </li>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i2.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i4.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: ListItemActionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-list-item-action, c8y-li-action', providers: [
                        {
                            provide: PRODUCT_EXPERIENCE_EVENT_SOURCE,
                            useExisting: forwardRef(() => ListItemActionComponent)
                        }
                    ], template: "<ng-template #template>\n  <li>\n    <button title=\"{{ label | translate }}\" (click)=\"click.emit($event)\">\n      <i [c8yIcon]=\"icon\" *ngIf=\"icon\"></i>&nbsp;\n      <span *ngIf=\"label\">{{ label | translate }}</span>\n      <ng-content></ng-content>\n    </button>\n  </li>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.GainsightService }]; }, propDecorators: { template: [{
                type: ViewChild,
                args: ['template', { static: false }]
            }], label: [{
                type: Input
            }], icon: [{
                type: Input
            }], click: [{
                type: Output
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event.target']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1pdGVtLWFjdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2xpc3QtZ3JvdXAvbGlzdC1pdGVtLWFjdGlvbi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9jb3JlL2xpc3QtZ3JvdXAvbGlzdC1pdGVtLWFjdGlvbi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixVQUFVLEVBQ1YsWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEVBQ04sU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDM0UsT0FBTyxFQUdMLCtCQUErQixFQUNoQyxNQUFNLGdEQUFnRCxDQUFDOzs7Ozs7QUFFeEQ7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFXSCxNQUFNLE9BQU8sdUJBQXVCO0lBMEJsQyxZQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQVR0RDs7O1dBR0c7UUFFSCxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQUl5QixDQUFDO0lBRzFELE9BQU8sQ0FBQyxLQUFrQjtRQUN4QixNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDM0UsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE9BQU87U0FDUjtRQUNELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxTQUFTLElBQUksZ0JBQWdCLENBQUM7UUFDN0UsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3hGLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRSwyRUFBMkU7UUFDM0UsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUMxQixJQUFJLENBQUMsc0JBQXNCLEVBQUUsSUFBSSxFQUNqQztZQUNFLEdBQUcsRUFBRSxPQUFPLENBQUMsT0FBTztZQUNwQixNQUFNO1NBQ1AsRUFDRCxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQ2pELENBQUM7UUFFRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMzRCxDQUFDOztvSEFoRFUsdUJBQXVCO3dHQUF2Qix1QkFBdUIsaU1BUHZCO1FBQ1Q7WUFDRSxPQUFPLEVBQUUsK0JBQStCO1lBQ3hDLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUM7U0FDdkQ7S0FDRixnSUMxQ0gsOFNBU0E7MkZEbUNhLHVCQUF1QjtrQkFWbkMsU0FBUzsrQkFDRSxxQ0FBcUMsYUFFcEM7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLCtCQUErQjs0QkFDeEMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsd0JBQXdCLENBQUM7eUJBQ3ZEO3FCQUNGO3VHQU9ELFFBQVE7c0JBRFAsU0FBUzt1QkFBQyxVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO2dCQU94QyxLQUFLO3NCQURKLEtBQUs7Z0JBTU4sSUFBSTtzQkFESCxLQUFLO2dCQU9OLEtBQUs7c0JBREosTUFBTTtnQkFRUCxPQUFPO3NCQUROLFlBQVk7dUJBQUMsT0FBTyxFQUFFLENBQUMsZUFBZSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIGZvcndhcmRSZWYsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgVmlld0NoaWxkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgYXNzaWduV2l0aCB9IGZyb20gJ2xvZGFzaC1lcyc7XG5pbXBvcnQgeyBHYWluc2lnaHRTZXJ2aWNlIH0gZnJvbSAnLi4vcHJvZHVjdC1leHBlcmllbmNlL2dhaW5zaWdodC5zZXJ2aWNlJztcbmltcG9ydCB7XG4gIFByb2R1Y3RFeHBlcmllbmNlRXZlbnQsXG4gIFByb2R1Y3RFeHBlcmllbmNlRXZlbnRTb3VyY2UsXG4gIFBST0RVQ1RfRVhQRVJJRU5DRV9FVkVOVF9TT1VSQ0Vcbn0gZnJvbSAnLi4vcHJvZHVjdC1leHBlcmllbmNlL3Byb2R1Y3QtZXhwZXJpZW5jZS5tb2RlbCc7XG5cbi8qKlxuICogQWN0aW9ucyBhcmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIGV4ZWN1dGVkIG9uIHRoZVxuICogY3VycmVudCBsaXN0IGl0ZW0uIFRoZXkgYXJlIGRpc3BsYXllZCBuZXh0IHRvIHRoZVxuICogaXRlbSBhbmQgY2FuIGJlIGdyb3VwZWQgaW4gYSBkcm9wZG93bi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgaHRtbFxuICogPGM4eS1saT5cbiAqICAgPGM4eS1saS1hY3Rpb24gKGNsaWNrKT1cImRlbGV0ZURldmljZShkZXZpY2UuaWQpXCIgaWNvbj1cInRpbWVzXCI+XG4gKiAgICAgRGVsZXRlXG4gKiAgIDwvYzh5LWxpLWFjdGlvbj5cbiAqICAgPGM4eS1saS1hY3Rpb24gKGNsaWNrKT1cIihmYWxzZSlcIiBpY29uPVwicm9ja2V0XCI+XG4gKiAgICAgTGF1bmNoIHRvIHNwYWNlXG4gKiAgIDwvYzh5LWxpLWFjdGlvbj5cbiAqIDwvYzh5LWxpPlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2M4eS1saXN0LWl0ZW0tYWN0aW9uLCBjOHktbGktYWN0aW9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xpc3QtaXRlbS1hY3Rpb24uY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBQUk9EVUNUX0VYUEVSSUVOQ0VfRVZFTlRfU09VUkNFLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTGlzdEl0ZW1BY3Rpb25Db21wb25lbnQpXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIExpc3RJdGVtQWN0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgUHJvZHVjdEV4cGVyaWVuY2VFdmVudFNvdXJjZSB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBAVmlld0NoaWxkKCd0ZW1wbGF0ZScsIHsgc3RhdGljOiBmYWxzZSB9KVxuICB0ZW1wbGF0ZTogYW55O1xuICAvKipcbiAgICogVGhlIGxhYmVsIHRvIGRpc3BsYXkgKHlvdSBjYW4gYWx0ZXJuYXRpdmVseSB1c2VcbiAgICogY29udGVudCBwcm9qZWN0aW9uIHRvIGRpc3BsYXkgdGhlIGxhYmVsKS5cbiAgICovXG4gIEBJbnB1dCgpXG4gIGxhYmVsOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgaWNvbiB0byB1c2VcbiAgICovXG4gIEBJbnB1dCgpXG4gIGljb246IHN0cmluZztcbiAgLyoqXG4gICAqIEFuIEV2ZW50RW1pdHRlciB0byBkZXRlcm1pbmUgd2hhdCB0byBkbyBpZiB0aGVcbiAgICogYWN0aW9uIGlzIHRyaWdnZXJlZC5cbiAgICovXG4gIEBPdXRwdXQoKVxuICBjbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIHByb2R1Y3RFeHBlcmllbmNlRXZlbnQ6IFByb2R1Y3RFeHBlcmllbmNlRXZlbnQ7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBnYWluc2lnaHRTZXJ2aWNlOiBHYWluc2lnaHRTZXJ2aWNlKSB7fVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQudGFyZ2V0J10pXG4gIG9uQ2xpY2soZXZlbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGV2ZW50LmNsb3Nlc3QoJ1t0aXRsZV0nKSB8fCBldmVudC5jbG9zZXN0KCdbdWliLXRvb2x0aXBdJyk7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50TmFtZSA9IHRoaXMucHJvZHVjdEV4cGVyaWVuY2VFdmVudD8uZXZlbnROYW1lIHx8ICdsaXN0SXRlbUFjdGlvbic7XG4gICAgY29uc3QgYWN0aW9uTmFtZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd1aWItdG9vbHRpcCcpO1xuICAgIGNvbnN0IGFjdGlvbiA9IHRoaXMuZ2FpbnNpZ2h0U2VydmljZS50cmFuc2xhdGVUb0VuZ2xpc2goYWN0aW9uTmFtZSk7XG4gICAgLy8gQXNzaWduIHVybCBhbmQgYWN0aW9uIHRvIGV2ZW50IGRhdGEgb25seSBpZiB0aGV5IGFyZSBub3QgYWxyZWFkeSBkZWZpbmVkXG4gICAgY29uc3QgZXZlbnREYXRhID0gYXNzaWduV2l0aChcbiAgICAgIHRoaXMucHJvZHVjdEV4cGVyaWVuY2VFdmVudD8uZGF0YSxcbiAgICAgIHtcbiAgICAgICAgdXJsOiBlbGVtZW50LmJhc2VVUkksXG4gICAgICAgIGFjdGlvblxuICAgICAgfSxcbiAgICAgICh0YXJnZXRWYWwsIHNvdXJjZVZhbCkgPT4gc291cmNlVmFsID8/IHRhcmdldFZhbFxuICAgICk7XG5cbiAgICB0aGlzLmdhaW5zaWdodFNlcnZpY2UudHJpZ2dlckV2ZW50KGV2ZW50TmFtZSwgZXZlbnREYXRhKTtcbiAgfVxufVxuIiwiPG5nLXRlbXBsYXRlICN0ZW1wbGF0ZT5cbiAgPGxpPlxuICAgIDxidXR0b24gdGl0bGU9XCJ7eyBsYWJlbCB8IHRyYW5zbGF0ZSB9fVwiIChjbGljayk9XCJjbGljay5lbWl0KCRldmVudClcIj5cbiAgICAgIDxpIFtjOHlJY29uXT1cImljb25cIiAqbmdJZj1cImljb25cIj48L2k+Jm5ic3A7XG4gICAgICA8c3BhbiAqbmdJZj1cImxhYmVsXCI+e3sgbGFiZWwgfCB0cmFuc2xhdGUgfX08L3NwYW4+XG4gICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgPC9idXR0b24+XG4gIDwvbGk+XG48L25nLXRlbXBsYXRlPlxuIl19