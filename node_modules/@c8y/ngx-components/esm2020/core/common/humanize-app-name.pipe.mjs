import { Pipe } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { of } from 'rxjs';
import { gettext } from '../i18n/gettext';
import { get, find, negate, isUndefined } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
/*
 * Humanize an application name and translates it.
 * Usage:
 *   appNameOrApp | humanizeAppName | async
 */
export class HumanizeAppNamePipe {
    constructor(translateService) {
        this.translateService = translateService;
        this.internalApps = {
            administration: gettext('Administration'),
            cockpit: gettext('Cockpit'),
            devicemanagement: gettext('Device management'),
            'digital-twin-manager': gettext('Digital twin manager'),
            streaminganalytics: gettext('Streaming Analytics')
        };
    }
    transform(appNameOrApp) {
        if (!appNameOrApp) {
            return of('');
        }
        const appName = this.getAppName(appNameOrApp);
        let text;
        if (this.isPublicApp(appNameOrApp)) {
            text = gettext('{{ appName | translate }} (public)');
        }
        else {
            text = appName;
        }
        return this.translateService.stream(text, { appName });
    }
    getAppName(appNameOrApp) {
        const appName = this.getFirstDefined([
            get(appNameOrApp, 'name'),
            get(appNameOrApp, 'contextPath'),
            typeof appNameOrApp === 'string' ? appNameOrApp : undefined,
            gettext('<no name>')
        ]);
        return this.internalApps[appName] || this.humanize(appName);
    }
    getFirstDefined(values) {
        return find(values, negate(isUndefined));
    }
    isPublicApp(appNameOrApp) {
        return Boolean(get(appNameOrApp, 'public'));
    }
    humanize(str = '') {
        const result = str.replace(/_/g, ' ').split('');
        result[0] = (result[0] || '').toUpperCase();
        return result.join('');
    }
}
HumanizeAppNamePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: HumanizeAppNamePipe, deps: [{ token: i1.TranslateService }], target: i0.ɵɵFactoryTarget.Pipe });
HumanizeAppNamePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "14.0.6", ngImport: i0, type: HumanizeAppNamePipe, name: "humanizeAppName" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: HumanizeAppNamePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'humanizeAppName' }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHVtYW5pemUtYXBwLW5hbWUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2NvcmUvY29tbW9uL2h1bWFuaXplLWFwcC1uYW1lLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFcEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQzs7O0FBRTNEOzs7O0dBSUc7QUFFSCxNQUFNLE9BQU8sbUJBQW1CO0lBUzlCLFlBQW9CLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBUjlDLGlCQUFZLEdBQUc7WUFDckIsY0FBYyxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztZQUN6QyxPQUFPLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUMzQixnQkFBZ0IsRUFBRSxPQUFPLENBQUMsbUJBQW1CLENBQUM7WUFDOUMsc0JBQXNCLEVBQUUsT0FBTyxDQUFDLHNCQUFzQixDQUFDO1lBQ3ZELGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztTQUNuRCxDQUFDO0lBRXVELENBQUM7SUFFMUQsU0FBUyxDQUFDLFlBQW9DO1FBQzVDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDakIsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDZjtRQUVELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFOUMsSUFBSSxJQUFJLENBQUM7UUFDVCxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDbEMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1NBQ3REO2FBQU07WUFDTCxJQUFJLEdBQUcsT0FBTyxDQUFDO1NBQ2hCO1FBQ0QsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVPLFVBQVUsQ0FBQyxZQUFvQztRQUNyRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO1lBQ25DLEdBQUcsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDO1lBQ3pCLEdBQUcsQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDO1lBQ2hDLE9BQU8sWUFBWSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxTQUFTO1lBQzNELE9BQU8sQ0FBQyxXQUFXLENBQUM7U0FDckIsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVPLGVBQWUsQ0FBQyxNQUFNO1FBQzVCLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU8sV0FBVyxDQUFDLFlBQW1DO1FBQ3JELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRU8sUUFBUSxDQUFDLEdBQUcsR0FBRyxFQUFFO1FBQ3ZCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDNUMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7O2dIQWpEVSxtQkFBbUI7OEdBQW5CLG1CQUFtQjsyRkFBbkIsbUJBQW1CO2tCQUQvQixJQUFJO21CQUFDLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUFwcGxpY2F0aW9uIH0gZnJvbSAnQGM4eS9jbGllbnQnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGdldHRleHQgfSBmcm9tICcuLi9pMThuL2dldHRleHQnO1xuaW1wb3J0IHsgZ2V0LCBmaW5kLCBuZWdhdGUsIGlzVW5kZWZpbmVkIH0gZnJvbSAnbG9kYXNoLWVzJztcblxuLypcbiAqIEh1bWFuaXplIGFuIGFwcGxpY2F0aW9uIG5hbWUgYW5kIHRyYW5zbGF0ZXMgaXQuXG4gKiBVc2FnZTpcbiAqICAgYXBwTmFtZU9yQXBwIHwgaHVtYW5pemVBcHBOYW1lIHwgYXN5bmNcbiAqL1xuQFBpcGUoeyBuYW1lOiAnaHVtYW5pemVBcHBOYW1lJyB9KVxuZXhwb3J0IGNsYXNzIEh1bWFuaXplQXBwTmFtZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgcHJpdmF0ZSBpbnRlcm5hbEFwcHMgPSB7XG4gICAgYWRtaW5pc3RyYXRpb246IGdldHRleHQoJ0FkbWluaXN0cmF0aW9uJyksXG4gICAgY29ja3BpdDogZ2V0dGV4dCgnQ29ja3BpdCcpLFxuICAgIGRldmljZW1hbmFnZW1lbnQ6IGdldHRleHQoJ0RldmljZSBtYW5hZ2VtZW50JyksXG4gICAgJ2RpZ2l0YWwtdHdpbi1tYW5hZ2VyJzogZ2V0dGV4dCgnRGlnaXRhbCB0d2luIG1hbmFnZXInKSxcbiAgICBzdHJlYW1pbmdhbmFseXRpY3M6IGdldHRleHQoJ1N0cmVhbWluZyBBbmFseXRpY3MnKVxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSkge31cblxuICB0cmFuc2Zvcm0oYXBwTmFtZU9yQXBwPzogSUFwcGxpY2F0aW9uIHwgc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICBpZiAoIWFwcE5hbWVPckFwcCkge1xuICAgICAgcmV0dXJuIG9mKCcnKTtcbiAgICB9XG5cbiAgICBjb25zdCBhcHBOYW1lID0gdGhpcy5nZXRBcHBOYW1lKGFwcE5hbWVPckFwcCk7XG5cbiAgICBsZXQgdGV4dDtcbiAgICBpZiAodGhpcy5pc1B1YmxpY0FwcChhcHBOYW1lT3JBcHApKSB7XG4gICAgICB0ZXh0ID0gZ2V0dGV4dCgne3sgYXBwTmFtZSB8IHRyYW5zbGF0ZSB9fSAocHVibGljKScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZXh0ID0gYXBwTmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlU2VydmljZS5zdHJlYW0odGV4dCwgeyBhcHBOYW1lIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRBcHBOYW1lKGFwcE5hbWVPckFwcD86IElBcHBsaWNhdGlvbiB8IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgYXBwTmFtZSA9IHRoaXMuZ2V0Rmlyc3REZWZpbmVkKFtcbiAgICAgIGdldChhcHBOYW1lT3JBcHAsICduYW1lJyksXG4gICAgICBnZXQoYXBwTmFtZU9yQXBwLCAnY29udGV4dFBhdGgnKSxcbiAgICAgIHR5cGVvZiBhcHBOYW1lT3JBcHAgPT09ICdzdHJpbmcnID8gYXBwTmFtZU9yQXBwIDogdW5kZWZpbmVkLFxuICAgICAgZ2V0dGV4dCgnPG5vIG5hbWU+JylcbiAgICBdKTtcbiAgICByZXR1cm4gdGhpcy5pbnRlcm5hbEFwcHNbYXBwTmFtZV0gfHwgdGhpcy5odW1hbml6ZShhcHBOYW1lKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Rmlyc3REZWZpbmVkKHZhbHVlcykge1xuICAgIHJldHVybiBmaW5kKHZhbHVlcywgbmVnYXRlKGlzVW5kZWZpbmVkKSk7XG4gIH1cblxuICBwcml2YXRlIGlzUHVibGljQXBwKGFwcE5hbWVPckFwcDogSUFwcGxpY2F0aW9uIHwgc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIEJvb2xlYW4oZ2V0KGFwcE5hbWVPckFwcCwgJ3B1YmxpYycpKTtcbiAgfVxuXG4gIHByaXZhdGUgaHVtYW5pemUoc3RyID0gJycpOiBzdHJpbmcge1xuICAgIGNvbnN0IHJlc3VsdCA9IHN0ci5yZXBsYWNlKC9fL2csICcgJykuc3BsaXQoJycpO1xuICAgIHJlc3VsdFswXSA9IChyZXN1bHRbMF0gfHwgJycpLnRvVXBwZXJDYXNlKCk7XG4gICAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKTtcbiAgfVxufVxuIl19