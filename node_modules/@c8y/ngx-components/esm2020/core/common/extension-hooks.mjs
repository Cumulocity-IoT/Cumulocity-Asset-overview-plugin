import { InjectFlags } from '@angular/core';
import { NavigationEnd } from '@angular/router';
import { castArray, flatten, groupBy, sortBy, uniq } from 'lodash-es';
import { combineLatest, defer, from, isObservable, merge, of, race, Subject, BehaviorSubject } from 'rxjs';
import { filter, map, startWith, switchMap } from 'rxjs/operators';
import { StateService } from './state-service.abstract';
export function fromTrigger(router, refresh, factories) {
    return merge(router.events.pipe(filter(evt => evt instanceof NavigationEnd)), ...castArray(refresh)).pipe(startWith(1), switchMap(() => fromFactories(factories, router)));
}
export function fromTriggerOnce(router, refresh, factories) {
    return merge(...castArray(refresh)).pipe(startWith(1), switchMap(() => fromFactories(factories, router)));
}
export var InjectionType;
(function (InjectionType) {
    InjectionType[InjectionType["COMPONENT"] = 0] = "COMPONENT";
    InjectionType[InjectionType["ROUTE"] = 1] = "ROUTE";
})(InjectionType || (InjectionType = {}));
export function getInjectedHooks(token, injectors, type = InjectionType.COMPONENT) {
    return () => flatten(injectors.map(injector => {
        const factoryOrFactories = injector.get(token, [], InjectFlags.Self);
        const factories = Array.isArray(factoryOrFactories)
            ? flatten(factoryOrFactories)
            : [factoryOrFactories];
        if (injector.scopes?.has('root')) {
            return factories;
        }
        factories.forEach((factory) => {
            if (!factory.get) {
                if (type === InjectionType.ROUTE) {
                    factory._injector = injector;
                }
                else {
                    factory.injector = injector;
                }
            }
        });
        return factories;
    }));
}
export function fromFactories(factories, router, withFirstEmpty = true) {
    return !Array.isArray(factories) || factories.length < 1
        ? of([])
        : defer(() => {
            const factoryObservables = resolveInjectedFactories(factories).map(f => {
                if (Array.isArray(f)) {
                    return toObservableOfArrays(f, withFirstEmpty);
                }
                if (isExtensionFactory(f)) {
                    return toObservableOfArrays(f.get(getActivatedRoute(router)), withFirstEmpty);
                }
                return toObservableOfArrays([f], withFirstEmpty);
            });
            return combineLatest(factoryObservables);
        }).pipe(map(results => sortByPriority([].concat(...results))), map(value => uniq(value)));
}
export function resolveInjectedFactories(factories) {
    return flatten(factories.map(f => {
        if (typeof f === 'function') {
            const func = f;
            return func();
        }
        return [f];
    }));
}
export function stateToFactory(componentsState) {
    const components$ = componentsState.pipe(map((componentSet) => [...componentSet]));
    return { get: () => components$ };
}
export function sortByPriority(items) {
    return sortBy(items, item => -(item?.priority || 0));
}
export function removeDuplicatesIds(items) {
    const grouped = groupBy(items, 'id');
    const itemsWithoutDuplicates = new Array();
    for (const key of Object.keys(grouped)) {
        if (key && key !== 'undefined') {
            const sortedByPrio = sortByPriority(grouped[key]);
            itemsWithoutDuplicates.push(sortedByPrio[0]);
        }
        else {
            itemsWithoutDuplicates.push(...grouped[key]);
        }
    }
    return sortByPriority(itemsWithoutDuplicates);
}
export function toObservableOfArrays(factoryResult, withFirstEmpty) {
    let observable;
    if (!factoryResult) {
        return of([]);
    }
    else {
        observable = toObservable(factoryResult);
        if (withFirstEmpty) {
            const withEmptyFirst = observable.pipe(startWith([]));
            observable = race(observable, withEmptyFirst);
        }
    }
    return observable.pipe(map(result => (Array.isArray(result) ? result : [result]).filter(item => !!item)));
}
export function isPromise(obj) {
    return !!obj && typeof obj.then === 'function';
}
export function isExtensionFactory(obj) {
    return !!obj && typeof obj.get === 'function';
}
/**
 * Converts any value provided to an Observable that emits this value once and then completes.
 * A convenience method to represent all the data as Observables rather than
 * a mixture of Observables and other types.
 *
 * @param value The value the resulting Observable will emit.
 */
export function toObservable(value) {
    if (isObservable(value)) {
        return value;
    }
    if (isPromise(value)) {
        return from(value);
    }
    return of(value);
}
export class ExtensionPointWithoutStateForPlugins {
    constructor(rootInjector, pluginService) {
        this.factories = [];
        this.refreshTrigger = new Subject();
        this.injectors = [rootInjector];
        pluginService.injectors$.subscribe(injector => {
            this.injectors.push(injector);
        });
        this.refresh$ = merge(this.refreshTrigger, pluginService.refresh$);
    }
    /**
     * Refresh the extension factories
     */
    refresh() {
        this.refreshTrigger.next();
    }
}
export class ExtensionPointForPlugins extends StateService {
    constructor(rootInjector, pluginService) {
        super();
        this.factories = [];
        this.state$ = new BehaviorSubject(new Set());
        this.refreshTrigger = new Subject();
        this.injectors = [rootInjector];
        pluginService.injectors$.subscribe(injector => {
            this.injectors.push(injector);
        });
        this.refresh$ = merge(this.refreshTrigger, pluginService.refresh$);
    }
    /**
     * Refresh the extension factories
     */
    refresh() {
        this.refreshTrigger.next();
    }
}
/**
 * Helper function to get the activated route in
 * a service (as ActivatedRoute injection only
 * works in components). Works as long as we only use
 * a tree and no child is active at the same time.
 *
 * @param router The current router
 */
export function getActivatedRoute(router) {
    if (router && router.routerState && router.routerState.root) {
        let route = router.routerState.root;
        while (route.firstChild) {
            route = route.firstChild;
        }
        return route;
    }
}
/**
 * A generic function to be used by specific implementations of the HOOK concept.
 * @param items The items that should be provided under the `useValue` or `useClass` attribute.
 * @param token The InjectionToken/HOOK to be provided.
 * @param multi If this is a multi provider or not (defaults to true).
 * @returns A `Provider` (either `ValueProvider` or `ClassProvider`) to be provided in a module.
 */
export function hookGeneric(items, token, options) {
    const finalOptions = Object.assign({ multi: true, providerType: HookProviderTypes.ClassProvider }, options);
    const { multi, providerType } = finalOptions;
    if (typeof items !== 'function') {
        return {
            provide: token,
            useValue: items,
            multi
        };
    }
    if (providerType === HookProviderTypes.ExistingProvider) {
        return {
            provide: token,
            useExisting: items,
            multi
        };
    }
    return {
        provide: token,
        useClass: items,
        multi
    };
}
export var HookProviderTypes;
(function (HookProviderTypes) {
    HookProviderTypes["ExistingProvider"] = "ExistingProvider";
    HookProviderTypes["ClassProvider"] = "ClassProvider";
})(HookProviderTypes || (HookProviderTypes = {}));
export function allEntriesAreEqual(previous, next) {
    if (previous === next)
        return true;
    if (previous == null || next == null)
        return false;
    if (previous.length !== next.length)
        return false;
    for (let i = 0; i < previous.length; ++i) {
        if (previous[i] !== next[i])
            return false;
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,