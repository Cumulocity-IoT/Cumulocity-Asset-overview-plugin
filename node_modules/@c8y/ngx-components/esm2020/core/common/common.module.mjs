import { ScrollingModule } from '@angular/cdk/scrolling';
import { CommonModule as NgCommonModule } from '@angular/common';
import { APP_INITIALIZER, InjectionToken, NgModule } from '@angular/core';
import { DataModule } from '@c8y/ngx-components/api';
import { TooltipModule } from 'ngx-bootstrap/tooltip';
import { setTheme } from 'ngx-bootstrap/utils';
import { distinctUntilChanged, filter, map, startWith, switchMap } from 'rxjs/operators';
import { I18nModule } from '../i18n/i18n.module';
import { TranslateService } from '../i18n/translate.service';
import { BytesPipe } from './bytes.pipe';
import { DatePipe } from './date.pipe';
import { DropdownDirectionDirective } from './dropdown-direction.directive';
import { EmptyStateComponent } from './empty-state/empty-state.component';
import { ForOfDirective } from './forOf.directive';
import { GetGroupIconPipe } from './get-group-icon.pipe';
import { HumanizeAppNamePipe } from './humanize-app-name.pipe';
import { HumanizePipe } from './humanize.pipe';
import { IconDirective, ICONS } from './icon.directive';
import { IfAllowedDirective } from './if-allowed.directive';
import { LoadMoreComponent } from './load-more.component';
import { LoadingComponent } from './loading.component';
import { MapFunctionPipe } from './map-function.pipe';
import { NumberPipe } from './number.pipe';
import { OperationResultComponent } from './operation-result.component';
import { hookOptions } from './options.service';
import { OutletDirective } from './outlet.directive';
import { ProgressBarComponent } from './progress-bar.component';
import { ShortenUserNamePipe } from './shorten-user-name.pipe';
import { UserNameInitialsPipe } from './user-name-initials.pipe';
import { ShouldShowMoPipe } from './should-show-mo.pipe';
import { ShowIfFilterPipe } from './show-if-filter.pipe';
import { TabsetAriaDirective } from './tabset-aria.directive';
import { TextareaAutoresizeDirective } from './textarea-autoresize.directive';
import { AppStateService } from './ui-state.service';
import { UserPreferencesService } from './user-preferences/user-preferences.service';
import { VirtualScrollWindowDirective } from './virtual-scroll/virtual-scroll-window.directive';
import { VirtualScrollerWrapperComponent } from './virtual-scroll/virtual-scroller-wrapper.component';
import { SkipLinkDirective } from './skip-link.directive';
import { MarkdownToHtmlPipe } from './markdown-to-html.pipe';
import { MoNamePipe } from './mo-name.pipe';
import { GenericFileIconPipe } from './generic-file-icon.pipe';
import { StringifyObjectPipe } from './stringify-object.pipe';
import * as i0 from "@angular/core";
export function initializeServices(translateService, state, userPreferences) {
    const initialize = () => {
        const queryStringLanguage = translateService.queryStringLang();
        const firstLanguage = translateService.firstSupportedLanguage();
        /*
          The ?lang parameter will prevent the user preference language from being activated
        */
        if (queryStringLanguage && translateService.getSupported(queryStringLanguage)) {
            translateService.switchToLanguage(queryStringLanguage);
        }
        else {
            state.currentUser
                .pipe(map(user => user && user.userName), filter(u => !!u), distinctUntilChanged(), switchMap(() => userPreferences.get('language')), startWith(firstLanguage), filter(lang => !!lang), distinctUntilChanged())
                .subscribe(lang => {
                translateService.switchToLanguage(lang);
            });
        }
    };
    return initialize;
}
export const ICON_LIST = new InjectionToken('iconList');
/**
 * Commonly used directives, data access and translation. This module is the shared
 * module across all core components. It should be imported by default.
 *
 * @exports IconDirective A directive to set a c8y icon with [c8yIcon]="'rocket'".
 * @exports OutletDirective A directive which allows to set DOM or Angular templates (used for upgrade).
 * @exports I18nModule Translation module.
 * @exports NgCommonModule Angular common module.
 * @exports DataModule The data layer to allow DI with @c8y/client.
 * @exports HumanizeAppNamePipe Humanize an application name (e.g. in the app switcher).
 * @exports HumanizePipe Humanize a word. E.g. `device management` gets `Device management`.
 * @exports ShouldShowMoPipe Checks if passed managed object is device or group type.
 * @exports GetGroupIconPipe Gets proper group icon.
 * @exports ShortenUserNamePipe Allows a short name. E.g. `Foo Bar` gets `F. Bar`.
 * @exports UserNameInitialsPipe Allows the initials from the name. E.g. `Foo Bar` gets `FB`.
 * @exports ForOfDirective A forOf directive like ngFor but with load-more function.
 * @exports LoadMoreComponent A component to load more data from a certain data-source.
 * @exports ProgressBarComponent Displays either defined or undefined progress.
 * @exports DropdownDirectionDirective Determines if a dropdown opens to the bottom or to the top.
 * @exports TextareaAutoresizeDirective resizes a textarea height as the user inputs.
 * @exports OperationResultComponent displays an animated svg for success and error operations.
 */
export class CommonModule {
    constructor() {
        setTheme('bs3');
    }
    static providers() {
        return [
            ...DataModule.providers(),
            // TODO: maybe we can think of a way to remove this C8Y_APP global
            // tslint:disable-next-line
            hookOptions(window.C8Y_APP || {}),
            {
                provide: APP_INITIALIZER,
                useFactory: initializeServices,
                deps: [TranslateService, AppStateService, UserPreferencesService],
                multi: true
            },
            { provide: ICON_LIST, useValue: ICONS, multi: false },
            ...I18nModule.providers(),
            HumanizePipe,
            ShouldShowMoPipe,
            GetGroupIconPipe,
            HumanizeAppNamePipe,
            ShortenUserNamePipe,
            MapFunctionPipe,
            DatePipe,
            BytesPipe
        ];
    }
    static forRoot() {
        return {
            ngModule: CommonModule,
            providers: CommonModule.providers()
        };
    }
}
CommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: CommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.0.6", ngImport: i0, type: CommonModule, declarations: [EmptyStateComponent,
        IconDirective,
        OutletDirective,
        HumanizePipe,
        ShouldShowMoPipe,
        GetGroupIconPipe,
        HumanizeAppNamePipe,
        IfAllowedDirective,
        ShortenUserNamePipe,
        UserNameInitialsPipe,
        ForOfDirective,
        LoadMoreComponent,
        MapFunctionPipe,
        ProgressBarComponent,
        DatePipe,
        NumberPipe,
        LoadingComponent,
        DropdownDirectionDirective,
        TextareaAutoresizeDirective,
        TabsetAriaDirective,
        OperationResultComponent,
        VirtualScrollerWrapperComponent,
        VirtualScrollWindowDirective,
        BytesPipe,
        ShowIfFilterPipe,
        SkipLinkDirective,
        MarkdownToHtmlPipe,
        MoNamePipe,
        GenericFileIconPipe,
        StringifyObjectPipe], imports: [NgCommonModule, I18nModule, TooltipModule, ScrollingModule], exports: [EmptyStateComponent,
        IconDirective,
        OutletDirective,
        I18nModule,
        NgCommonModule,
        HumanizeAppNamePipe,
        HumanizePipe,
        ShouldShowMoPipe,
        GetGroupIconPipe,
        IfAllowedDirective,
        ShortenUserNamePipe,
        UserNameInitialsPipe,
        ForOfDirective,
        LoadMoreComponent,
        MapFunctionPipe,
        ProgressBarComponent,
        DatePipe,
        NumberPipe,
        LoadingComponent,
        DropdownDirectionDirective,
        TextareaAutoresizeDirective,
        TabsetAriaDirective,
        OperationResultComponent,
        VirtualScrollerWrapperComponent,
        VirtualScrollWindowDirective,
        BytesPipe,
        ShowIfFilterPipe,
        SkipLinkDirective,
        MarkdownToHtmlPipe,
        MoNamePipe,
        GenericFileIconPipe,
        StringifyObjectPipe] });
CommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: CommonModule, imports: [NgCommonModule, I18nModule, TooltipModule, ScrollingModule, I18nModule,
        NgCommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: CommonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [NgCommonModule, I18nModule, TooltipModule, ScrollingModule],
                    exports: [
                        EmptyStateComponent,
                        IconDirective,
                        OutletDirective,
                        I18nModule,
                        NgCommonModule,
                        HumanizeAppNamePipe,
                        HumanizePipe,
                        ShouldShowMoPipe,
                        GetGroupIconPipe,
                        IfAllowedDirective,
                        ShortenUserNamePipe,
                        UserNameInitialsPipe,
                        ForOfDirective,
                        LoadMoreComponent,
                        MapFunctionPipe,
                        ProgressBarComponent,
                        DatePipe,
                        NumberPipe,
                        LoadingComponent,
                        DropdownDirectionDirective,
                        TextareaAutoresizeDirective,
                        TabsetAriaDirective,
                        OperationResultComponent,
                        VirtualScrollerWrapperComponent,
                        VirtualScrollWindowDirective,
                        BytesPipe,
                        ShowIfFilterPipe,
                        SkipLinkDirective,
                        MarkdownToHtmlPipe,
                        MoNamePipe,
                        GenericFileIconPipe,
                        StringifyObjectPipe
                    ],
                    declarations: [
                        EmptyStateComponent,
                        IconDirective,
                        OutletDirective,
                        HumanizePipe,
                        ShouldShowMoPipe,
                        GetGroupIconPipe,
                        HumanizeAppNamePipe,
                        IfAllowedDirective,
                        ShortenUserNamePipe,
                        UserNameInitialsPipe,
                        ForOfDirective,
                        LoadMoreComponent,
                        MapFunctionPipe,
                        ProgressBarComponent,
                        DatePipe,
                        NumberPipe,
                        LoadingComponent,
                        DropdownDirectionDirective,
                        TextareaAutoresizeDirective,
                        TabsetAriaDirective,
                        OperationResultComponent,
                        VirtualScrollerWrapperComponent,
                        VirtualScrollWindowDirective,
                        BytesPipe,
                        ShowIfFilterPipe,
                        SkipLinkDirective,
                        MarkdownToHtmlPipe,
                        MoNamePipe,
                        GenericFileIconPipe,
                        StringifyObjectPipe
                    ],
                    entryComponents: [LoadMoreComponent, LoadingComponent, VirtualScrollerWrapperComponent]
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,