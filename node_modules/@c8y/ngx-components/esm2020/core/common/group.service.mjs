import { Injectable } from '@angular/core';
import { AssetTypesService } from '../asset-types/asset-types.service';
import { GroupFragment } from './group-fragment.model';
import * as i0 from "@angular/core";
import * as i1 from "../asset-types/asset-types.service";
const MO_TYPES = [
    'asset',
    'dynamicGroup',
    'brokerSource',
    'brokerSourceInactive',
    'group',
    'other'
];
export class GroupService {
    constructor(assetTypesService) {
        this.assetTypesService = assetTypesService;
        this.icons = {
            brokerSourceInactive: {
                icon: 'c8y-group-remote-inactive',
                iconOpen: 'c8y-group-remote-inactive'
            },
            brokerSource: {
                icon: 'c8y-group-remote',
                iconOpen: 'c8y-group-remote-open'
            },
            group: {
                icon: 'c8y-group',
                iconOpen: 'c8y-group-open'
            },
            dynamicGroup: {
                icon: 'c8y-group-smart',
                iconOpen: 'c8y-group-smart-open'
            },
            other: {
                icon: 'exchange',
                iconClass: 'statusUnknown'
            }
        };
        this.dataBrokerSourceFragmentInactive = `_${GroupFragment.dataBrokerSourceFragment}`;
    }
    /**
     * Finds an icon based on the contents of a managed object.
     * It takes into account factors such as type, and specific fragments.
     * @param mo Managed object to be checked.
     * @param open Determines whether the method should return an alternative icon showing the open state.
     * @returns Returns an icon.
     */
    async getIcon(mo, open = false) {
        const genericMoType = this.determineMoType(mo);
        if (genericMoType === 'asset') {
            return await this.getAssetCustomIcon(mo.type);
        }
        const typeIcons = this.getDefaultIcon(genericMoType);
        return (open && typeIcons.iconOpen) || typeIcons.icon;
    }
    /**
     * Checks whether a given managed object is a group.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is a group.
     */
    isGroup(mo) {
        return !!mo[GroupFragment.groupFragmentType] || mo.type === GroupFragment.groupType;
    }
    /**
     * Checks whether a given managed object is a dynamic group.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is a dynamic group.
     */
    isDynamicGroup(mo) {
        return !!mo[GroupFragment.dynamicGroupFragment] || mo.type === GroupFragment.dynamicGroupType;
    }
    /**
     * Checks whether a given managed object is a data broker.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is a data broker.
     */
    isDataBroker(mo) {
        return (!!mo[GroupFragment.dataBrokerSourceFragment] || !!mo[this.dataBrokerSourceFragmentInactive]);
    }
    /**
     * Checks whether a given managed object is a data broker active.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is a data broker active.
     */
    isDataBrokerActive(mo) {
        return (!!mo[GroupFragment.dataBrokerSourceFragment] && !mo[this.dataBrokerSourceFragmentInactive]);
    }
    /**
     * Checks whether a given managed object is an asset.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is an asset.
     */
    isAsset(mo) {
        return !!mo.c8y_IsAsset;
    }
    /**
     * Checks whether the object belongs to any type of group.
     * Types of groups: group, dynamic group, data broker, data broker active.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object belongs to the group category.
     */
    isAnyGroup(mo) {
        return (this.isGroup(mo) ||
            this.isDynamicGroup(mo) ||
            this.isDataBroker(mo) ||
            this.isDataBrokerActive(mo));
    }
    /**
     * Checks whether a given managed object is a device.
     * @param mo Managed object to be checked.
     * @returns Returns true if the managed object is a device.
     */
    isDevice(mo) {
        return !!mo.c8y_IsDevice;
    }
    getAssetCustomIcon(moType) {
        return this.assetTypesService.getIcon(moType);
    }
    getDefaultIcon(moType) {
        return this.icons[moType];
    }
    determineMoType(mo) {
        if (this.isAsset(mo)) {
            return 'asset';
        }
        if (this.isDynamicGroup(mo)) {
            return 'dynamicGroup';
        }
        if (this.isDataBrokerActive(mo)) {
            return 'brokerSource';
        }
        if (this.isDataBroker(mo)) {
            return 'brokerSourceInactive';
        }
        if (this.isGroup(mo)) {
            return 'group';
        }
        return 'other';
    }
}
GroupService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: GroupService, deps: [{ token: i1.AssetTypesService }], target: i0.ɵɵFactoryTarget.Injectable });
GroupService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: GroupService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: GroupService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.AssetTypesService }]; } });
//# sourceMappingURL=data:application/json;base64,