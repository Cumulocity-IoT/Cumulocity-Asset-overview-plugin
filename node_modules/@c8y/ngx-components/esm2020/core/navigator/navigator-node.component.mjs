// tslint:disable-next-line:max-line-length
import { Component, ComponentFactoryResolver, Input, QueryList, ViewChild, ViewChildren, ViewContainerRef, Output, EventEmitter } from '@angular/core';
import { RouterLinkActive } from '@angular/router';
import { NavigatorIconComponent } from './navigator-icon.component';
import { NavigatorNode } from './navigator-node';
import { NavigatorService } from './navigator.service';
import { PopoverConfirmComponent } from '../modal/popover-confirm.component';
import * as i0 from "@angular/core";
import * as i1 from "./navigator.service";
import * as i2 from "@angular/router";
import * as i3 from "ngx-bootstrap/collapse";
import * as i4 from "../common/icon.directive";
import * as i5 from "@angular/common";
import * as i6 from "../modal/popover-confirm.component";
import * as i7 from "../i18n/c8y-translate.pipe";
/**
 * Navigator node renderer.
 */
export class NavigatorNodeComponent {
    constructor(componentFactoryResolver, navigator) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.navigator = navigator;
        /**
         * Event emitter responsible for broadcasting one of the following events: "icon", "expander" or "link" as string value.
         *
         * The type of event depends on where you click on the navigator node:
         * * clicking the icon will broadcast the event "icon",
         * * clicking the expander will broadcast the event "expander",
         * * clicking the label will broadcast the event "link".
         */
        this.nodeClick = new EventEmitter();
    }
    /**
     * @ignore
     */
    ngAfterViewInit() {
        this.childrenNodes.forEach(n => (n.parentNode = this));
        if (!this.node.component) {
            this.viewInitTimeout = setTimeout(() => {
                this.updateIcon();
                this.openOnFirstUrl();
                this.expandParentIfActive();
                this.node.confirm = this.confirm;
            });
        }
    }
    /**
     * Expands the navigator node when the URL matches the path provided in the node.
     */
    openOnFirstUrl() {
        if (this.navigator.openOnFirstUrl(this.node) && !this.node.open) {
            this.expandCollapse(true);
        }
    }
    /**
     * Returns the expander title.
     */
    get expandTitle() {
        return !this.node.open ? 'Expand' : 'Collapse';
    }
    /**
     * Click event handler.
     *
     * @param {string} from Source of the click event.
     * @param event DOM event.
     */
    click(from = 'link', $event) {
        let open;
        switch (from) {
            case "expander" /* ClickEventSource.EXPANDER */:
                if ($event) {
                    $event.preventDefault();
                    $event.stopPropagation();
                }
                open = !this.node.open;
                break;
            case "icon" /* ClickEventSource.ICON */:
            case "link" /* ClickEventSource.LINK */:
                open = this.routerLinkActive && this.routerLinkActive.isActive ? true : !this.node.open;
                break;
        }
        this.handleExpandCollapse(open, from, $event);
        this.nodeClick.emit(from);
    }
    /**
     * Expands or collapses the navigator node and its children recursively.
     *
     * @param {boolean} open Open or close the node.
     * @param {boolean} recursive Open or close the children.
     * @param {ClickOptions} forNode Click options.
     */
    expandCollapse(open, recursive, forNode = {}) {
        this.node.open = open;
        if (recursive) {
            this.childrenNodes.forEach(n => n.expandCollapse(open, recursive));
        }
        forNode.open = open;
        this.node.click(forNode);
    }
    /**
     * @ignore
     */
    ngOnDestroy() {
        clearTimeout(this.viewInitTimeout);
        if (this.node) {
            this.node.destroy();
        }
    }
    handleExpandCollapse(open, from, $event) {
        if (open === this.node.open ||
            (this.node.path && !open && from !== "expander" /* ClickEventSource.EXPANDER */)) {
            return;
        }
        this.expandCollapse(open, false, { [from]: true, $event });
    }
    expandParentIfActive() {
        if (this.routerLinkActive && this.routerLinkActive.isActive && this.parentNode) {
            this.parentNode.expandCollapse(true);
        }
    }
    updateIcon() {
        if (this.node.iconTemplate) {
            this.updateIconTemplate();
        }
        else {
            this.updateIconComponent();
        }
    }
    updateIconComponent() {
        let componentType = NavigatorIconComponent;
        if (this.node && this.node.iconComponent) {
            componentType = this.node.iconComponent;
        }
        this.iconSlot.clear();
        const componentRef = this.iconSlot.createComponent(componentType, {
            injector: this.node.injector
        });
        componentRef.instance.node = this.node;
    }
    updateIconTemplate() {
        this.iconSlot.clear();
        this.iconSlot.createEmbeddedView(this.node.iconTemplate, undefined, {
            injector: this.node.injector
        });
    }
}
NavigatorNodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: NavigatorNodeComponent, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1.NavigatorService }], target: i0.ɵɵFactoryTarget.Component });
NavigatorNodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.6", type: NavigatorNodeComponent, selector: "c8y-navigator-node", inputs: { node: "node", isRoot: "isRoot" }, outputs: { nodeClick: "nodeClick" }, viewQueries: [{ propertyName: "iconSlot", first: true, predicate: ["icon"], descendants: true, read: ViewContainerRef }, { propertyName: "routerLinkActive", first: true, predicate: RouterLinkActive, descendants: true }, { propertyName: "confirm", first: true, predicate: PopoverConfirmComponent, descendants: true }, { propertyName: "childrenNodes", predicate: NavigatorNodeComponent, descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"node.component\">\n  <ng-container *ngComponentOutlet=\"node.component; injector: node.injector\"></ng-container>\n</ng-container>\n\n<div\n  *ngIf=\"!node.component\"\n  class=\"slot\"\n  [hidden]=\"node.hidden\"\n  (dragstart)=\"node.dragStart($event)\"\n  (dragend)=\"node.dragEnd($event)\"\n  (drop)=\"node.drop($event)\"\n  [draggable]=\"node.draggable\"\n  [ngClass]=\"{ dragged: node.dragged, disabled: node.loading }\"\n>\n  <ng-container>\n    <div\n      class=\"link\"\n      [routerLink]=\"node.canNavigate ? node.path : undefined\"\n      [routerLinkActive]=\"node.canNavigate ? 'active' : ''\"\n      [routerLinkActiveOptions]=\"{ exact: node.routerLinkExact }\"\n      tabindex=\"-1\"\n    >\n      <ng-container *ngTemplateOutlet=\"navicon\"></ng-container>\n      <button\n        class=\"btn-clean\"\n        type=\"button\"\n        title=\"{{ node.label | translate }}\"\n        draggable=\"false\"\n        (dragover)=\"node.canDrop && $event.preventDefault()\"\n        (dragenter)=\"node.canDrop && node.dragEnter($event)\"\n        (dragleave)=\"node.canDrop && node.dragLeave($event)\"\n        [attr.data-cy]=\"node.label\"\n        [attr.id]=\"isRoot ? node.id : undefined\"\n        (click)=\"click(node.canNavigate ? 'link' : 'expander', $event)\"\n        [ngClass]=\"{\n          'root-link': isRoot,\n          open: node.open && node.hasChildren,\n          parent: node.hasChildren,\n          'dragged-hover': node.draggedHover && !node.dragged\n        }\"\n        [attr.aria-expanded]=\"node.hasChildren ? node.open : null\"\n      >\n        <ng-container *ngTemplateOutlet=\"inner\"></ng-container>\n      </button>\n    </div>\n  </ng-container>\n\n  <div\n    class=\"children panel-expand expand\"\n    *ngIf=\"node.children.length\"\n    [collapse]=\"!node.open\"\n    [isAnimated]=\"true\"\n  >\n    <c8y-navigator-node\n      *ngFor=\"let childNode of node.children\"\n      [node]=\"childNode\"\n      (nodeClick)=\"nodeClick.emit($event)\"\n    ></c8y-navigator-node>\n  </div>\n</div>\n\n<!-- icon -->\n<ng-template #navicon>\n  <!-- loader -->\n  <i\n    *ngIf=\"node.loading && !isRoot\"\n    class=\"icon-spin loadingIndicator\"\n    style=\"{{ isRoot ? 'padding-left: 16px;' : null }}\"\n    [c8yIcon]=\"'circle-o-notch'\"\n  ></i>\n  <ng-container #icon></ng-container>\n</ng-template>\n\n<ng-template #inner>\n\n  <!--title  -->\n  <span>{{ node.label | translate }}</span>\n\n  <!--expander  -->\n  <i\n    role=\"button\"\n    class=\"expander\"\n    [attr.aria-label]=\"expandTitle\"\n    *ngIf=\"node.hasChildren\"\n    [c8yIcon]=\"'chevron-down'\"\n    (click)=\"click('expander', $event)\"\n    data-cy=\"c8y-navigator-node--expander\"\n  ></i>\n\n  <!--  Popover confirm  -->\n  <c8y-popover-confirm triggers=\"focus\" containerClass=\"navigator-popover\"></c8y-popover-confirm>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i2.RouterLink, selector: ":not(a):not(area)[routerLink]", inputs: ["queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo", "routerLink"] }, { kind: "directive", type: i2.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "ariaCurrentWhenActive", "routerLinkActive"], outputs: ["isActiveChange"], exportAs: ["routerLinkActive"] }, { kind: "directive", type: i3.CollapseDirective, selector: "[collapse]", inputs: ["display", "isAnimated", "collapse"], outputs: ["collapsed", "collapses", "expanded", "expands"], exportAs: ["bs-collapse"] }, { kind: "directive", type: i4.IconDirective, selector: "[c8yIcon]", inputs: ["c8yIcon"] }, { kind: "directive", type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }, { kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i6.PopoverConfirmComponent, selector: "c8y-popover-confirm", inputs: ["buttons", "message", "title", "isOpen", "containerClass", "placement", "outsideClick"] }, { kind: "component", type: NavigatorNodeComponent, selector: "c8y-navigator-node", inputs: ["node", "isRoot"], outputs: ["nodeClick"] }, { kind: "pipe", type: i7.C8yTranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: NavigatorNodeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'c8y-navigator-node', template: "<ng-container *ngIf=\"node.component\">\n  <ng-container *ngComponentOutlet=\"node.component; injector: node.injector\"></ng-container>\n</ng-container>\n\n<div\n  *ngIf=\"!node.component\"\n  class=\"slot\"\n  [hidden]=\"node.hidden\"\n  (dragstart)=\"node.dragStart($event)\"\n  (dragend)=\"node.dragEnd($event)\"\n  (drop)=\"node.drop($event)\"\n  [draggable]=\"node.draggable\"\n  [ngClass]=\"{ dragged: node.dragged, disabled: node.loading }\"\n>\n  <ng-container>\n    <div\n      class=\"link\"\n      [routerLink]=\"node.canNavigate ? node.path : undefined\"\n      [routerLinkActive]=\"node.canNavigate ? 'active' : ''\"\n      [routerLinkActiveOptions]=\"{ exact: node.routerLinkExact }\"\n      tabindex=\"-1\"\n    >\n      <ng-container *ngTemplateOutlet=\"navicon\"></ng-container>\n      <button\n        class=\"btn-clean\"\n        type=\"button\"\n        title=\"{{ node.label | translate }}\"\n        draggable=\"false\"\n        (dragover)=\"node.canDrop && $event.preventDefault()\"\n        (dragenter)=\"node.canDrop && node.dragEnter($event)\"\n        (dragleave)=\"node.canDrop && node.dragLeave($event)\"\n        [attr.data-cy]=\"node.label\"\n        [attr.id]=\"isRoot ? node.id : undefined\"\n        (click)=\"click(node.canNavigate ? 'link' : 'expander', $event)\"\n        [ngClass]=\"{\n          'root-link': isRoot,\n          open: node.open && node.hasChildren,\n          parent: node.hasChildren,\n          'dragged-hover': node.draggedHover && !node.dragged\n        }\"\n        [attr.aria-expanded]=\"node.hasChildren ? node.open : null\"\n      >\n        <ng-container *ngTemplateOutlet=\"inner\"></ng-container>\n      </button>\n    </div>\n  </ng-container>\n\n  <div\n    class=\"children panel-expand expand\"\n    *ngIf=\"node.children.length\"\n    [collapse]=\"!node.open\"\n    [isAnimated]=\"true\"\n  >\n    <c8y-navigator-node\n      *ngFor=\"let childNode of node.children\"\n      [node]=\"childNode\"\n      (nodeClick)=\"nodeClick.emit($event)\"\n    ></c8y-navigator-node>\n  </div>\n</div>\n\n<!-- icon -->\n<ng-template #navicon>\n  <!-- loader -->\n  <i\n    *ngIf=\"node.loading && !isRoot\"\n    class=\"icon-spin loadingIndicator\"\n    style=\"{{ isRoot ? 'padding-left: 16px;' : null }}\"\n    [c8yIcon]=\"'circle-o-notch'\"\n  ></i>\n  <ng-container #icon></ng-container>\n</ng-template>\n\n<ng-template #inner>\n\n  <!--title  -->\n  <span>{{ node.label | translate }}</span>\n\n  <!--expander  -->\n  <i\n    role=\"button\"\n    class=\"expander\"\n    [attr.aria-label]=\"expandTitle\"\n    *ngIf=\"node.hasChildren\"\n    [c8yIcon]=\"'chevron-down'\"\n    (click)=\"click('expander', $event)\"\n    data-cy=\"c8y-navigator-node--expander\"\n  ></i>\n\n  <!--  Popover confirm  -->\n  <c8y-popover-confirm triggers=\"focus\" containerClass=\"navigator-popover\"></c8y-popover-confirm>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1.NavigatorService }]; }, propDecorators: { iconSlot: [{
                type: ViewChild,
                args: ['icon', { read: ViewContainerRef, static: false }]
            }], node: [{
                type: Input
            }], isRoot: [{
                type: Input
            }], routerLinkActive: [{
                type: ViewChild,
                args: [RouterLinkActive, { static: false }]
            }], childrenNodes: [{
                type: ViewChildren,
                args: [NavigatorNodeComponent]
            }], nodeClick: [{
                type: Output
            }], confirm: [{
                type: ViewChild,
                args: [PopoverConfirmComponent, { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,