import { Injectable } from '@angular/core';
import { InventoryService } from '@c8y/client';
import { ApiService } from '@c8y/ngx-components/api';
import { NEVER, of } from 'rxjs';
import { distinctUntilChanged, filter, map, mergeMap, switchMap, tap } from 'rxjs/operators';
import { AppStateService } from '../common/ui-state.service';
import * as i0 from "@angular/core";
import * as i1 from "@c8y/client";
import * as i2 from "@c8y/ngx-components/api";
import * as i3 from "../common/ui-state.service";
/**
 * AssetTypesService is being used to manage a cache of all existing asset types.
 * This service is injected in the AssetOverviewNavigationFactory class, which will trigger
 * the initialization of the cache as the constructor is called.
 */
export class AssetTypesService {
    constructor(inventory, apiService, appStateService) {
        this.inventory = inventory;
        this.apiService = apiService;
        this.appStateService = appStateService;
        this.ASSET_TYPE_GROUP_QUERY = {
            __filter: {
                __and: [{ __has: 'c8y_IsAssetType' }, { name: 'group' }]
            }
        };
        this.DEFAULT_ASSET_ICON = 'c8y-enterprise';
        this.assetTypesCache = {};
        this.isCacheSet = false;
        this.allowedMethods = ['POST', 'PUT', 'DELETE'];
        this.appStateService.currentUser
            .pipe(map(user => user?.id), distinctUntilChanged(), switchMap(userId => {
            if (userId) {
                this.initAssetTypesCache();
                return this.subscribeForAssetTypeUpdates();
            }
            else {
                this.assetTypesCache = {};
                return NEVER;
            }
        }))
            .subscribe();
    }
    /**
     * Queries available asset types and adds every asset type to the local cache.
     * @returns IManagedObject table of asset types.
     */
    async initAssetTypesCache() {
        const { data } = await this.inventory.list({
            fragmentType: 'c8y_IsAssetType',
            withChildren: false,
            pageSize: 2000
        });
        data.forEach(assetType => this.addAssetType(assetType));
        this.isCacheSet = true;
        return data;
    }
    /**
     * Returns an asset type from the cache based on the unique name property.
     * @param name Name of the asset type.
     * @returns IManagedObject which represents the asset type.
     */
    getAssetTypeByName(name) {
        if (!this.assetTypesCache.hasOwnProperty(name)) {
            return undefined;
        }
        return this.assetTypesCache[name];
    }
    /**
     * Returns an asset type from the cache based on the id.
     * @param assetTypeId Id of the asset type.
     * @returns IManagedObject which represents the asset type.
     */
    getAssetTypeById(assetTypeId) {
        if (!assetTypeId) {
            return;
        }
        return Object.values(this.assetTypesCache).find((assetType) => assetType.id === assetTypeId);
    }
    /**
     * Extracts an icon from an asset type.
     * @param type Type of the asset type.
     * @param open Determines whether the method should return an alternative icon showing the open state.
     * Defaults to false.
     * @returns Returns an icon for a given asset type.
     */
    async getIcon(type) {
        if (!this.isCacheSet) {
            try {
                await this.initAssetTypesCache();
            }
            catch (error) {
                // do nothing
            }
        }
        const assetType = this.getAssetTypeByName(type);
        return assetType?.c8y_IsAssetType?.icon?.name || this.DEFAULT_ASSET_ICON;
    }
    /**
     * Add an asset type to the local cache.
     * @param assetType Asset type which should be added to the cache.
     * @returns void.
     */
    addAssetType(assetType) {
        this.assetTypesCache[assetType.name] = assetType;
    }
    /**
     * Delete an asset type from the local cache based on the given asset type id.
     * @param assetTypeId Id of the asset type which should be deleted.
     * @returns void.
     */
    deleteAssetType(assetTypeId) {
        const assetType = this.getAssetTypeById(assetTypeId);
        if (assetType) {
            delete this.assetTypesCache[assetType.name];
        }
    }
    /**
     * Update an asset type in the local cache.
     * @param assetType Asset type which should be updated in the cache.
     * @returns void.
     */
    updateAssetType(assetType) {
        const cachedAssetType = this.getAssetTypeById(assetType.id);
        if (cachedAssetType) {
            this.assetTypesCache[cachedAssetType.name] = Object.assign(cachedAssetType, assetType);
        }
    }
    /**
     * Subscribes to api PUT, POST and DELETE requests interceptor to update local asset types cache.
     * If a new asset type has been created it will be added to the local cache. If an asset
     * type has been deleted it will be removed from the local cache.
     */
    subscribeForAssetTypeUpdates() {
        return this.apiService
            .hookResponse(c => this.checkIfInventoryMoApiCall(c))
            .pipe(filter((call) => !!call?.method && this.isExpectedMethod(call)), mergeMap((this.apiService.resolveData)), switchMap(({ method, data, url }) => method === 'DELETE' ? this.handleDelete(method, url) : of(data)), filter((mo) => !!mo && this.hasIsAssetTypeFragment(mo)), tap((mo) => this.handlePutOrPost(mo)));
    }
    isExpectedMethod(call) {
        return this.allowedMethods.includes(call?.method);
    }
    handleDelete(method, url) {
        const moId = this.getMoIdFromUrl(url);
        if (method !== 'DELETE' || !moId) {
            return NEVER;
        }
        this.deleteAssetType(moId);
        return NEVER;
    }
    handlePutOrPost(mo) {
        if (this.getAssetTypeById(mo.id)) {
            this.updateAssetType(mo);
        }
        else {
            this.addAssetType(mo);
        }
    }
    hasIsAssetTypeFragment(mo) {
        return mo?.hasOwnProperty('c8y_IsAssetType');
    }
    getMoIdFromUrl(url) {
        const regex = /managedObjects\/(\d+)/;
        const match = url.match(regex);
        if (match) {
            const moId = match[1];
            return moId;
        }
        return;
    }
    /**
     * Managed objects inventory api filter, allowing only PUT, POST and DELETE methods.
     * @param call Api call to filter.
     * @returns Returns true if api call meets the required criteria.
     */
    checkIfInventoryMoApiCall(call) {
        if (!call) {
            return false;
        }
        const hasRequiredMethod = call.method === 'POST' || call.method === 'DELETE' || call.method === 'PUT';
        const hasRequiredUrl = call.url.includes('managedObjects');
        return hasRequiredMethod && hasRequiredUrl;
    }
}
AssetTypesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: AssetTypesService, deps: [{ token: i1.InventoryService }, { token: i2.ApiService }, { token: i3.AppStateService }], target: i0.ɵɵFactoryTarget.Injectable });
AssetTypesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: AssetTypesService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: AssetTypesService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.InventoryService }, { type: i2.ApiService }, { type: i3.AppStateService }]; } });
//# sourceMappingURL=data:application/json;base64,