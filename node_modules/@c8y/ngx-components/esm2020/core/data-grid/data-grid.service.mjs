import { Injectable } from '@angular/core';
import { QueriesUtil } from '@c8y/client';
import { assign, forEach, get, identity, transform } from 'lodash-es';
import { from, isObservable, of } from 'rxjs';
import { map, share, take, withLatestFrom } from 'rxjs/operators';
import { UserPreferencesService } from '../common/user-preferences/user-preferences.service';
import { CustomColumn } from './column/custom.column';
import * as i0 from "@angular/core";
import * as i1 from "../common/user-preferences/user-preferences.service";
export class DataGridService {
    constructor(userPreferencesService) {
        this.userPreferencesService = userPreferencesService;
        this.DEFAULT_PAGE_SIZE = 20;
        this.queriesUtil = new QueriesUtil();
    }
    /**
     * @deprecated Use getConfig$(key: string): Observable<GridConfig> instead.
     */
    getConfig(key) {
        return this.getConfig2(key);
    }
    /**
     * @deprecated Use saveConfig$(config: GridConfig, key: string): Promise<GridConfig> instead.
     */
    saveConfig(config, key) {
        localStorage.setItem(key, JSON.stringify(config));
    }
    clearConfig(key) {
        localStorage.removeItem(key);
    }
    getConfig$(key) {
        return this.userPreferencesService.get(key).pipe(map(config => config || {
            columns: [],
            pagination: { pageSize: this.DEFAULT_PAGE_SIZE, currentPage: 1 }
        }));
    }
    saveConfig$(config, key) {
        return from(this.userPreferencesService.set(key, config));
    }
    /**
     * @deprecated Use getUserConfiguredColumns$(Column[] | Observable<Column[]>, string) instead.
     */
    getUserConfiguredColumns(columns, storageKey) {
        return this.applyConfigToColumns(this.getConfig2(storageKey), columns, storageKey);
    }
    getUserConfiguredColumns$(columns, storageKey) {
        return this.getConfig$(storageKey).pipe(withLatestFrom(isObservable(columns) ? columns : of(columns)), map(([config, cols]) => this.applyConfigToColumns(config, cols, storageKey)), take(1), share());
    }
    getQueryObj(columns, defaultFilter = {}) {
        return transform(columns, (query, column) => this.extendQueryByColumn(query, column), {
            __filter: {},
            __orderby: [],
            ...defaultFilter
        });
    }
    applyConfigToColumns(config, columns, storageKey) {
        if (config?.columns?.length > 0) {
            const reOrderedColumns = [];
            let noConfigColumns = [];
            try {
                const customColumns = config.columns
                    .filter(col => col.custom)
                    .map((col) => new CustomColumn(col));
                const allColumns = [...columns, ...customColumns];
                noConfigColumns = allColumns.filter(col => !config.columns.some(configCol => col.name === configCol.name));
                config.columns.forEach(({ visible, name, sortOrder, filter }) => {
                    const columnToReorder = allColumns.find(col => col.name === name);
                    if (columnToReorder) {
                        columnToReorder.visible = visible;
                        columnToReorder.sortOrder = sortOrder;
                        columnToReorder.externalFilterQuery =
                            columnToReorder.externalFilterQuery ?? filter?.externalFilterQuery;
                        reOrderedColumns.push(columnToReorder);
                    }
                });
            }
            catch (ex) {
                this.clearConfig(storageKey);
            }
            return [...reOrderedColumns, ...noConfigColumns];
        }
        return columns;
    }
    // TODO: REMOVE ME
    // Added because usage of getConfig breaks JSdoc deprecations, otherwise compodoc build fails
    getConfig2(key) {
        const config = JSON.parse(localStorage.getItem(key));
        if (config === null) {
            return { columns: [], pagination: { pageSize: this.DEFAULT_PAGE_SIZE, currentPage: 1 } };
        }
        return config;
    }
    extendQueryByColumn(query, column) {
        if (column.filterable && column.externalFilterQuery) {
            const getFilter = column.filteringConfig.getFilter || identity;
            const queryObj = getFilter(column.externalFilterQuery);
            if (queryObj.__or) {
                query.__filter.__and = query.__filter.__and || [];
                query.__filter.__and.push(queryObj);
            }
            else if (queryObj.__and && get(query, '__filter.__and')) {
                queryObj.__and.map(obj => query.__filter.__and.push(obj));
            }
            else {
                assign(query.__filter, queryObj);
            }
        }
        if (column.sortable && column.sortOrder) {
            const cs = {};
            forEach(column.sortingConfig.pathSortingConfigs, pathSortingConfig => {
                cs[pathSortingConfig.path] =
                    (column.sortOrder === 'asc' ? 1 : -1) * (pathSortingConfig.sortOrderModifier || 1);
            });
            query.__orderby.push(cs);
        }
        return query;
    }
}
DataGridService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: DataGridService, deps: [{ token: i1.UserPreferencesService }], target: i0.ɵɵFactoryTarget.Injectable });
DataGridService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: DataGridService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.6", ngImport: i0, type: DataGridService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.UserPreferencesService }]; } });
//# sourceMappingURL=data:application/json;base64,