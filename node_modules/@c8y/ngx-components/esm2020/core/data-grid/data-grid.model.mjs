export const minColumnGridTrackSize = 80;
/** Maps column types to relative widths. */
export const ratiosByColumnTypes = {
    /** The width ration for icon column type. */
    icon: 1,
    /** The width ration for numeric column type. */
    numeric: 1,
    /** The width ration for short text column type. */
    'text-short': 1.67,
    /** The width ration for long text column type. */
    'text-long': 3.33
};
/** Filtering actions. */
export var FilteringActionType;
(function (FilteringActionType) {
    /** Action invoked when filter settings are to be applied. */
    FilteringActionType["ApplyFilter"] = "APPLY_FILTER";
    /** Action invoked when filter settings are to be cleared. */
    FilteringActionType["ResetFilter"] = "RESET_FILTER";
})(FilteringActionType || (FilteringActionType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1ncmlkLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9kYXRhLWdyaWQvZGF0YS1ncmlkLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9LQSxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFFLENBQUM7QUFFekMsNENBQTRDO0FBQzVDLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHO0lBQ2pDLDZDQUE2QztJQUM3QyxJQUFJLEVBQUUsQ0FBQztJQUVQLGdEQUFnRDtJQUNoRCxPQUFPLEVBQUUsQ0FBQztJQUVWLG1EQUFtRDtJQUNuRCxZQUFZLEVBQUUsSUFBSTtJQUVsQixrREFBa0Q7SUFDbEQsV0FBVyxFQUFFLElBQUk7Q0FDbEIsQ0FBQztBQWFGLHlCQUF5QjtBQUN6QixNQUFNLENBQU4sSUFBWSxtQkFNWDtBQU5ELFdBQVksbUJBQW1CO0lBQzdCLDZEQUE2RDtJQUM3RCxtREFBNEIsQ0FBQTtJQUU1Qiw2REFBNkQ7SUFDN0QsbURBQTRCLENBQUE7QUFDOUIsQ0FBQyxFQU5XLG1CQUFtQixLQUFuQixtQkFBbUIsUUFNOUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZVJlZiwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgSVJlc3VsdExpc3QgfSBmcm9tICdAYzh5L2NsaWVudCc7XG5pbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZyB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKiogRGVzY3JpYmVzIHRoZSBpbnRlcmZhY2Ugb2YgdGhlIGRhdGEgZ3JpZC4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YUdyaWQge1xuICAvKiogVGhlIGxpc3Qgb2YgY29sdW1ucy4gKi9cbiAgY29sdW1uczogQ29sdW1uW107XG5cbiAgLyoqIFRoZSBsaXN0IG9mIGl0ZW1zLiAqL1xuICByb3dzOiBSb3dbXTtcblxuICAvKiogUGFnaW5hdGlvbiBvYmplY3QuICovXG4gIHBhZ2luYXRpb246IFBhZ2luYXRpb247XG5cbiAgLyoqIEEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZmV0Y2ggc2VydmVyIGRhdGEuICovXG4gIHNlcnZlclNpZGVEYXRhQ2FsbGJhY2s6IFNlcnZlclNpZGVEYXRhQ2FsbGJhY2s7XG5cbiAgLyoqIFdoZXRoZXIgaXRlbXMgYXJlIHNlbGVjdGFibGUuICovXG4gIHNlbGVjdGFibGU6IGJvb2xlYW47XG5cbiAgLyoqIFRoZSBuYW1lIG9mIHRoZSBwcmltYXJ5IGtleSBwcm9wZXJ0eS4gKi9cbiAgc2VsZWN0aW9uUHJpbWFyeUtleTogc3RyaW5nO1xuXG4gIC8qKiBEYXRhIGdyaWQgZGlzcGxheSBvcHRpb25zLiAqL1xuICBkaXNwbGF5T3B0aW9uczogRGlzcGxheU9wdGlvbnM7XG5cbiAgLyoqIEluZGl2aWR1YWwgYWN0aW9uIGNvbnRyb2xzLiAqL1xuICBhY3Rpb25Db250cm9sczogQWN0aW9uQ29udHJvbFtdO1xuXG4gIC8qKiBCdWxrIGFjdGlvbiBjb250cm9scy4gKi9cbiAgYnVsa0FjdGlvbkNvbnRyb2xzOiBCdWxrQWN0aW9uQ29udHJvbFtdO1xuXG4gIC8qKiBIZWFkZXIgYWN0aW9uIGNvbnRyb2xzLiAqL1xuICBoZWFkZXJBY3Rpb25Db250cm9scz86IEhlYWRlckFjdGlvbkNvbnRyb2xbXTtcbn1cblxuLyoqIERlc2NyaWJlcyBhIGRhdGEgZ3JpZCBjb2x1bW4uICovXG5leHBvcnQgaW50ZXJmYWNlIENvbHVtbiB7XG4gIC8qKiBUaGUgbmFtZSBmb3IgdGhlIGNvbHVtbi4gKi9cbiAgbmFtZTogc3RyaW5nIHwgU3BlY2lhbENvbHVtbk5hbWU7XG4gIC8qKiBUaGUgY29sdW1uJ3MgaGVhZGVyIChpZiBub3QgZ2l2ZW4sIGBuYW1lYCBpcyB1c2VkIGJ5IGRlZmF1bHQpLiAqL1xuICBoZWFkZXI/OiBzdHJpbmc7XG4gIC8qKiBUaGUgcGF0aCBpbiBhIHJvdyBpdGVtIHRvIHJlYWQgdGhlIGNlbGwgdmFsdWUgZnJvbS4gKi9cbiAgcGF0aD86IHN0cmluZztcbiAgLyoqIFdoZXRoZXIgdGhlIGNvbHVtbiBpcyBkaXNwbGF5ZWQuICovXG4gIHZpc2libGU/OiBib29sZWFuO1xuICAvKiogV2hldGhlciB0aGUgY29sdW1uIGNhbiBiZSBtb3ZlZCB0byBhbm90aGVyIHBvc2l0aW9uLiAqL1xuICBwb3NpdGlvbkZpeGVkPzogYm9vbGVhbjtcbiAgLyoqIE1hcmtzIGEgdXNlciBjb25maWd1cmVkIGN1c3RvbSBjb2x1bW4gKi9cbiAgY3VzdG9tPzogYm9vbGVhbjtcbiAgLyoqIFdoZXRoZXIgdGhlIGNvbHVtbiBjYW4gYmUgcmVzaXplZC4gKi9cbiAgcmVzaXphYmxlPzogYm9vbGVhbjtcbiAgLyoqIE9wdGlvbmFsIHR5cGUgb2YgZGF0YSBpbiB0aGUgY29sdW1uICh1c2VkIHRvIHNldCBkYXRhLXR5cGUgYXR0cmlidXRlLCBlLmcuIGZvciBhZGRpdGlvbmFsIHN0eWxpbmcpLiAqL1xuICBkYXRhVHlwZT86IENvbHVtbkRhdGFUeXBlO1xuICAvKiogVGhlIGNvbHVtbidzIHNpemUsIGUuZy4gXCI0MCBweFwiLiAqL1xuICBncmlkVHJhY2tTaXplPzogc3RyaW5nO1xuICAvKiogQWRkaXRpb25hbCBDU1MgY2xhc3NlcyBmb3IgdGhlIGhlYWRlciBjZWxsLiAqL1xuICBoZWFkZXJDU1NDbGFzc05hbWU/OiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgLyoqIEFkZGl0aW9uYWwgQ1NTIGNsYXNzZXMgZm9yIGRhdGEgY2VsbHMuICovXG4gIGNlbGxDU1NDbGFzc05hbWU/OiBzdHJpbmcgfCBzdHJpbmdbXTtcblxuICAvKiogV2hldGhlciB0aGUgY29sdW1uIGlzIHNvcnRhYmxlLiAqL1xuICBzb3J0YWJsZT86IGJvb2xlYW47XG4gIC8qKiBXaGV0aGVyIHRoZSBzb3J0IG9yZGVyIGlzIGFzY2VuZGluZywgZGVzY2VuZGluZyBvciBub3Qgc3BlY2lmaWVkLiAqL1xuICBzb3J0T3JkZXI/OiBTb3J0T3JkZXI7XG4gIHNvcnRpbmdDb25maWc/OiBDb2x1bW5Tb3J0aW5nQ29uZmlnO1xuXG4gIC8qKiBXaGV0aGVyIHRoZSBjb2x1bW4gaXMgZmlsdGVyYWJsZS4gKi9cbiAgZmlsdGVyYWJsZT86IGJvb2xlYW47XG4gIC8qKiBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3Igb3IgYSBmdW5jdGlvbiBmb3IgY2xpZW50LXNpZGUgZmlsdGVyaW5nLiAqL1xuICBmaWx0ZXJQcmVkaWNhdGU/OiBzdHJpbmcgfCBGaWx0ZXJQcmVkaWNhdGVGdW5jdGlvbjtcbiAgLyoqIEN1c3RvbSBmaWx0ZXJpbmcgZm9ybSByZW5kZXJlciBjYW4gc2V0IGFueSB2YWx1ZSBoZXJlIGFuZCBpdCBjYW4gYmUgdXNlZCB0byBidWlsZCBhIHF1ZXJ5IHRvIHRoZSBzZXJ2ZXIuICovXG4gIGV4dGVybmFsRmlsdGVyUXVlcnk/OiBhbnk7XG4gIGZpbHRlcmluZ0NvbmZpZz86IEZvcm1seUNvbHVtbkZpbHRlcmluZ0NvbmZpZztcblxuICAvKiogQ3VzdG9tIGRhdGEgY2VsbCByZW5kZXJlciBjb21wb25lbnQuIEluamVjdCBgQ2VsbFJlbmRlcmVyQ29udGV4dGAgdG8gZ2V0IGFjY2VzcyB0byBkYXRhIHZhbHVlLCBpdGVtIGFuZCBjb2x1bW4gb2JqZWN0LiAqL1xuICBjZWxsUmVuZGVyZXJDb21wb25lbnQ/OiBUeXBlPGFueT47XG4gIC8qKiBDdXN0b20gaGVhZGVyIGNlbGwgcmVuZGVyZXIgY29tcG9uZW50LiBJbmplY3QgYENlbGxSZW5kZXJlckNvbnRleHRgIHRvIGdldCBhY2Nlc3MgdG8gaGVhZGVyIHZhbHVlIGFuZCBjb2x1bW4gb2JqZWN0LiAqL1xuICBoZWFkZXJDZWxsUmVuZGVyZXJDb21wb25lbnQ/OiBUeXBlPGFueT47XG4gIC8qKiBDdXN0b20gZmlsdGVyaW5nIGZvcm0gcmVuZGVyZXIgY29tcG9uZW50LiBJbmplY3QgYEZpbHRlcmluZ0Zvcm1SZW5kZXJlckNvbnRleHRgIHRvIGdldCBhY2Nlc3MgdG8gY29sdW1uIG9iamVjdCBhbmQgbWV0aG9kczogYXBwbHlGaWx0ZXIsIHJlc2V0RmlsdGVyLiAqL1xuICBmaWx0ZXJpbmdGb3JtUmVuZGVyZXJDb21wb25lbnQ/OiBUeXBlPGFueT47XG59XG5cbi8qKiBEZXNjcmliZXMgYSBjb2x1bW4gY29uZmlndXJhdGlvbi4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29sdW1uQ29uZmlnIHtcbiAgLyoqIFRoZSBuYW1lIGZvciB0aGUgY29sdW1uLiAqL1xuICBuYW1lPzogc3RyaW5nO1xuXG4gIC8qKiBXaGV0aGVyIHRoZSBjb2x1bW4gaXMgZGlzcGxheWVkLiAqL1xuICB2aXNpYmxlPzogYm9vbGVhbjtcblxuICAvKiogV2hldGhlciB0aGUgc29ydCBvcmRlciBpcyBhc2NlbmRpbmcsIGRlc2NlbmRpbmcgb3Igbm90IHNwZWNpZmllZC4gKi9cbiAgc29ydE9yZGVyPzogU29ydE9yZGVyO1xuXG4gIC8qKiBUaGUgc2V0dGluZ3Mgb2YgZmlsdGVyIGluIGEgY29sdW1uLiAqL1xuICBmaWx0ZXI/OiBGaWx0ZXI7XG59XG5cbi8qKiBEZXNjcmliZXMgYSBjdXN0b20gY29sdW1uIGNvbmZpZ3VyYXRpb24uICovXG5leHBvcnQgaW50ZXJmYWNlIEN1c3RvbUNvbHVtbkNvbmZpZyBleHRlbmRzIENvbHVtbkNvbmZpZyB7XG4gIC8qKiBKU09OIHBhdGggdG8gdGhlIG1hbmFnZWQgb2JqZWN0IHByb3BlcnR5IHRvIGJlIGRpc3BsYXllZCAqL1xuICBwYXRoOiBzdHJpbmc7XG5cbiAgLyoqIENvbHVtbiBoZWFkZXIgdGl0bGUgKi9cbiAgaGVhZGVyOiBzdHJpbmc7XG5cbiAgLyoqIEZsYWcgdG8gaWRlbnRpZnkgY3VzdG9tIGNvbHVtbnMgKi9cbiAgY3VzdG9tOiBib29sZWFuO1xufVxuXG4vKiogRGVzY3JpYmVzIHRoZSBzZXR0aW5ncyBvZiBmaWx0ZXIgaW4gYSBjb2x1bW4uICovXG5leHBvcnQgaW50ZXJmYWNlIEZpbHRlciB7XG4gIC8qKiBDdXN0b20gZmlsdGVyaW5nIGZvcm0gcmVuZGVyZXIgY2FuIHNldCBhbnkgdmFsdWUgaGVyZSBhbmQgaXQgY2FuIGJlIHVzZWQgdG8gYnVpbGQgYSBxdWVyeSB0byB0aGUgc2VydmVyLiAqL1xuICBleHRlcm5hbEZpbHRlclF1ZXJ5PzogYW55O1xufVxuXG4vKiogRGVzY3JpYmVzIGFuIG9iamVjdCB3aXRoIGRhdGEgZ3JpZCBjb25maWd1cmF0aW9uLiAqL1xuZXhwb3J0IGludGVyZmFjZSBHcmlkQ29uZmlnIHtcbiAgLyoqIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdHMgZm9yIGFsbCB0aGUgY29sdW1ucy4gKi9cbiAgY29sdW1uczogQ29sdW1uQ29uZmlnW107XG5cbiAgLyoqIFBhZ2luYXRpb24gb2JqZWN0LiAqL1xuICBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uO1xufVxuXG4vKiogICovXG5leHBvcnQgY29uc3QgZW51bSBTcGVjaWFsQ29sdW1uTmFtZSB7XG4gIC8qKiBDb2x1bW4gd2l0aCBjaGVja2JveC4gKi9cbiAgQ2hlY2tib3ggPSAnY2hlY2tib3gnLFxuXG4gIC8qKiBDb2x1bW4gd2l0aCByb3cgYWN0aW9ucy4gKi9cbiAgQWN0aW9ucyA9ICdhY3Rpb25zJ1xufVxuXG4vKiogICovXG5leHBvcnQgY29uc3QgZW51bSBDb2x1bW5EYXRhVHlwZSB7XG4gIC8qKiBDb2x1bW4gd2l0aCBpY29uLiAqL1xuICBJY29uID0gJ2ljb24nLFxuXG4gIC8qKiBOdW1lcmljIGNvbHVtbi4gKi9cbiAgTnVtZXJpYyA9ICdudW1lcmljJyxcblxuICAvKiogQ29sdW1uIHdpdGggc2hvcnQgdGV4dC4gKi9cbiAgVGV4dFNob3J0ID0gJ3RleHQtc2hvcnQnLFxuXG4gIC8qKiBDb2x1bW4gd2l0aCBsb25nIHRleHQuICovXG4gIFRleHRMb25nID0gJ3RleHQtbG9uZydcbn1cblxuLyoqIENsYXNzZXMgZm9yIGNvbHVtbiBkYXRhIHJlY29yZC4gKi9cbmV4cG9ydCBjb25zdCBlbnVtIENvbHVtbkRhdGFSZWNvcmRDbGFzc05hbWUge1xuICAvKiogQW4gaWNvbi4gKi9cbiAgSWNvbiA9ICdkYXRhLXJlY29yZC1pY29uJyxcblxuICAvKiogQSBoZWFkZXIuICovXG4gIEhlYWRlciA9ICdkYXRhLXJlY29yZC1oZWFkZXInLFxuXG4gIC8qKiBEZWZhdWx0IC0gZW1wdHkuICovXG4gIERlZmF1bHQgPSAnJ1xufVxuXG5leHBvcnQgY29uc3QgbWluQ29sdW1uR3JpZFRyYWNrU2l6ZSA9IDgwO1xuXG4vKiogTWFwcyBjb2x1bW4gdHlwZXMgdG8gcmVsYXRpdmUgd2lkdGhzLiAqL1xuZXhwb3J0IGNvbnN0IHJhdGlvc0J5Q29sdW1uVHlwZXMgPSB7XG4gIC8qKiBUaGUgd2lkdGggcmF0aW9uIGZvciBpY29uIGNvbHVtbiB0eXBlLiAqL1xuICBpY29uOiAxLFxuXG4gIC8qKiBUaGUgd2lkdGggcmF0aW9uIGZvciBudW1lcmljIGNvbHVtbiB0eXBlLiAqL1xuICBudW1lcmljOiAxLFxuXG4gIC8qKiBUaGUgd2lkdGggcmF0aW9uIGZvciBzaG9ydCB0ZXh0IGNvbHVtbiB0eXBlLiAqL1xuICAndGV4dC1zaG9ydCc6IDEuNjcsXG5cbiAgLyoqIFRoZSB3aWR0aCByYXRpb24gZm9yIGxvbmcgdGV4dCBjb2x1bW4gdHlwZS4gKi9cbiAgJ3RleHQtbG9uZyc6IDMuMzNcbn07XG5cbi8qKiBTb3J0aW5nIG9yZGVyOiBhc2NlbmRpbmcsIGRlc2NlbmRpbmcsIG9yIG5vdCBzcGVjaWZpZWQuICovXG5leHBvcnQgdHlwZSBTb3J0T3JkZXIgPSAnYXNjJyB8ICdkZXNjJyB8ICcnO1xuXG4vKipcbiAqIEEgZmlsdGVyIHByZWRpY2F0ZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSBpdGVtIFRoZSBjdXJyZW50IGl0ZW0gdG8gYmUgY2hlY2tlZC5cbiAqIEBwYXJhbSBwYXRoIFRoZSBwcm9wZXJ0eSBwYXRoIGNvbmZpZ3VyZWQgaW4gdGhlIGN1cnJlbnQgY29sdW1uLlxuICogQHJldHVybnMgVGhlIGJvb2xlYW4gdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBpdGVtIG1hdGNoZXMgYSBjb25kaXRpb24gb3Igbm90LlxuICovXG5leHBvcnQgdHlwZSBGaWx0ZXJQcmVkaWNhdGVGdW5jdGlvbiA9IChpdGVtOiBvYmplY3QsIHBhdGg6IHN0cmluZykgPT4gYm9vbGVhbjtcblxuLyoqIEZpbHRlcmluZyBhY3Rpb25zLiAqL1xuZXhwb3J0IGVudW0gRmlsdGVyaW5nQWN0aW9uVHlwZSB7XG4gIC8qKiBBY3Rpb24gaW52b2tlZCB3aGVuIGZpbHRlciBzZXR0aW5ncyBhcmUgdG8gYmUgYXBwbGllZC4gKi9cbiAgQXBwbHlGaWx0ZXIgPSAnQVBQTFlfRklMVEVSJyxcblxuICAvKiogQWN0aW9uIGludm9rZWQgd2hlbiBmaWx0ZXIgc2V0dGluZ3MgYXJlIHRvIGJlIGNsZWFyZWQuICovXG4gIFJlc2V0RmlsdGVyID0gJ1JFU0VUX0ZJTFRFUidcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGb3JtbHlDb2x1bW5GaWx0ZXJpbmdDb25maWcge1xuICAvKiogRGVmaW5lcyBhIEZpZWxkQ29uZmlnIGNvbmZpZ3VyYXRpb24gZm9yIEZvcm1seS4gICovXG4gIGZpZWxkcz86IEZvcm1seUZpZWxkQ29uZmlnW107XG4gIC8qKiBEZWZpbmVzIGEgSlNPTiBzY2hlbWEgZm9yIGZpbHRlcmluZyBjb25maWcgbW9kZWwuIENhbiBiZSB1c2VkIGluc3RlYWQgb2YgYGZpZWxkc2AgKi9cbiAgc2NoZW1hPzogb2JqZWN0O1xuICAvKiogRGVmaW5lcyBhIG1vZGVsIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHJlbmRlcmVkIGZvcm0uICovXG4gIG1vZGVsPzogb2JqZWN0O1xuICAvKiogRGVmaW5lcyBGb3JtR3JvdXAgaW5zdGFuY2UgKi9cbiAgZm9ybUdyb3VwPzogRm9ybUdyb3VwO1xuICAvKipcbiAgICogVHJhbnNmb3JtcyBhIGZpbHRlcmluZyBjb25maWcgbW9kZWwgKGUuZy4gY29taW5nIGZyb20gc2NoZW1hIGZvcm0gY29tcG9uZW50KSB0byBhIHF1ZXJ5IG9iamVjdC5cbiAgICogSG93ZXZlciwgdXNpbmcgc2NoZW1hIGZvcm0gY29tcG9uZW50IGlzIG5vdCBuZWNlc3NhcnkuXG4gICAqIE1vZGVsIGNhbiBiZSBkZWZpbmVkIGFyYml0cmFyaWx5IGJ1dCBtdXN0IGNvbnZlcnRlZCB0byBhIHZhbGlkIHF1ZXJ5IG9iamVjdC5cbiAgICogQHBhcmFtIG1vZGVsIEFuIG9iamVjdCB3aXRoIGRlZmluZWQgc3RydWN0dXJlIChlLmcuIGJ5IHNjaGVtYSkuXG4gICAqIEByZXR1cm5zIEEgcXVlcnkgb2JqZWN0IHRvIGJlIHVzZWQgdG8gZ2VuZXJhdGUgYSBxdWVyeSBzdHJpbmcgKFF1ZXJ5VXRpbHMpLlxuICAgKi9cbiAgZ2V0RmlsdGVyOiAobW9kZWw6IGFueSkgPT4gYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbHVtblNvcnRpbmdDb25maWcge1xuICBwYXRoU29ydGluZ0NvbmZpZ3M6IFBhdGhTb3J0aW5nQ29uZmlnW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF0aFNvcnRpbmdDb25maWcge1xuICBwYXRoOiBzdHJpbmc7XG4gIHNvcnRPcmRlck1vZGlmaWVyPzogU29ydE9yZGVyTW9kaWZpZXI7XG59XG5cbmV4cG9ydCBjb25zdCBlbnVtIFNvcnRPcmRlck1vZGlmaWVyIHtcbiAgS2VlcCxcbiAgSW52ZXJ0XG59XG5cbi8qKiBEZXNjcmliZXMgYW4gaXRlbSBpbiB0aGUgcm93LiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3cge1xuICAvKiogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBpdGVtLiAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKiBBbnkgaXRlbSBwcm9wZXJ0eS4gKi9cbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG4vKiogRGVzY3JpYmVzIGEgcGFnaW5hdGlvbiBvYmplY3QuICovXG5leHBvcnQgaW50ZXJmYWNlIFBhZ2luYXRpb24ge1xuICAvKiogVGhlIG51bWJlciBvZiB0aGUgY3VycmVudCBwYWdlLiAqL1xuICBjdXJyZW50UGFnZT86IG51bWJlcjtcblxuICAvKiogVGhlIG51bWJlciBvZiB0aGUgbmV4dCBwYWdlLiAqL1xuICBuZXh0UGFnZT86IG51bWJlcjtcblxuICAvKiogVGhlIG51bWJlciBvZiBpdGVtcyBvbiBhIHNpbmdsZSBwYWdlLiAqL1xuICBwYWdlU2l6ZTogbnVtYmVyO1xufVxuXG4vKipcbiAqIEEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZmV0Y2ggc2VydmVyIGRhdGEuXG4gKiBAcGFyYW0gZGF0YVNvdXJjZU1vZGlmaWVyIFRoZSBjdXJyZW50IGRhdGEgc291cmNlIG1vZGlmaWVyLlxuICogQHJldHVybnMgUmV0dXJucyB0aGUgcmVzdWx0IGZyb20gc2VydmVyLlxuICovXG5leHBvcnQgdHlwZSBTZXJ2ZXJTaWRlRGF0YUNhbGxiYWNrID0gKFxuICBkYXRhU291cmNlTW9kaWZpZXI6IERhdGFTb3VyY2VNb2RpZmllclxuKSA9PiBTZXJ2ZXJTaWRlRGF0YVJlc3VsdCB8IFByb21pc2U8U2VydmVyU2lkZURhdGFSZXN1bHQ+IHwgT2JzZXJ2YWJsZTxTZXJ2ZXJTaWRlRGF0YVJlc3VsdD47XG5cbi8qKiBEZXNjcmliZXMgYSBkYXRhIHNvdXJjZSBtb2RpZmllciBmb3IgcmVxdWVzdGluZyBzZXJ2ZXIgZGF0YS4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVNvdXJjZU1vZGlmaWVyIHtcbiAgLyoqIFRoZSBsaXN0IG9mIGNvbHVtbnMuICovXG4gIGNvbHVtbnM6IENvbHVtbltdO1xuXG4gIC8qKiBUZXh0IHRvIHNlYXJjaC4gKi9cbiAgc2VhcmNoVGV4dDogc3RyaW5nO1xuXG4gIC8qKiBQYWdpbmF0aW9uIG9iamVjdC4gKi9cbiAgcGFnaW5hdGlvbjogUGFnaW5hdGlvbjtcblxuICAvKiogU2VsZWN0aW9uIGluZm8gb2JqZWN0LiAqL1xuICBzZWxlY3Rpb246IHtcbiAgICAvKiogV2hldGhlciB0aGUgc2VsZWN0aW9uIGlzIGVuYWJsZWQuICovXG4gICAgZW5hYmxlZDogYm9vbGVhbjtcblxuICAgIC8qKiBUaGUgbmFtZSBvZiB0aGUgcHJpbWFyeSBrZXkuICovXG4gICAgcHJpbWFyeUtleTogc3RyaW5nO1xuICB9O1xufVxuXG4vKiogRGVzY3JpYmVzIGEgcmVzdWx0IGZyb20gc2VydmVyIHdpdGggZGF0YSBhbmQgYWRkaXRpb25hbCBzdGF0aXN0aWNzLiAqL1xuZXhwb3J0IHR5cGUgU2VydmVyU2lkZURhdGFSZXN1bHQgPSBJUmVzdWx0TGlzdDxvYmplY3Q+ICYge1xuICAvKiogVGhlIHJlYWwgZ3JhbmQgdG90YWwgbnVtYmVyIG9mIGl0ZW1zICh0aGUgd2hvbGUgZGF0YXNldCkuICovXG4gIHNpemU6IG51bWJlcjtcblxuICAvKiogVGhlIG51bWJlciBvZiBpdGVtcyBhZnRlciBmaWx0ZXJpbmcgYXBwbGllZCB0byB0aGUgd2hvbGUgZGF0YXNldCAoc3Vic2V0KS4gKi9cbiAgZmlsdGVyZWRTaXplOiBudW1iZXI7XG5cbiAgLyoqIFRoZSBsaXN0IG9mIGlkcyBvZiBhbGwgZmlsdGVyZWQgaXRlbXMgKHN1YnNldCkuICovXG4gIGZpbHRlcmVkRGF0YUlkcz86IHN0cmluZ1tdO1xufTtcblxuLyoqIERlc2NyaWJlcyBhbiBvYmplY3Qgd2l0aCBkYXRhIHNvdXJjZSBzdGF0aXN0aWNzLiAqL1xuZXhwb3J0IGludGVyZmFjZSBEYXRhU291cmNlU3RhdHMge1xuICAvKiogVGhlIHJlYWwgZ3JhbmQgdG90YWwgbnVtYmVyIG9mIGl0ZW1zICh0aGUgd2hvbGUgZGF0YXNldCkuICovXG4gIHNpemU6IG51bWJlcjtcblxuICAvKiogVGhlIG51bWJlciBvZiBpdGVtcyBhZnRlciBmaWx0ZXJpbmcgYXBwbGllZCB0byB0aGUgd2hvbGUgZGF0YXNldCAoc3Vic2V0KS4gKi9cbiAgZmlsdGVyZWRTaXplOiBudW1iZXI7XG5cbiAgLyoqIFRoZSBudW1iZXIgb2YgdGhlIGN1cnJlbnQgcGFnZS4gKi9cbiAgY3VycmVudFBhZ2U6IG51bWJlcjtcblxuICAvKiogVGhlIG51bWJlciBvZiB0aGUgbmV4dCBwYWdlLiAqL1xuICBuZXh0UGFnZT86IG51bWJlcjtcblxuICAvKiogVGhlIG51bWJlciBvZiBpdGVtcyBjdXJyZW50bHkgc2hvd24gaW4gdGhlIGxpc3QgdmlldywgYS5rLmEuIGN1cnJlbnQgcGFnZSAod2hhdCB0aGUgdXNlciBzZWVzIG9uIHNjcmVlbikuICovXG4gIGN1cnJlbnRQYWdlU2l6ZTogbnVtYmVyO1xuXG4gIC8qKiBUaGUgbnVtYmVyIG9mIGl0ZW1zIG9uIHRoZSBmaXJzdCBwYWdlLiAgKi9cbiAgZmlyc3RQYWdlU2l6ZTogbnVtYmVyO1xufVxuXG4vKiogRGVzY3JpYmVzIGRhdGEgZ3JpZCBkaXNwbGF5IG9wdGlvbnMuICovXG5leHBvcnQgaW50ZXJmYWNlIERpc3BsYXlPcHRpb25zIHtcbiAgLyoqIFNob3cgb3IgaGlkZSB6ZWJyYS1zdHJpcGluZyBpbiB0aGUgdGFibGUgKi9cbiAgc3RyaXBlZDogYm9vbGVhbjtcblxuICAvKiogU2hvdyBvciBoaWRlIGVhY2ggY2VsbCBib3JkZXIgKi9cbiAgYm9yZGVyZWQ6IGJvb2xlYW47XG5cbiAgLyoqIFNob3cgb3IgaGlkZSB0aGUgZ3JpZCBoZWFkZXIgKi9cbiAgZ3JpZEhlYWRlcjogYm9vbGVhbjtcblxuICAvKiogU2hvdyBvciBoaWRlIGZpbHRlciBsYWJlbCBpbiB0aGUgZ3JpZCBoZWFkZXIgKi9cbiAgZmlsdGVyOiBib29sZWFuO1xufVxuXG4vKiogRGVzY3JpYmVzIGEgZGF0YSBncmlkIGFjdGlvbiBjb250cm9sIGZvciBpbmRpdmlkdWFsIGl0ZW0uICovXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbkNvbnRyb2wge1xuICAvKiogVGhlIHR5cGUgb2YgdGhlIGFjdGlvbiwgcHJlZGVmaW5lZCBvciBjdXN0b20uICovXG4gIHR5cGU6IEJ1aWx0SW5BY3Rpb25UeXBlIHwgc3RyaW5nO1xuXG4gIC8qKiBUaGUgbGFiZWwgZm9yIHRoZSBhY3Rpb24gYnV0dG9uLiAqL1xuICB0ZXh0Pzogc3RyaW5nO1xuXG4gIC8qKiBUaGUgaWNvbiBmb3IgdGhlIGFjdGlvbiBidXR0b24uICovXG4gIGljb24/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSBpdGVtIFRoZSBpdGVtIHRvIHBlcmZvcm0gdGhlIGFjdGlvbiBvbi5cbiAgICogQHBhcmFtIHJlbG9hZCBUaGUgZnVuY3Rpb24gdG8gY2FsbCwgaWYgeW91IHdhbnQgdG8gcmVsb2FkIHRoZSBncmlkLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbiAgY2FsbGJhY2s6ICgoaXRlbTogUm93LCByZWxvYWQ6ICgpID0+IHZvaWQpID0+IHZvaWQpIHwgRnVuY3Rpb247XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIGFjdGlvbiBzaG91bGQgYmUgc2hvd24gZm9yIGdpdmVuIGl0ZW0gKGlmIG5vdCBkZWZpbmVkLCB0aGUgYWN0aW9uIHdpbGwgYmUgc2hvd24gYWx3YXlzKS5cbiAgICogQHBhcmFtIGl0ZW0gVGhlIGl0ZW0gZm9yIHdoaWNoIHRoZSBhY3Rpb24gaXMgc3VwcG9zZWQgdG8gYmUgcGVyZm9ybWVkLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbiAgc2hvd0lmPzogKChpdGVtOiBSb3cpID0+IGJvb2xlYW4pIHwgRnVuY3Rpb247XG5cbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG4vKiogRGVzY3JpYmVzIGEgZGF0YSBncmlkIGFjdGlvbiBjb250cm9sIGZvciBtdWx0aXBsZSBpdGVtcy4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnVsa0FjdGlvbkNvbnRyb2wgZXh0ZW5kcyBBY3Rpb25Db250cm9sIHtcbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSBzZWxlY3RlZEl0ZW1JZHMgVGhlIGxpc3Qgb2YgaWRzIG9mIHRoZSBzZWxlY3RlZCBpdGVtcy5cbiAgICogQHBhcmFtIHJlbG9hZCBUaGUgZnVuY3Rpb24gdG8gY2FsbCwgaWYgeW91IHdhbnQgdG8gcmVsb2FkIHRoZSBncmlkLlxuICAgKi9cbiAgY2FsbGJhY2soc2VsZWN0ZWRJdGVtSWRzOiBzdHJpbmdbXSwgcmVsb2FkOiAoKSA9PiB2b2lkKTogdm9pZDtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgYWN0aW9uIHNob3VsZCBiZSBzaG93biBmb3IgZ2l2ZW4gc2VsZWN0ZWQgaXRlbXMgKGlmIG5vdCBkZWZpbmVkLCB0aGUgYWN0aW9uIHdpbGwgYmUgc2hvd24gYWx3YXlzKS5cbiAgICogQHBhcmFtIHNlbGVjdGVkSXRlbUlkcyBUaGUgbGlzdCBvZiBpZHMgb2YgdGhlIHNlbGVjdGVkIGl0ZW1zIGZvciB3aGljaCB0aGUgYWN0aW9uIGlzIHN1cHBvc2VkIHRvIGJlIHBlcmZvcm1lZC5cbiAgICovXG4gIHNob3dJZj8oc2VsZWN0ZWRJdGVtSWRzOiBzdHJpbmdbXSk6IGJvb2xlYW47XG59XG5cbi8qKiBEZXNjcmliZXMgYSBkYXRhIGdyaWQgYWN0aW9uIGNvbnRyb2wgZm9yIHRoZSBoZWFkZXIuICovXG5leHBvcnQgaW50ZXJmYWNlIEhlYWRlckFjdGlvbkNvbnRyb2wgZXh0ZW5kcyBBY3Rpb25Db250cm9sIHtcbiAgLyoqXG4gICAqIEN1c3RvbSB0ZW1wbGF0ZSBjYW4gYmUgcHJvdmlkZWQuIElmIG5vIHRlbXBsYXRlIGlzIHByb3ZpZGVkLFxuICAgKiB0aGUgZGVmYXVsdCBoZWFkZXJBY3Rpb25Db250cm9sIHRlbXBsYXRlIGlzIHVzZWQuXG4gICAqL1xuICB0ZW1wbGF0ZT86IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqL1xuICBjYWxsYmFjaygpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBhY3Rpb24gc2hvdWxkIGJlIHNob3duLlxuICAgKi9cbiAgc2hvd0lmPygpOiBib29sZWFuO1xufVxuXG4vKiogUHJlZGVmaW5lZCB0eXBlcyBvZiBhY3Rpb25zLiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gQnVpbHRJbkFjdGlvblR5cGUge1xuICAvKiogRWRpdCBidWlsdC1pbiBhY3Rpb24uICovXG4gIEVkaXQgPSAnRURJVCcsXG5cbiAgLyoqIERlbGV0ZSBidWlsdC1pbiBhY3Rpb24uICovXG4gIERlbGV0ZSA9ICdERUxFVEUnLFxuXG4gIC8qKiBFeHBvcnQgYnVpbHQtaW4gYWN0aW9uLiAqL1xuICBFeHBvcnQgPSAnRVhQT1JUJ1xufVxuIl19