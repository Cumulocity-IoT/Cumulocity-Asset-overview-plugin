"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = void 0;
const CopyPlugin = require("copy-webpack-plugin");
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const webpack = require("webpack");
const plugin_1 = require("../plugin/plugin");
const federation_1 = require("./federation");
function config(env) {
    var _a;
    const cumulocityPlugin = new plugin_1.CumulocityPlugin({
        app: env.app,
        mode: env.mode,
        indexTemplate: env.app.indexTemplate
    });
    let fromPath = 'node_modules/@c8y/style/img';
    try {
        fromPath = (0, path_1.join)((0, path_1.dirname)(require.resolve('@c8y/style')), 'img');
    }
    catch (ex) {
        console.warn('@c8y/style not found, no preview images included', ex);
    }
    // in case of ngcli env.entry points to a file, while with c8ycli it points to a directory.
    // calling dirname for a directory will return the parent directory..
    // so dirname should only be called in case env.entry points to a file.
    let entryDir = env.entry;
    const stat = (0, fs_extra_1.lstatSync)(env.entry);
    if (!stat.isDirectory()) {
        entryDir = (0, path_1.dirname)(env.entry);
    }
    const fileCopy = {
        patterns: [
            ...(env.app.copy || []),
            {
                from: `${entryDir}{/,}readme{.md,}`,
                to: 'README.md',
                globOptions: {
                    caseSensitiveMatch: false
                },
                noErrorOnMissing: true
            },
            {
                from: `${entryDir}{/,}{license,licence}{.txt,.md,}`,
                to: 'LICENSE.txt',
                globOptions: {
                    caseSensitiveMatch: false
                },
                noErrorOnMissing: true
            },
            {
                from: fromPath,
                to: 'c8y-style-assets',
                noErrorOnMissing: true
            }
        ]
    };
    return {
        plugins: [
            new webpack.DefinePlugin({
                __WEBPACK__: true,
                __BETA__: JSON.stringify(env.beta),
                __MODE__: JSON.stringify(env.mode),
                __ENTRY_APP__: JSON.stringify(env.entry),
                __ENTRY_BRANDING__: JSON.stringify(cumulocityPlugin.getBrandingEntry(env.branding)),
                __VERSION_NG1__: JSON.stringify(cumulocityPlugin.getVersion('@c8y/ng1-modules/package.json')),
                __VERSION_NGX__: JSON.stringify(cumulocityPlugin.getVersion('@c8y/ngx-components/package.json')),
                __VERSION_PACKAGE__: JSON.stringify((_a = env === null || env === void 0 ? void 0 : env.app) === null || _a === void 0 ? void 0 : _a.version)
            }),
            (0, federation_1.getModuleFederationExports)(env),
            cumulocityPlugin,
            new CopyPlugin(fileCopy)
        ].filter(Boolean)
    };
}
exports.config = config;
//# sourceMappingURL=plugin.js.map