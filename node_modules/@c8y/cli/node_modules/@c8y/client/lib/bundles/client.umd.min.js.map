{"version":3,"file":"client.umd.min.js","sources":["../../src/core/Paging.ts","../../src/core/Service.ts","../../../../node_modules/cross-fetch/dist/browser-ponyfill.js","../../src/core/FetchClient.ts","../../../../node_modules/b2a/es/common.js","../../../../node_modules/b2a/es/btoa.js","../../src/core/BasicAuth.ts","../../../../node_modules/b2a/es/atob.js","../../src/core/BearerAuth.ts","../../src/core/CookieAuth.ts","../../src/core/MicroserviceClientRequestAuth.ts","../../src/core/NodeJSCookieAuth.ts","../../src/core/Severity.ts","../../src/core/QueriesUtil.ts","../../src/realtime/MetaChannel.ts","../../../../node_modules/cometd/cometd.js","../../../../node_modules/isomorphic-cometd/browser.js","../../src/realtime/Realtime.ts","../../src/event/EventService.ts","../../../../node_modules/form-data/lib/browser.js","../../src/event/EventBinaryService.ts","../../src/inventory/InventoryBinaryService.ts","../../src/inventory/InventoryService.ts","../../src/measurement/MeasurementService.ts","../../src/measurement/ISeriesFilter.ts","../../src/alarm/AlarmService.ts","../../src/alarm/AlarmStatus.ts","../../src/operation/OperationService.ts","../../src/operation/OperationBulkService.ts","../../src/operation/OperationBulkStatus.ts","../../src/operation/OperationBulkGeneralStatus.ts","../../src/operation/OperationStatus.ts","../../src/tenant/TenantService.ts","../../src/tenant/TenantStatus.ts","../../src/tenant/TfaStrategy.ts","../../src/user/UserInventoryRoleService.ts","../../src/user/UserService.ts","../../src/user/PasswordStrength.ts","../../src/application/ApplicationBinaryService.ts","../../src/application/ApplicationType.ts","../../src/application/ApplicationService.ts","../../src/application/IApplicationInstanceDetails.ts","../../src/application/BillingMode.ts","../../src/application/Isolation.ts","../../src/application/ApplicationAvailability.ts","../../src/system-options/SystemOptionsService.ts","../../src/tenant-options/TenantOptionsService.ts","../../src/tenant-security-options/TenantSecurityOptionsService.ts","../../src/tenant-login-options/TenantLoginOptionsService.ts","../../src/tenant-login-options/ITenantLoginOptions.ts","../../src/audit/AuditService.ts","../../src/audit/AuditRecordType.ts","../../src/audit/ChangeType.ts","../../src/inventory-role/InventoryRoleService.ts","../../src/device-registration/DeviceRegistrationStatus.ts","../../src/device-registration/DeviceRegistrationService.ts","../../src/device-registration/DeviceRegistrationBulkService.ts","../../src/device-registration/DeviceRegistrationSecurityMode.ts","../../src/user-role/UserRoleService.ts","../../src/user-group/UserGroupService.ts","../../src/identity/IdentityService.ts","../../src/trusted-certificates/TrustedCertificateService.ts","../../src/smart-groups/SmartGroupsService.ts","../../src/smart-rules/SmartRulesService.ts","../../src/Client.ts"],"sourcesContent":["import { Service } from './Service';\nimport { IResultList } from './IResultList';\n\n/**\n * Paging allows you to query the next and previous data chunks\n * in a convenient way. You can also go to a specific page or just read\n * page information about the current data chunk.\n * Note that page numbers are generated by backend\n * and may be used as offset rather than a continuous range of positive numbers\n * (e.g. in case of users with restricted permissions).\n */\nexport class Paging<TData> {\n  /**\n   * Holds the number of the current page, so in fact\n   * the data chunk you are looking at.\n   */\n  currentPage: number;\n  /**\n   * Holds the number of the next page.\n   */\n  nextPage: number;\n  /**\n   * Holds the number of the previous page.\n   */\n  prevPage: number;\n  /**\n   * Holds the number of the maximum data that you will\n   * get with the response.\n   */\n  pageSize: number;\n  /**\n   * Holds the number of total pages regarding to the\n   * given page size.\n   */\n  totalPages: number;\n\n  private service: Service<TData>;\n  private filter: object;\n\n  constructor(service: Service<TData>, statistics: any, filter: object) {\n    this.filter = filter;\n    this.service = service;\n    this.currentPage = statistics.currentPage;\n    this.nextPage = statistics.nextPage;\n    this.prevPage = statistics.prevPage;\n    this.pageSize = statistics.pageSize;\n    this.totalPages = statistics.totalPages;\n  }\n\n  /**\n   * Gets the next page of available data from the server.\n   * @param filter\n   */\n  async next(filter: object = {}): Promise<IResultList<TData>> {\n    return this.list(this.getFilter(filter, this.nextPage));\n  }\n\n  /**\n   * Gets the previous page of available data from server.\n   * @param filter\n   */\n  async prev(filter: object = {}): Promise<IResultList<TData>> {\n    return this.list(this.getFilter(filter, this.prevPage));\n  }\n\n  /**\n   * Method used by next(), prev() and goto() to call the service.list method.\n   * It is public so it can be overriden in special cases (like children objects\n   * in inventory).\n   * @param filter\n   */\n  async list(filter: object = {}): Promise<IResultList<TData>> {\n    return this.service.list(filter);\n  }\n\n  /**\n   * Goes to the page that you define as page parameter.\n   * @param page\n   * @param filter\n   */\n  async goto(page: number, filter: object = {}): Promise<IResultList<TData>> {\n    return this.list(this.getFilter(filter, page));\n  }\n\n  private getFilter(filter: object, page: number) {\n    return Object.assign(filter, this.filter, { currentPage: page });\n  }\n}\n","import { IFetchClient } from './IFetchClient';\nimport { IFetchOptions } from './IFetchOptions';\nimport { IFetchResponse } from './IFetchResponse';\nimport { IIdentified } from './IIdentified';\nimport { IResult } from './IResult';\nimport { IResultList } from './IResultList';\nimport { Paging } from './Paging';\n\nimport { Realtime } from '../realtime/index';\n\nexport abstract class Service<TData extends IIdentified> {\n  protected propertyName: string;\n  protected abstract baseUrl: string;\n  protected abstract listUrl: string;\n  protected channel: string;\n  private cache = new Map();\n\n  constructor(protected client: IFetchClient, protected realtime?: Realtime) {\n    const methodsToHide = ['list', 'create', 'update', 'detail', 'delete'];\n    const prototype = Object.getPrototypeOf(this);\n    methodsToHide.forEach(method => {\n      if (!prototype.hasOwnProperty(method)) {\n        Object.defineProperty(this, method, {\n          get() {\n            return undefined;\n          }\n        });\n      }\n    });\n  }\n\n  async list(filter: object = {}): Promise<IResultList<TData>> {\n    const headers = { accept: 'application/json' };\n    const url = this.listUrl;\n    const res = await this.fetch(url, this.changeFetchOptions({ headers, params: filter }, url));\n    const json = await res.json();\n    const data = this.propertyName ? json[this.propertyName] : json;\n    const paging = this.getPaging(json, filter);\n    return { res, data, paging };\n  }\n\n  protected async detail(\n    entityOrId: string | number | IIdentified,\n    filter: object = {}\n  ): Promise<IResult<TData>> {\n    const headers = { accept: 'application/json' };\n    const url = this.getDetailUrl(entityOrId);\n    const res = await this.fetch(\n      url,\n      this.changeFetchOptions({ headers, params: { ...filter } }, url)\n    );\n    const data = await res.json();\n    return { res, data };\n  }\n\n  protected async create(entity: Partial<TData>): Promise<IResult<TData>> {\n    const url = this.listUrl;\n    const method = 'POST';\n    const body = JSON.stringify(this.onBeforeCreate(entity));\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const res = await this.fetch(url, this.changeFetchOptions({ method, body, headers }, url));\n    const data = await res.json();\n    return { res, data };\n  }\n\n  protected async update(entity: Partial<TData>): Promise<IResult<TData>> {\n    const url = this.getDetailUrl(entity);\n    const method = 'PUT';\n    const body = JSON.stringify(this.onBeforeUpdate(entity));\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const res = await this.fetch(url, this.changeFetchOptions({ method, body, headers }, url));\n    const data = await res.json();\n    return { res, data };\n  }\n\n  protected async delete(\n    entityOrId: string | number | IIdentified,\n    params?: any\n  ): Promise<IResult<null>> {\n    const method = 'DELETE';\n    const url = this.getDetailUrl(entityOrId);\n    const res = await this.fetch(url, this.changeFetchOptions({ method, params }, url));\n    return { res, data: null };\n  }\n\n  protected onBeforeCreate(obj: Partial<TData>): Partial<TData> {\n    delete obj.id;\n    return obj;\n  }\n\n  protected onBeforeUpdate(objWithId: Partial<TData>): Partial<TData> {\n    return objWithId;\n  }\n\n  protected changeFetchOptions(options: any, _url = '') {\n    return options;\n  }\n\n  protected getUrl(url = ''): string {\n    const baseUrl = this.baseUrl.replace(/\\/+$/, '');\n    const partialUrl = url.replace(/^\\/+/, '');\n    return `${baseUrl}/${partialUrl}`;\n  }\n\n  protected getEntityId(entityOrId: string | number | IIdentified): string {\n    if (entityOrId === undefined || entityOrId === null) {\n      return '';\n    }\n\n    if (typeof entityOrId === 'object') {\n      return this.getEntityId(entityOrId.id);\n    }\n\n    return `${entityOrId}`;\n  }\n\n  protected getDetailUrl(entityOrId: string | number | IIdentified): string {\n    const id = this.getEntityId(entityOrId);\n    return `${this.listUrl}/${id}`;\n  }\n\n  protected async fetch(url: string, init?: IFetchOptions): Promise<IFetchResponse> {\n    const fullUrl = this.getUrl(url);\n    const res: IFetchResponse = await this.client.fetch(fullUrl, init);\n    return await this.handleErrorStatusCodes(res);\n  }\n\n  /**\n   * Checks the response for errors and throws exceptions, otherwise returns the response as is.\n   *\n   * @param response The response from server.\n   *\n   * @returns If no errors are detected, it returns the same response.\n   *\n   * @throws If an error is detected, it throws `{ res, data }`, where `data` contains error details from server.\n   */\n  protected async handleErrorStatusCodes(response: IFetchResponse): Promise<IFetchResponse> {\n    if (response.status >= 400) {\n      let data = null;\n      try {\n        data = await response.json();\n      } catch (ex) {\n        try {\n          data = await response.text();\n        } catch (ex) {\n          // do nothing\n        }\n      }\n      throw { res: response, data };\n    }\n    return response;\n  }\n\n  protected mimeType(type: string): string {\n    return `application/vnd.com.nsn.cumulocity.${type}+json`;\n  }\n\n  protected getIdString(reference: number | string | IIdentified): string {\n    let id;\n    if (typeof reference === 'object') {\n      id = reference.id;\n    } else {\n      id = reference;\n    }\n    return String(id);\n  }\n\n  protected getPaging(json: any, filter: object): Paging<TData> {\n    if (json.statistics) {\n      const statistics = {\n        ...json.statistics,\n        nextPage: this.getCurrentPageFromLink(json.next),\n        prevPage: this.getCurrentPageFromLink(json.prev)\n      };\n      return new Paging<TData>(this, statistics, filter);\n    }\n    return null;\n  }\n\n  protected getCurrentPageFromLink(link = '') {\n    const matches = link.match(/currentPage=(-{0,1}\\d+)/);\n    return matches && parseInt(matches[1], 10);\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","import fetch from 'cross-fetch';\n\nimport { IFetchClient } from './IFetchClient';\nimport { IFetchOptions } from './IFetchOptions';\nimport { IFetchResponse } from './IFetchResponse';\nimport { IAuthentication } from './IAuthentication';\n\n// eslint-disable-next-line prefer-const\nlet auths = new WeakMap();\n\nexport class FetchClient implements IFetchClient {\n  tenant = '';\n  defaultHeaders = {};\n  constructor(authOrBaseUrl?: IAuthentication | string, public baseUrl?: string) {\n    if (typeof authOrBaseUrl === 'string') {\n      baseUrl = authOrBaseUrl;\n    } else {\n      this.setAuth(authOrBaseUrl);\n    }\n    this.baseUrl = this.resolveServerUrl(baseUrl);\n  }\n\n  setAuth(auth: IAuthentication) {\n    auths.set(this, auth);\n  }\n\n  async fetch(url: string, init?: IFetchOptions): Promise<IFetchResponse> {\n    let fetchFn = fetch;\n    try {\n      fetchFn = window.fetch || fetchFn;\n    } catch (e) {\n      /* do nothing */\n    }\n    const fullUrl: string = this.getUrl(url, init);\n    const options: IFetchOptions = this.getFetchOptions(init);\n    const optionsWithAdjustedBody = this.adjustOptionsForFormData(options);\n    return fetchFn(fullUrl, optionsWithAdjustedBody);\n  }\n\n  getUrl(url = '', options?: IFetchOptions): string {\n    const params = options && options.params;\n    let paramPart = '';\n    if (params && Object.keys(params).length) {\n      paramPart = Object.keys(params)\n        .map(k => {\n          let vals = params[k];\n          const encodedKey = encodeURIComponent(k);\n          if (!Array.isArray(vals)) {\n            vals = [vals];\n          }\n          return vals.map(v => `${encodedKey}=${encodeURIComponent(v)}`).join('&');\n        })\n        .join('&');\n      paramPart = `?${paramPart}`;\n    }\n    const baseUrl = this.baseUrl.replace(/\\/+$/, '').replace(/^\\/+/, '');\n    const partialUrl = url.replace(/\\/+$/, '').replace(/^\\/+/, '');\n    return `${baseUrl}/${partialUrl}${paramPart}`;\n  }\n\n  getFetchOptions(options: IFetchOptions = {}): IFetchOptions {\n    let clonedOptions = { ...options };\n    const auth = auths.get(this);\n    clonedOptions.headers = Object.assign({}, this.defaultHeaders, clonedOptions.headers, {\n      UseXBasic: true\n    });\n    delete clonedOptions.params;\n    clonedOptions = auth ? auth.getFetchOptions(clonedOptions) : clonedOptions;\n    return clonedOptions;\n  }\n\n  getCometdHandshake(config: any = {}) {\n    const auth = auths.get(this);\n    return auth ? auth.getCometdHandshake(config) : config;\n  }\n\n  private resolveServerUrl(baseUrl = ''): any {\n    if (baseUrl && baseUrl.startsWith('http')) {\n      return baseUrl.replace(/\\/+$/, '');\n    }\n    try {\n      const location = window.location;\n      return `${location.protocol}//${location.host}/${baseUrl.replace(/\\/+$/, '')}`;\n    } catch (ex) {\n      throw Error('Your environment does not support relative URLs. Please provide a base URL.');\n    }\n  }\n\n  private adjustOptionsForFormData(options: IFetchOptions): RequestInit {\n    const newOptions = Object.assign(options, { body: options.body as RequestInit['body'] });\n    return newOptions;\n  }\n}\n","export var error = function (message) {\n  function E() {\n    this.message = message;\n  }\n\n  E.prototype = new Error();\n  E.prototype.name = 'InvalidCharacterError';\n  E.prototype.code = 5;\n  return E;\n};\nexport var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';","import { chars, error } from './common'; // btoa polyfill for IE<10 courtesy https://gist.github.com/nignag/999166\n\nvar E = error('The string to be encoded contains characters out of range');\nexport var _btoa = typeof btoa !== 'undefined'\n/* istanbul ignore next */\n? function (input) {\n  return btoa(input);\n} : function (input) {\n  var str = String(input);\n  var output = '';\n\n  for ( // initialize result and counter\n  var block, charCode, idx = 0, map = chars; // if the next str index does not exist:\n  //   change the mapping table to \"=\"\n  //   check if d has no fractional digits\n  str.charAt(idx | 0) || (map = '=', idx % 1); // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n  output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {\n    charCode = str.charCodeAt(idx += 3 / 4);\n\n    if (charCode > 0xFF) {\n      throw new E();\n    }\n\n    block = block << 8 | charCode;\n  }\n\n  return output;\n};\n\nvar utf8 = function (input) {\n  return encodeURIComponent(input).replace(/%([0-9A-F]{2})/g, function (match, p1) {\n    return String.fromCharCode('0x' + p1);\n  });\n};\n\nexport default (function (input) {\n  return _btoa(utf8(input));\n});","import { IAuthentication, ICredentials } from './IAuthentication';\nimport { btoa } from 'b2a';\n\n// this is var and not const to please typedoc https://github.com/TypeStrong/typedoc/issues/691\n// eslint-disable-next-line no-var\nvar secrets = new WeakMap();\n\n/**\n * Allows to use Basic-Auth for Authorization to the\n * Cumulocity API.\n */\nexport class BasicAuth implements IAuthentication {\n  user: string;\n  /**\n   * Authenticates the given user against the given tenant.\n   * @param name\n   * @param password\n   * @param tenant\n   */\n  constructor(credentials?: ICredentials) {\n    this.updateCredentials(credentials);\n  }\n\n  updateCredentials({ tenant, user, password, token, tfa }: ICredentials = {}) {\n    const secret = secrets.get(this) || {};\n    if (user && tenant) {\n      user = `${tenant}/${user}`;\n    }\n    user = user || this.user;\n    password = password || secret.password;\n    if (!token && user && password) {\n      token = btoa(`${user}:${password}`);\n    }\n    if (user) {\n      this.user = user;\n    }\n    token = token || secret.token;\n    tfa = tfa || secret.tfa;\n    secrets.set(this, { tfa, token, password });\n    return token;\n  }\n\n  getFetchOptions(options) {\n    const secret = secrets.get(this);\n    const { token, tfa } = secret;\n    const xsrfToken = this.getCookieValue('XSRF-TOKEN');\n    const headers: any = {\n      Authorization: `Basic ${token || ''}`,\n      ...(xsrfToken ? { 'X-XSRF-TOKEN': xsrfToken } : undefined)\n    };\n\n    if (tfa) {\n      headers.tfatoken = tfa;\n    }\n    options.headers = Object.assign(headers, options.headers);\n    return options;\n  }\n\n  getCometdHandshake(config: { ext?: object } = {}) {\n    const secret = secrets.get(this);\n    const { token, tfa } = secret;\n    const KEY = 'com.cumulocity.authn';\n    const ext = (config.ext = config.ext || {});\n    ext[KEY] = Object.assign(ext[KEY] || {}, { token, tfa });\n    return config;\n  }\n\n  logout() {\n    delete this.user;\n    secrets.set(this, {});\n  }\n\n  private getCookieValue(name) {\n    try {\n      const value = document.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)');\n      return value ? value.pop() : undefined;\n    } catch (ex) {\n      return undefined;\n    }\n  }\n}\n","import { chars, error } from './common';\nvar E = error('The string to be decoded is not correctly encoded');\nexport var _atob = typeof atob !== 'undefined'\n/* istanbul ignore next */\n? function (input) {\n  return atob(input);\n} : function (input) {\n  var str = String(input).replace(/[=]+$/, '');\n\n  if (str.length % 4 == 1) {\n    throw new E();\n  }\n\n  var output = '';\n\n  for ( // initialize result and counters\n  var bc = 0, bs, buffer, idx = 0; // get next character\n  buffer = str.charAt(idx++); // character found in table? initialize bit storage and add its ascii value;\n  ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, // and if not first of each 4 characters,\n  // convert the first 8 bits to one ascii character\n  bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n\n  return output;\n};\n\nvar utf16 = function (input) {\n  return decodeURIComponent(input.split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n};\n\nexport default (function (input) {\n  return utf16(_atob(input));\n});","import { IAuthentication, ICredentials } from './IAuthentication';\n\nconst secrets = new WeakMap();\n\nexport class BearerAuth implements IAuthentication {\n  constructor(token?: string) {\n    secrets.set(this, { token });\n  }\n  getFetchOptions(options: any): any {\n    const secret = secrets.get(this);\n    const { token } = secret;\n    options.headers = Object.assign({ Authorization: `Bearer ${token}` }, options.headers);\n    return options;\n  }\n\n  updateCredentials({ token }: ICredentials): undefined {\n    secrets.set(this, { token });\n    return;\n  }\n\n  getCometdHandshake(config: { ext?: any } = {}) {\n    const secret = secrets.get(this);\n    const { token, tfa } = secret;\n    const KEY = 'com.cumulocity.authn';\n    const ext = (config.ext = config.ext || {});\n    ext[KEY] = Object.assign(ext[KEY] || {}, { token, tfa });\n    return config;\n  }\n\n  logout(): void {\n    secrets.set(this, {});\n  }\n}\n","import { IAuthentication, ICredentials } from './IAuthentication';\nimport { FetchClient } from './FetchClient';\n\n/**\n * Allows to use Cookies for Authorization to the\n * Cumulocity API.\n */\nexport class CookieAuth implements IAuthentication {\n  user: string;\n  private logoutUrl = 'user/logout';\n\n  updateCredentials({ user }: ICredentials = {}): string {\n    this.user = user;\n    return undefined;\n  }\n\n  getFetchOptions(options) {\n    const xsrfToken = this.getCookieValue('XSRF-TOKEN');\n    const headers: any = { 'X-XSRF-TOKEN': xsrfToken };\n    options.headers = Object.assign(headers, options.headers);\n    return options;\n  }\n\n  getCometdHandshake(config: { ext?: object } = {}) {\n    const KEY = 'com.cumulocity.authn';\n    const xsrfToken = this.getCookieValue('XSRF-TOKEN');\n    const ext = (config.ext = config.ext || {});\n    ext[KEY] = Object.assign(ext[KEY] || {}, { xsrfToken });\n    return config;\n  }\n\n  async logout() {\n    if (this.user) {\n      delete this.user;\n    }\n    const client = new FetchClient();\n    client.setAuth(this);\n    const method = 'POST';\n    const body = JSON.stringify({});\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    return client.fetch(this.logoutUrl, { headers, body, method });\n  }\n\n  private getCookieValue(name) {\n    const value = document.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)');\n    return value ? value.pop() : '';\n  }\n}\n","import { IAuthentication, IMicroserviceClientRequestHeaders } from './IAuthentication';\n\n/**\n * Allows to use either Cookie-Auth or Basic-Auth\n * of a microservice client request header\n * for Authorization to the Cumulocity API.\n */\nexport class MicroserviceClientRequestAuth implements IAuthentication {\n  // Bearer token read from cookie from header\n  protected authTokenFromCookie: string | undefined;\n  // Bearer/Basic auth token read from header\n  protected authTokenFromHeader: string | undefined;\n  protected xsrfToken: string | undefined;\n\n  /**\n   * Authenticates using the credentials which were\n   * provided within the request headers of the\n   * client call to the microservice.\n   * @param headers\n   */\n  constructor(headers: IMicroserviceClientRequestHeaders = {}) {\n    this.xsrfToken = this.getCookieValue(headers, 'XSRF-TOKEN');\n    this.authTokenFromCookie = this.getCookieValue(headers, 'authorization');\n    this.authTokenFromHeader = headers.authorization;\n  }\n\n  updateCredentials(): string {\n    return undefined;\n  }\n\n  getFetchOptions(options: any) {\n    const headers: any = {\n      Authorization: this.authTokenFromCookie\n        ? `Bearer ${this.authTokenFromCookie}`\n        : this.authTokenFromHeader,\n      ...(this.xsrfToken ? { 'X-XSRF-TOKEN': this.xsrfToken } : undefined)\n    };\n    options.headers = Object.assign(headers, options.headers);\n    return options;\n  }\n\n  getCometdHandshake(config: { ext?: { [key: string]: any } } = {}) {\n    const KEY = 'com.cumulocity.authn';\n    const xsrfToken = this.xsrfToken;\n    let token = this.authTokenFromCookie;\n    if (!token && this.authTokenFromHeader) {\n      token = this.authTokenFromHeader.replace('Basic ', '').replace('Bearer ', '');\n    }\n    const ext = (config.ext = config.ext || {});\n    ext[KEY] = Object.assign(ext[KEY] || {}, { token, ...(xsrfToken ? { xsrfToken } : undefined) });\n    return config;\n  }\n\n  logout() {\n    if (this.authTokenFromCookie) {\n      delete this.authTokenFromCookie;\n    }\n    if (this.authTokenFromHeader) {\n      delete this.authTokenFromHeader;\n    }\n    if (this.xsrfToken) {\n      delete this.xsrfToken;\n    }\n  }\n\n  protected getCookieValue(headers: IMicroserviceClientRequestHeaders, name: string) {\n    try {\n      const value =\n        headers && headers.cookie && headers.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)');\n      return value ? value.pop() : undefined;\n    } catch (ex) {\n      return undefined;\n    }\n  }\n}\n","import { IFetchResponse } from './IFetchResponse';\nimport { MicroserviceClientRequestAuth } from './MicroserviceClientRequestAuth';\n\n/**\n * Extracts the `authorization` cookie from the `set-cookie` header of a response.\n *\n * Meant to be used in none browser environments like nodejs which don't deal with cookies.\n */\nexport class NodeJSCookieAuth extends MicroserviceClientRequestAuth {\n  constructor(cookieResponse: IFetchResponse) {\n    super();\n\n    const setCookiesHeader = cookieResponse.headers.get('set-cookie');\n    if (!setCookiesHeader) {\n      throw Error('No Cookie set');\n    }\n    this.authTokenFromCookie = this.getCookieValue({ cookie: setCookiesHeader }, 'authorization');\n  }\n}\n","import { gettext } from '../gettext';\n\n/**\n * Severity can be one of the following states.\n * It is used in [[AlarmService]] for example.\n */\nexport enum Severity {\n  CRITICAL = gettext('CRITICAL'),\n  MAJOR = gettext('MAJOR'),\n  MINOR = gettext('MINOR'),\n  WARNING = gettext('WARNING')\n}\n","export class QueriesUtil {\n  protected operatorFns = {\n    __not: operand => {\n      return `not(${this.buildQueryFilter(operand, null)})`;\n    },\n    __and: operand => {\n      return this.buildQueryFilter(operand, null, 'and');\n    },\n    __or: operand => {\n      return this.buildQueryFilter(operand, null, 'or');\n    },\n    __eq: (operand, contextKey) => {\n      if (typeof operand === 'object' && operand !== null) {\n        return this.buildQueryFilter(operand, contextKey);\n      }\n      return `${contextKey} eq ${this.quoteString(operand)}`;\n    },\n    __gt: (operand, contextKey) => {\n      return `${contextKey} gt ${this.quoteString(operand)}`;\n    },\n    __ge: (operand, contextKey) => {\n      return `${contextKey} ge ${this.quoteString(operand)}`;\n    },\n    __lt: (operand, contextKey) => {\n      return `${contextKey} lt ${this.quoteString(operand)}`;\n    },\n    __le: (operand, contextKey) => {\n      return `${contextKey} le ${this.quoteString(operand)}`;\n    },\n    __in: (operand, contextKey) => {\n      const stmts = operand\n        .filter(op => !!op)\n        .map(op => {\n          return `${contextKey} eq ${this.quoteString(op)}`;\n        });\n      return this.glue(stmts, 'or');\n    },\n    __bygroupid: operand => {\n      return `bygroupid(${operand})`;\n    },\n    __has: operand => {\n      return `has(${operand})`;\n    },\n    __useFilterQueryString: (queryString: string) => {\n      // match everything inside the most exterior parentheses, including them\n      const query = queryString.match(/\\(.*\\)/)?.[0];\n      // get rid of the most exterior parentheses\n      return query?.substring(1, query.length - 1);\n    }\n  };\n\n  /**\n   * Builds query string from provided query object.\n   *\n   * @param query Object containing filters and sort order for querying managed objects. Supported filters are:\n   * - **__and** - Specifies conditions, e.g. `{__and: [{__has: 'c8y_IsDevice'}, {'count': {__gt: 0}}]}`.\n   * - **__or** - Specifies alternative conditions, e.g. `{__or: [{__bygroupid: 10300}, {__bygroupid: 10400}]}`.\n   * - **__eq** - Specified fragment must be equal to given value, e.g. `{'status': 'AVAILABLE'}` (no nested object required).\n   * - **__lt** - Specified fragment must be less then given value, e.g. `{'count': {__lt: 10}}`.\n   * - **__gt** - Specified fragment must be greater then given value, e.g. `{'count': {__gt: 0}}`.\n   * - **__in** - Specified fragment must be equal to one of values in the list, e.g. `{'status': {__in: ['AVAILABLE', 'UNAVAILABLE']}}`.\n   * - **__not** - Negates condition, e.g. `{__not: {'status': 'AVAILABLE'}}`.\n   * - **__bygroupid** - True if filtered managed object is assigned to given group, e.g. `{__bygroupid: 10300}`.\n   * - **__has** - Specified fragment must have a value defined, e.g. `{__has: 'c8y_IsDevice'}`.\n   * - **__useFilterQueryString** - Gets rid of the `$filter=()… $orderby=…` parts of a query and keeps only what's between the most\n   *                                exterior parentheses of the $filter.\n   *                                EXAMPLE: takes a query of the form\n   *                                `$filter=(name eq 'RaspPi*') $orderby=name asc`\n   *                                and turns it into\n   *                                `name eq 'RaspPi*'`\n   *                                This is necessary for searching for smart groups, which are identified by their own query\n   *                                that needs to be passed through.\n   *\n   * Note: if you want to specify the order, you need to wrap your filters within `__filter` property and then add `__orderby` with the array of field paths and sort directions (1 for ascending, -1 for descending), for example:\n   * - `{ __filter: { ... }, __orderby: [{ 'creationTime': -1 }, { 'name': 1 }] }`\n   *\n   * @returns {string} Returns a query string ready to be sent in request params to backend.\n   *\n   * **Example**\n   * ```typescript\n   *   const query = {\n   *     __filter: {\n   *       'name': 'My Device*',\n   *       'c8y_Availability.status': {\n   *         __in: ['AVAILABLE', 'UNAVAILABLE']\n   *       },\n   *       'creationTime': {\n   *         __lt: '2015-11-30T13:28:123Z'\n   *       },\n   *       'c8y_ActiveAlarmsStatus.critical': {\n   *         __gt: 0\n   *       },\n   *       __or: [\n   *         {__not: {__has: 'c8y_ActiveAlarmsStatus.major'}},\n   *         {\n   *           __or: [\n   *             {__bygroupid: 10300},\n   *             {__bygroupid: 10400}\n   *           ]\n   *         }\n   *       ]\n   *     },\n   *     __orderby: [\n   *       {'name': 1},\n   *       {'creationTime': -1},\n   *       {'c8y_ActiveAlarmsStatus.critical': -1}\n   *     ]\n   *   };\n   *\n   *   const params = {\n   *     query: queriesUtil.buildQuery(query)\n   *   };\n   * ```\n   */\n  buildQuery(query): string {\n    const q = [];\n    const filter = this.buildQueryFilter(query.__filter || query);\n    const orderBy = this.buildQueryOrderby(query.__orderby);\n    if (filter) {\n      q.push(`$filter=(${filter})`);\n    }\n    if (orderBy) {\n      q.push(`$orderby=${orderBy}`);\n    }\n    return q.join(' ');\n  }\n\n  buildQueryFilter(queryFilter, _queryKey?, _glueType?): string {\n    const queryKey = _queryKey || null;\n    const glueType = _glueType || 'and';\n\n    const q = [];\n\n    if (Array.isArray(queryFilter)) {\n      queryFilter.forEach(qFilter => {\n        const _q = this.buildQueryFilter(qFilter, null, glueType);\n        if (_q) {\n          q.push(_q);\n        }\n      });\n    } else {\n      let _q;\n      Object.keys(queryFilter).forEach(k => {\n        if (this.operatorFns[k] !== undefined) {\n          _q = this.operatorFns[k](queryFilter[k], queryKey);\n          if (_q) {\n            q.push(_q);\n          }\n        } else {\n          _q = this.operatorFns.__eq(queryFilter[k], k);\n          if (_q) {\n            q.push(_q);\n          }\n        }\n      });\n    }\n\n    return this.glue(q, glueType);\n  }\n\n  buildQueryOrderby(queryOrderbys): string {\n    const o = [];\n    if (queryOrderbys) {\n      queryOrderbys.forEach(q => {\n        Object.keys(q).forEach(k => {\n          if (q[k] !== 0) {\n            o.push(`${k} ${q[k] > 0 ? 'asc' : 'desc'}`);\n          }\n        });\n      });\n    }\n    return o.join(',');\n  }\n\n  addAndFilter(query, filter) {\n    return this.addFilter(query, filter, 'and');\n  }\n\n  addOrFilter(query, filter) {\n    return this.addFilter(query, filter, 'or');\n  }\n\n  addFilter(query, filter, operator: 'and' | 'or') {\n    const oldFilter = query.__orderby ? query.__filter || {} : query.__filter || query;\n    const newFilter = { [`__${operator}`]: this.skipEmptyObjects([oldFilter, filter]) };\n    if (!query.__filter && !query.__orderby) {\n      return newFilter;\n    }\n    query.__filter = newFilter;\n    return query;\n  }\n\n  prependOrderbys(query, orderbys) {\n    return this.addOrderbys(query, orderbys, 'prepend');\n  }\n\n  appendOrderbys(query, orderbys) {\n    return this.addOrderbys(query, orderbys, 'append');\n  }\n\n  addOrderbys(query, orderbys, how: 'prepend' | 'append') {\n    const oldFilter = query.__orderby ? query.__filter || {} : query.__filter || query;\n    const oldOrderbys = query.__orderby || [];\n    const newOrderbys =\n      how === 'prepend' ? [...orderbys, ...oldOrderbys] : [...oldOrderbys, ...orderbys];\n    const newQuery: any = {\n      __orderby: this.skipEmptyObjects(newOrderbys)\n    };\n    if (!this.isEmptyObject(oldFilter)) {\n      newQuery.__filter = oldFilter;\n    }\n    return newQuery;\n  }\n\n  extractAndMergeOrderBys(queries: string[]): string {\n    if (queries?.length > 0) {\n      const orderByQuery = queries\n        .map(query => query.match(/\\$orderby=(.*)$/)?.[1])\n        .filter(orderBy => !!orderBy)\n        .join(',');\n      return orderByQuery ? `$orderby=${orderByQuery}` : '';\n    }\n  }\n\n  protected glue(stmts: any[], type: string) {\n    return stmts.length > 1 ? `(${stmts.join(`) ${type} (`)})` : stmts[0];\n  }\n\n  protected quoteString(s: any) {\n    return typeof s === 'string' ? `'${this.escapeSingleQuote(s)}'` : s;\n  }\n\n  protected skipEmptyObjects(objs: any[]) {\n    return objs.filter(obj => !this.isEmptyObject(obj));\n  }\n\n  protected isEmptyObject(obj: object) {\n    return Object.keys(obj).length === 0;\n  }\n\n  // OData does not support single quotes in the query. We need to replace all single quotes with double quotes.\n  // http://docs.oasis-open.org/odata/odata/v4.01/cs01/part2-url-conventions/odata-v4.01-cs01-part2-url-conventions.html#sec_URLComponents\n  private escapeSingleQuote(s: string): string {\n    if (typeof s !== 'string') {\n      return s;\n    }\n    return s.replace(/\\'/g, \"''\");\n  }\n}\n","export enum MetaChannel {\n  HANDSHAKE = '/meta/handshake',\n  CONNECT = '/meta/connect',\n  SUBSCRIBE = '/meta/subscribe',\n  UNSUBSCRIBE = '/meta/unsubscribe'\n}\n","/*\n * Copyright (c) 2008-2020 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* CometD Version 4.0.8 */\n\n(function(root, factory) {\n    if (typeof exports === 'object') {\n        // CommonJS.\n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD.\n        define([], factory);\n    } else {\n        // Globals.\n        root.org = root.org || {};\n        root.org.cometd = factory();\n    }\n}(this, function() {\n    /**\n     * Browsers may throttle the Window scheduler,\n     * so we may replace it with a Worker scheduler.\n     */\n    var Scheduler = function() {\n        var _ids = 0;\n        var _tasks = {};\n        this.register = function(funktion) {\n            var id = ++_ids;\n            _tasks[id] = funktion;\n            return id;\n        };\n        this.unregister = function(id) {\n            var funktion = _tasks[id];\n            delete _tasks[id];\n            return funktion;\n        };\n        this.setTimeout = function(funktion, delay) {\n            return window.setTimeout(funktion, delay);\n        };\n        this.clearTimeout = function(id) {\n            window.clearTimeout(id);\n        };\n    };\n\n    /**\n     * The scheduler code that will run in the Worker.\n     * Workers have a built-in `self` variable similar to `window`.\n     */\n    function WorkerScheduler() {\n        var _tasks = {};\n        self.onmessage = function(e) {\n            var cmd = e.data;\n            var id = _tasks[cmd.id];\n            switch (cmd.type) {\n                case 'setTimeout':\n                    _tasks[cmd.id] = self.setTimeout(function() {\n                        delete _tasks[cmd.id];\n                        self.postMessage({\n                            id: cmd.id\n                        });\n                    }, cmd.delay);\n                    break;\n                case 'clearTimeout':\n                    delete _tasks[cmd.id];\n                    if (id) {\n                        self.clearTimeout(id);\n                    }\n                    break;\n                default:\n                    throw 'Unknown command ' + cmd.type;\n            }\n        };\n    }\n\n\n    /**\n     * Utility functions.\n     */\n    var Utils = {\n        isString: function(value) {\n            if (value === undefined || value === null) {\n                return false;\n            }\n            return typeof value === 'string' || value instanceof String;\n        },\n        isArray: function(value) {\n            if (value === undefined || value === null) {\n                return false;\n            }\n            return value instanceof Array;\n        },\n        /**\n         * Returns whether the given element is contained into the given array.\n         * @param element the element to check presence for\n         * @param array the array to check for the element presence\n         * @return the index of the element, if present, or a negative index if the element is not present\n         */\n        inArray: function(element, array) {\n            for (var i = 0; i < array.length; ++i) {\n                if (element === array[i]) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n    };\n\n\n    /**\n     * A registry for transports used by the CometD object.\n     */\n    var TransportRegistry = function() {\n        var _types = [];\n        var _transports = {};\n\n        this.getTransportTypes = function() {\n            return _types.slice(0);\n        };\n\n        this.findTransportTypes = function(version, crossDomain, url) {\n            var result = [];\n            for (var i = 0; i < _types.length; ++i) {\n                var type = _types[i];\n                if (_transports[type].accept(version, crossDomain, url) === true) {\n                    result.push(type);\n                }\n            }\n            return result;\n        };\n\n        this.negotiateTransport = function(types, version, crossDomain, url) {\n            for (var i = 0; i < _types.length; ++i) {\n                var type = _types[i];\n                for (var j = 0; j < types.length; ++j) {\n                    if (type === types[j]) {\n                        var transport = _transports[type];\n                        if (transport.accept(version, crossDomain, url) === true) {\n                            return transport;\n                        }\n                    }\n                }\n            }\n            return null;\n        };\n\n        this.add = function(type, transport, index) {\n            var existing = false;\n            for (var i = 0; i < _types.length; ++i) {\n                if (_types[i] === type) {\n                    existing = true;\n                    break;\n                }\n            }\n\n            if (!existing) {\n                if (typeof index !== 'number') {\n                    _types.push(type);\n                } else {\n                    _types.splice(index, 0, type);\n                }\n                _transports[type] = transport;\n            }\n\n            return !existing;\n        };\n\n        this.find = function(type) {\n            for (var i = 0; i < _types.length; ++i) {\n                if (_types[i] === type) {\n                    return _transports[type];\n                }\n            }\n            return null;\n        };\n\n        this.remove = function(type) {\n            for (var i = 0; i < _types.length; ++i) {\n                if (_types[i] === type) {\n                    _types.splice(i, 1);\n                    var transport = _transports[type];\n                    delete _transports[type];\n                    return transport;\n                }\n            }\n            return null;\n        };\n\n        this.clear = function() {\n            _types = [];\n            _transports = {};\n        };\n\n        this.reset = function(init) {\n            for (var i = 0; i < _types.length; ++i) {\n                _transports[_types[i]].reset(init);\n            }\n        };\n    };\n\n\n    /**\n     * Base object with the common functionality for transports.\n     */\n    var Transport = function() {\n        var _type;\n        var _cometd;\n        var _url;\n\n        /**\n         * Function invoked just after a transport has been successfully registered.\n         * @param type the type of transport (for example 'long-polling')\n         * @param cometd the cometd object this transport has been registered to\n         * @see #unregistered()\n         */\n        this.registered = function(type, cometd) {\n            _type = type;\n            _cometd = cometd;\n        };\n\n        /**\n         * Function invoked just after a transport has been successfully unregistered.\n         * @see #registered(type, cometd)\n         */\n        this.unregistered = function() {\n            _type = null;\n            _cometd = null;\n        };\n\n        this._debug = function() {\n            _cometd._debug.apply(_cometd, arguments);\n        };\n\n        this._mixin = function() {\n            return _cometd._mixin.apply(_cometd, arguments);\n        };\n\n        this.getConfiguration = function() {\n            return _cometd.getConfiguration();\n        };\n\n        this.getAdvice = function() {\n            return _cometd.getAdvice();\n        };\n\n        this.setTimeout = function(funktion, delay) {\n            return _cometd.setTimeout(funktion, delay);\n        };\n\n        this.clearTimeout = function(id) {\n            _cometd.clearTimeout(id);\n        };\n\n        /**\n         * Converts the given response into an array of bayeux messages\n         * @param response the response to convert\n         * @return an array of bayeux messages obtained by converting the response\n         */\n        this.convertToMessages = function(response) {\n            if (Utils.isString(response)) {\n                try {\n                    return JSON.parse(response);\n                } catch (x) {\n                    this._debug('Could not convert to JSON the following string', '\"' + response + '\"');\n                    throw x;\n                }\n            }\n            if (Utils.isArray(response)) {\n                return response;\n            }\n            if (response === undefined || response === null) {\n                return [];\n            }\n            if (response instanceof Object) {\n                return [response];\n            }\n            throw 'Conversion Error ' + response + ', typeof ' + (typeof response);\n        };\n\n        /**\n         * Returns whether this transport can work for the given version and cross domain communication case.\n         * @param version a string indicating the transport version\n         * @param crossDomain a boolean indicating whether the communication is cross domain\n         * @param url the URL to connect to\n         * @return true if this transport can work for the given version and cross domain communication case,\n         * false otherwise\n         */\n        this.accept = function(version, crossDomain, url) {\n            throw 'Abstract';\n        };\n\n        /**\n         * Returns the type of this transport.\n         * @see #registered(type, cometd)\n         */\n        this.getType = function() {\n            return _type;\n        };\n\n        this.getURL = function() {\n            return _url;\n        };\n\n        this.setURL = function(url) {\n            _url = url;\n        };\n\n        this.send = function(envelope, metaConnect) {\n            throw 'Abstract';\n        };\n\n        this.reset = function(init) {\n            this._debug('Transport', _type, 'reset', init ? 'initial' : 'retry');\n        };\n\n        this.abort = function() {\n            this._debug('Transport', _type, 'aborted');\n        };\n\n        this.toString = function() {\n            return this.getType();\n        };\n    };\n\n    Transport.derive = function(baseObject) {\n        function F() {\n        }\n\n        F.prototype = baseObject;\n        return new F();\n    };\n\n\n    /**\n     * Base object with the common functionality for transports based on requests.\n     * The key responsibility is to allow at most 2 outstanding requests to the server,\n     * to avoid that requests are sent behind a long poll.\n     * To achieve this, we have one reserved request for the long poll, and all other\n     * requests are serialized one after the other.\n     */\n    var RequestTransport = function() {\n        var _super = new Transport();\n        var _self = Transport.derive(_super);\n        var _requestIds = 0;\n        var _metaConnectRequest = null;\n        var _requests = [];\n        var _envelopes = [];\n\n        function _coalesceEnvelopes(envelope) {\n            while (_envelopes.length > 0) {\n                var envelopeAndRequest = _envelopes[0];\n                var newEnvelope = envelopeAndRequest[0];\n                var newRequest = envelopeAndRequest[1];\n                if (newEnvelope.url === envelope.url &&\n                    newEnvelope.sync === envelope.sync) {\n                    _envelopes.shift();\n                    envelope.messages = envelope.messages.concat(newEnvelope.messages);\n                    this._debug('Coalesced', newEnvelope.messages.length, 'messages from request', newRequest.id);\n                    continue;\n                }\n                break;\n            }\n        }\n\n        function _transportSend(envelope, request) {\n            this.transportSend(envelope, request);\n            request.expired = false;\n\n            if (!envelope.sync) {\n                var maxDelay = this.getConfiguration().maxNetworkDelay;\n                var delay = maxDelay;\n                if (request.metaConnect === true) {\n                    delay += this.getAdvice().timeout;\n                }\n\n                this._debug('Transport', this.getType(), 'waiting at most', delay, 'ms for the response, maxNetworkDelay', maxDelay);\n\n                var self = this;\n                request.timeout = this.setTimeout(function() {\n                    request.expired = true;\n                    var errorMessage = 'Request ' + request.id + ' of transport ' + self.getType() + ' exceeded ' + delay + ' ms max network delay';\n                    var failure = {\n                        reason: errorMessage\n                    };\n                    var xhr = request.xhr;\n                    failure.httpCode = self.xhrStatus(xhr);\n                    self.abortXHR(xhr);\n                    self._debug(errorMessage);\n                    self.complete(request, false, request.metaConnect);\n                    envelope.onFailure(xhr, envelope.messages, failure);\n                }, delay);\n            }\n        }\n\n        function _queueSend(envelope) {\n            var requestId = ++_requestIds;\n            var request = {\n                id: requestId,\n                metaConnect: false,\n                envelope: envelope\n            };\n\n            // Consider the /meta/connect requests which should always be present.\n            if (_requests.length < this.getConfiguration().maxConnections - 1) {\n                _requests.push(request);\n                _transportSend.call(this, envelope, request);\n            } else {\n                this._debug('Transport', this.getType(), 'queueing request', requestId, 'envelope', envelope);\n                _envelopes.push([envelope, request]);\n            }\n        }\n\n        function _metaConnectComplete(request) {\n            var requestId = request.id;\n            this._debug('Transport', this.getType(), '/meta/connect complete, request', requestId);\n            if (_metaConnectRequest !== null && _metaConnectRequest.id !== requestId) {\n                throw '/meta/connect request mismatch, completing request ' + requestId;\n            }\n            _metaConnectRequest = null;\n        }\n\n        function _complete(request, success) {\n            var index = Utils.inArray(request, _requests);\n            // The index can be negative if the request has been aborted\n            if (index >= 0) {\n                _requests.splice(index, 1);\n            }\n\n            if (_envelopes.length > 0) {\n                var envelopeAndRequest = _envelopes.shift();\n                var nextEnvelope = envelopeAndRequest[0];\n                var nextRequest = envelopeAndRequest[1];\n                this._debug('Transport dequeued request', nextRequest.id);\n                if (success) {\n                    if (this.getConfiguration().autoBatch) {\n                        _coalesceEnvelopes.call(this, nextEnvelope);\n                    }\n                    _queueSend.call(this, nextEnvelope);\n                    this._debug('Transport completed request', request.id, nextEnvelope);\n                } else {\n                    // Keep the semantic of calling response callbacks asynchronously after the request\n                    var self = this;\n                    this.setTimeout(function() {\n                        self.complete(nextRequest, false, nextRequest.metaConnect);\n                        var failure = {\n                            reason: 'Previous request failed'\n                        };\n                        var xhr = nextRequest.xhr;\n                        failure.httpCode = self.xhrStatus(xhr);\n                        nextEnvelope.onFailure(xhr, nextEnvelope.messages, failure);\n                    }, 0);\n                }\n            }\n        }\n\n        _self.complete = function(request, success, metaConnect) {\n            if (metaConnect) {\n                _metaConnectComplete.call(this, request);\n            } else {\n                _complete.call(this, request, success);\n            }\n        };\n\n        /**\n         * Performs the actual send depending on the transport type details.\n         * @param envelope the envelope to send\n         * @param request the request information\n         */\n        _self.transportSend = function(envelope, request) {\n            throw 'Abstract';\n        };\n\n        _self.transportSuccess = function(envelope, request, responses) {\n            if (!request.expired) {\n                this.clearTimeout(request.timeout);\n                this.complete(request, true, request.metaConnect);\n                if (responses && responses.length > 0) {\n                    envelope.onSuccess(responses);\n                } else {\n                    envelope.onFailure(request.xhr, envelope.messages, {\n                        httpCode: 204\n                    });\n                }\n            }\n        };\n\n        _self.transportFailure = function(envelope, request, failure) {\n            if (!request.expired) {\n                this.clearTimeout(request.timeout);\n                this.complete(request, false, request.metaConnect);\n                envelope.onFailure(request.xhr, envelope.messages, failure);\n            }\n        };\n\n        function _metaConnectSend(envelope) {\n            if (_metaConnectRequest !== null) {\n                throw 'Concurrent /meta/connect requests not allowed, request id=' + _metaConnectRequest.id + ' not yet completed';\n            }\n\n            var requestId = ++_requestIds;\n            this._debug('Transport', this.getType(), '/meta/connect send, request', requestId, 'envelope', envelope);\n            var request = {\n                id: requestId,\n                metaConnect: true,\n                envelope: envelope\n            };\n            _transportSend.call(this, envelope, request);\n            _metaConnectRequest = request;\n        }\n\n        _self.send = function(envelope, metaConnect) {\n            if (metaConnect) {\n                _metaConnectSend.call(this, envelope);\n            } else {\n                _queueSend.call(this, envelope);\n            }\n        };\n\n        _self.abort = function() {\n            _super.abort();\n            for (var i = 0; i < _requests.length; ++i) {\n                var request = _requests[i];\n                if (request) {\n                    this._debug('Aborting request', request);\n                    if (!this.abortXHR(request.xhr)) {\n                        this.transportFailure(request.envelope, request, {reason: 'abort'});\n                    }\n                }\n            }\n            var metaConnectRequest = _metaConnectRequest;\n            if (metaConnectRequest) {\n                this._debug('Aborting /meta/connect request', metaConnectRequest);\n                if (!this.abortXHR(metaConnectRequest.xhr)) {\n                    this.transportFailure(metaConnectRequest.envelope, metaConnectRequest, {reason: 'abort'});\n                }\n            }\n            this.reset(true);\n        };\n\n        _self.reset = function(init) {\n            _super.reset(init);\n            _metaConnectRequest = null;\n            _requests = [];\n            _envelopes = [];\n        };\n\n        _self.abortXHR = function(xhr) {\n            if (xhr) {\n                try {\n                    var state = xhr.readyState;\n                    xhr.abort();\n                    return state !== window.XMLHttpRequest.UNSENT;\n                } catch (x) {\n                    this._debug(x);\n                }\n            }\n            return false;\n        };\n\n        _self.xhrStatus = function(xhr) {\n            if (xhr) {\n                try {\n                    return xhr.status;\n                } catch (x) {\n                    this._debug(x);\n                }\n            }\n            return -1;\n        };\n\n        return _self;\n    };\n\n\n    var LongPollingTransport = function() {\n        var _super = new RequestTransport();\n        var _self = Transport.derive(_super);\n        // By default, support cross domain\n        var _supportsCrossDomain = true;\n\n        _self.accept = function(version, crossDomain, url) {\n            return _supportsCrossDomain || !crossDomain;\n        };\n\n        _self.newXMLHttpRequest = function() {\n            return new window.XMLHttpRequest();\n        };\n\n        function _copyContext(xhr) {\n            try {\n                // Copy external context, to be used in other environments.\n                xhr.context = _self.context;\n            } catch (e) {\n                // May happen if XHR is wrapped by Object.seal(),\n                // Object.freeze(), or Object.preventExtensions().\n                this._debug('Could not copy transport context into XHR', e);\n            }\n        }\n\n        _self.xhrSend = function(packet) {\n            var xhr = _self.newXMLHttpRequest();\n            _copyContext(xhr);\n            xhr.withCredentials = true;\n            xhr.open('POST', packet.url, packet.sync !== true);\n            var headers = packet.headers;\n            if (headers) {\n                for (var headerName in headers) {\n                    if (headers.hasOwnProperty(headerName)) {\n                        xhr.setRequestHeader(headerName, headers[headerName]);\n                    }\n                }\n            }\n            xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n            xhr.onload = function() {\n                if (xhr.status === 200) {\n                    packet.onSuccess(xhr.responseText);\n                } else {\n                    packet.onError(xhr.statusText);\n                }\n            };\n            xhr.onabort = xhr.onerror = function() {\n                packet.onError(xhr.statusText);\n            };\n            xhr.send(packet.body);\n            return xhr;\n        };\n\n        _self.transportSend = function(envelope, request) {\n            this._debug('Transport', this.getType(), 'sending request', request.id, 'envelope', envelope);\n\n            var self = this;\n            try {\n                var sameStack = true;\n                request.xhr = this.xhrSend({\n                    transport: this,\n                    url: envelope.url,\n                    sync: envelope.sync,\n                    headers: this.getConfiguration().requestHeaders,\n                    body: JSON.stringify(envelope.messages),\n                    onSuccess: function(response) {\n                        self._debug('Transport', self.getType(), 'received response', response);\n                        var success = false;\n                        try {\n                            var received = self.convertToMessages(response);\n                            if (received.length === 0) {\n                                _supportsCrossDomain = false;\n                                self.transportFailure(envelope, request, {\n                                    httpCode: 204\n                                });\n                            } else {\n                                success = true;\n                                self.transportSuccess(envelope, request, received);\n                            }\n                        } catch (x) {\n                            self._debug(x);\n                            if (!success) {\n                                _supportsCrossDomain = false;\n                                var failure = {\n                                    exception: x\n                                };\n                                failure.httpCode = self.xhrStatus(request.xhr);\n                                self.transportFailure(envelope, request, failure);\n                            }\n                        }\n                    },\n                    onError: function(reason, exception) {\n                        self._debug('Transport', self.getType(), 'received error', reason, exception);\n                        _supportsCrossDomain = false;\n                        var failure = {\n                            reason: reason,\n                            exception: exception\n                        };\n                        failure.httpCode = self.xhrStatus(request.xhr);\n                        if (sameStack) {\n                            // Keep the semantic of calling response callbacks asynchronously after the request\n                            self.setTimeout(function() {\n                                self.transportFailure(envelope, request, failure);\n                            }, 0);\n                        } else {\n                            self.transportFailure(envelope, request, failure);\n                        }\n                    }\n                });\n                sameStack = false;\n            } catch (x) {\n                _supportsCrossDomain = false;\n                // Keep the semantic of calling response callbacks asynchronously after the request\n                this.setTimeout(function() {\n                    self.transportFailure(envelope, request, {\n                        exception: x\n                    });\n                }, 0);\n            }\n        };\n\n        _self.reset = function(init) {\n            _super.reset(init);\n            _supportsCrossDomain = true;\n        };\n\n        return _self;\n    };\n\n\n    var CallbackPollingTransport = function() {\n        var _super = new RequestTransport();\n        var _self = Transport.derive(_super);\n        var jsonp = 0;\n\n        _self.accept = function(version, crossDomain, url) {\n            return true;\n        };\n\n        _self.jsonpSend = function(packet) {\n            var head = document.getElementsByTagName('head')[0];\n            var script = document.createElement('script');\n\n            var callbackName = '_cometd_jsonp_' + jsonp++;\n            window[callbackName] = function(responseText) {\n                head.removeChild(script);\n                delete window[callbackName];\n                packet.onSuccess(responseText);\n            };\n\n            var url = packet.url;\n            url += url.indexOf('?') < 0 ? '?' : '&';\n            url += 'jsonp=' + callbackName;\n            url += '&message=' + encodeURIComponent(packet.body);\n            script.src = url;\n            script.async = packet.sync !== true;\n            script.type = 'application/javascript';\n            script.onerror = function(e) {\n                packet.onError('jsonp ' + e.type);\n            };\n            head.appendChild(script);\n        };\n\n        function _failTransportFn(envelope, request, x) {\n            var self = this;\n            return function() {\n                self.transportFailure(envelope, request, 'error', x);\n            };\n        }\n\n        _self.transportSend = function(envelope, request) {\n            var self = this;\n\n            // Microsoft Internet Explorer has a 2083 URL max length\n            // We must ensure that we stay within that length\n            var start = 0;\n            var length = envelope.messages.length;\n            var lengths = [];\n            while (length > 0) {\n                // Encode the messages because all brackets, quotes, commas, colons, etc\n                // present in the JSON will be URL encoded, taking many more characters\n                var json = JSON.stringify(envelope.messages.slice(start, start + length));\n                var urlLength = envelope.url.length + encodeURI(json).length;\n\n                var maxLength = this.getConfiguration().maxURILength;\n                if (urlLength > maxLength) {\n                    if (length === 1) {\n                        var x = 'Bayeux message too big (' + urlLength + ' bytes, max is ' + maxLength + ') ' +\n                            'for transport ' + this.getType();\n                        // Keep the semantic of calling response callbacks asynchronously after the request\n                        this.setTimeout(_failTransportFn.call(this, envelope, request, x), 0);\n                        return;\n                    }\n\n                    --length;\n                    continue;\n                }\n\n                lengths.push(length);\n                start += length;\n                length = envelope.messages.length - start;\n            }\n\n            // Here we are sure that the messages can be sent within the URL limit\n\n            var envelopeToSend = envelope;\n            if (lengths.length > 1) {\n                var begin = 0;\n                var end = lengths[0];\n                this._debug('Transport', this.getType(), 'split', envelope.messages.length, 'messages into', lengths.join(' + '));\n                envelopeToSend = this._mixin(false, {}, envelope);\n                envelopeToSend.messages = envelope.messages.slice(begin, end);\n                envelopeToSend.onSuccess = envelope.onSuccess;\n                envelopeToSend.onFailure = envelope.onFailure;\n\n                for (var i = 1; i < lengths.length; ++i) {\n                    var nextEnvelope = this._mixin(false, {}, envelope);\n                    begin = end;\n                    end += lengths[i];\n                    nextEnvelope.messages = envelope.messages.slice(begin, end);\n                    nextEnvelope.onSuccess = envelope.onSuccess;\n                    nextEnvelope.onFailure = envelope.onFailure;\n                    this.send(nextEnvelope, request.metaConnect);\n                }\n            }\n\n            this._debug('Transport', this.getType(), 'sending request', request.id, 'envelope', envelopeToSend);\n\n            try {\n                var sameStack = true;\n                this.jsonpSend({\n                    transport: this,\n                    url: envelopeToSend.url,\n                    sync: envelopeToSend.sync,\n                    headers: this.getConfiguration().requestHeaders,\n                    body: JSON.stringify(envelopeToSend.messages),\n                    onSuccess: function(responses) {\n                        var success = false;\n                        try {\n                            var received = self.convertToMessages(responses);\n                            if (received.length === 0) {\n                                self.transportFailure(envelopeToSend, request, {\n                                    httpCode: 204\n                                });\n                            } else {\n                                success = true;\n                                self.transportSuccess(envelopeToSend, request, received);\n                            }\n                        } catch (x) {\n                            self._debug(x);\n                            if (!success) {\n                                self.transportFailure(envelopeToSend, request, {\n                                    exception: x\n                                });\n                            }\n                        }\n                    },\n                    onError: function(reason, exception) {\n                        var failure = {\n                            reason: reason,\n                            exception: exception\n                        };\n                        if (sameStack) {\n                            // Keep the semantic of calling response callbacks asynchronously after the request\n                            self.setTimeout(function() {\n                                self.transportFailure(envelopeToSend, request, failure);\n                            }, 0);\n                        } else {\n                            self.transportFailure(envelopeToSend, request, failure);\n                        }\n                    }\n                });\n                sameStack = false;\n            } catch (xx) {\n                // Keep the semantic of calling response callbacks asynchronously after the request\n                this.setTimeout(function() {\n                    self.transportFailure(envelopeToSend, request, {\n                        exception: xx\n                    });\n                }, 0);\n            }\n        };\n\n        return _self;\n    };\n\n\n    var WebSocketTransport = function() {\n        var _super = new Transport();\n        var _self = Transport.derive(_super);\n        var _cometd;\n        // By default WebSocket is supported\n        var _webSocketSupported = true;\n        // Whether we were able to establish a WebSocket connection\n        var _webSocketConnected = false;\n        var _stickyReconnect = true;\n        // The context contains the envelopes that have been sent\n        // and the timeouts for the messages that have been sent.\n        var _context = null;\n        var _connecting = null;\n        var _connected = false;\n        var _successCallback = null;\n\n        _self.reset = function(init) {\n            _super.reset(init);\n            _webSocketSupported = true;\n            if (init) {\n                _webSocketConnected = false;\n            }\n            _stickyReconnect = true;\n            _context = null;\n            _connecting = null;\n            _connected = false;\n        };\n\n        function _forceClose(context, event) {\n            if (context) {\n                this.webSocketClose(context, event.code, event.reason);\n                // Force immediate failure of pending messages to trigger reconnect.\n                // This is needed because the server may not reply to our close()\n                // and therefore the onclose function is never called.\n                this.onClose(context, event);\n            }\n        }\n\n        function _sameContext(context) {\n            return context === _connecting || context === _context;\n        }\n\n        function _storeEnvelope(context, envelope, metaConnect) {\n            var messageIds = [];\n            for (var i = 0; i < envelope.messages.length; ++i) {\n                var message = envelope.messages[i];\n                if (message.id) {\n                    messageIds.push(message.id);\n                }\n            }\n            context.envelopes[messageIds.join(',')] = [envelope, metaConnect];\n            this._debug('Transport', this.getType(), 'stored envelope, envelopes', context.envelopes);\n        }\n\n        function _websocketConnect(context) {\n            // We may have multiple attempts to open a WebSocket\n            // connection, for example a /meta/connect request that\n            // may take time, along with a user-triggered publish.\n            // Early return if we are already connecting.\n            if (_connecting) {\n                return;\n            }\n\n            // Mangle the URL, changing the scheme from 'http' to 'ws'.\n            var url = _cometd.getURL().replace(/^http/, 'ws');\n            this._debug('Transport', this.getType(), 'connecting to URL', url);\n\n            try {\n                var protocol = _cometd.getConfiguration().protocol;\n                context.webSocket = protocol ? new window.WebSocket(url, protocol) : new window.WebSocket(url);\n                _connecting = context;\n            } catch (x) {\n                _webSocketSupported = false;\n                this._debug('Exception while creating WebSocket object', x);\n                throw x;\n            }\n\n            // By default use sticky reconnects.\n            _stickyReconnect = _cometd.getConfiguration().stickyReconnect !== false;\n\n            var self = this;\n            var connectTimeout = _cometd.getConfiguration().connectTimeout;\n            if (connectTimeout > 0) {\n                context.connectTimer = this.setTimeout(function() {\n                    _cometd._debug('Transport', self.getType(), 'timed out while connecting to URL', url, ':', connectTimeout, 'ms');\n                    // The connection was not opened, close anyway.\n                    _forceClose.call(self, context, {code: 1000, reason: 'Connect Timeout'});\n                }, connectTimeout);\n            }\n\n            var onopen = function() {\n                _cometd._debug('WebSocket onopen', context);\n                if (context.connectTimer) {\n                    self.clearTimeout(context.connectTimer);\n                }\n\n                if (_sameContext(context)) {\n                    _connecting = null;\n                    _context = context;\n                    _webSocketConnected = true;\n                    self.onOpen(context);\n                } else {\n                    // We have a valid connection already, close this one.\n                    _cometd._warn('Closing extra WebSocket connection', this, 'active connection', _context);\n                    _forceClose.call(self, context, {code: 1000, reason: 'Extra Connection'});\n                }\n            };\n\n            // This callback is invoked when the server sends the close frame.\n            // The close frame for a connection may arrive *after* another\n            // connection has been opened, so we must make sure that actions\n            // are performed only if it's the same connection.\n            var onclose = function(event) {\n                event = event || {code: 1000};\n                _cometd._debug('WebSocket onclose', context, event, 'connecting', _connecting, 'current', _context);\n\n                if (context.connectTimer) {\n                    self.clearTimeout(context.connectTimer);\n                }\n\n                self.onClose(context, event);\n            };\n\n            var onmessage = function(wsMessage) {\n                _cometd._debug('WebSocket onmessage', wsMessage, context);\n                self.onMessage(context, wsMessage);\n            };\n\n            context.webSocket.onopen = onopen;\n            context.webSocket.onclose = onclose;\n            context.webSocket.onerror = function() {\n                // Clients should call onclose(), but if they do not we do it here for safety.\n                onclose({code: 1000, reason: 'Error'});\n            };\n            context.webSocket.onmessage = onmessage;\n\n            this._debug('Transport', this.getType(), 'configured callbacks on', context);\n        }\n\n        function _webSocketSend(context, envelope, metaConnect) {\n            var json = JSON.stringify(envelope.messages);\n            context.webSocket.send(json);\n            this._debug('Transport', this.getType(), 'sent', envelope, '/meta/connect =', metaConnect);\n\n            // Manage the timeout waiting for the response.\n            var maxDelay = this.getConfiguration().maxNetworkDelay;\n            var delay = maxDelay;\n            if (metaConnect) {\n                delay += this.getAdvice().timeout;\n                _connected = true;\n            }\n\n            var self = this;\n            var messageIds = [];\n            for (var i = 0; i < envelope.messages.length; ++i) {\n                (function() {\n                    var message = envelope.messages[i];\n                    if (message.id) {\n                        messageIds.push(message.id);\n                        context.timeouts[message.id] = self.setTimeout(function() {\n                            _cometd._debug('Transport', self.getType(), 'timing out message', message.id, 'after', delay, 'on', context);\n                            _forceClose.call(self, context, {code: 1000, reason: 'Message Timeout'});\n                        }, delay);\n                    }\n                })();\n            }\n\n            this._debug('Transport', this.getType(), 'waiting at most', delay, 'ms for messages', messageIds, 'maxNetworkDelay', maxDelay, ', timeouts:', context.timeouts);\n        }\n\n        _self._notifySuccess = function(fn, messages) {\n            fn.call(this, messages);\n        };\n\n        _self._notifyFailure = function(fn, context, messages, failure) {\n            fn.call(this, context, messages, failure);\n        };\n\n        function _send(context, envelope, metaConnect) {\n            try {\n                if (context === null) {\n                    context = _connecting || {\n                        envelopes: {},\n                        timeouts: {}\n                    };\n                    _storeEnvelope.call(this, context, envelope, metaConnect);\n                    _websocketConnect.call(this, context);\n                } else {\n                    _storeEnvelope.call(this, context, envelope, metaConnect);\n                    _webSocketSend.call(this, context, envelope, metaConnect);\n                }\n            } catch (x) {\n                // Keep the semantic of calling response callbacks asynchronously after the request.\n                var self = this;\n                this.setTimeout(function() {\n                    _forceClose.call(self, context, {\n                        code: 1000,\n                        reason: 'Exception',\n                        exception: x\n                    });\n                }, 0);\n            }\n        }\n\n        _self.onOpen = function(context) {\n            var envelopes = context.envelopes;\n            this._debug('Transport', this.getType(), 'opened', context, 'pending messages', envelopes);\n            for (var key in envelopes) {\n                if (envelopes.hasOwnProperty(key)) {\n                    var element = envelopes[key];\n                    var envelope = element[0];\n                    var metaConnect = element[1];\n                    // Store the success callback, which is independent from the envelope,\n                    // so that it can be used to notify arrival of messages.\n                    _successCallback = envelope.onSuccess;\n                    _webSocketSend.call(this, context, envelope, metaConnect);\n                }\n            }\n        };\n\n        _self.onMessage = function(context, wsMessage) {\n            this._debug('Transport', this.getType(), 'received websocket message', wsMessage, context);\n\n            var close = false;\n            var messages = this.convertToMessages(wsMessage.data);\n            var messageIds = [];\n            for (var i = 0; i < messages.length; ++i) {\n                var message = messages[i];\n\n                // Detect if the message is a response to a request we made.\n                // If it's a meta message, for sure it's a response; otherwise it's\n                // a publish message and publish responses don't have the data field.\n                if (/^\\/meta\\//.test(message.channel) || message.data === undefined) {\n                    if (message.id) {\n                        messageIds.push(message.id);\n\n                        var timeout = context.timeouts[message.id];\n                        if (timeout) {\n                            this.clearTimeout(timeout);\n                            delete context.timeouts[message.id];\n                            this._debug('Transport', this.getType(), 'removed timeout for message', message.id, ', timeouts', context.timeouts);\n                        }\n                    }\n                }\n\n                if ('/meta/connect' === message.channel) {\n                    _connected = false;\n                }\n                if ('/meta/disconnect' === message.channel && !_connected) {\n                    close = true;\n                }\n            }\n\n            // Remove the envelope corresponding to the messages.\n            var removed = false;\n            var envelopes = context.envelopes;\n            for (var j = 0; j < messageIds.length; ++j) {\n                var id = messageIds[j];\n                for (var key in envelopes) {\n                    if (envelopes.hasOwnProperty(key)) {\n                        var ids = key.split(',');\n                        var index = Utils.inArray(id, ids);\n                        if (index >= 0) {\n                            removed = true;\n                            ids.splice(index, 1);\n                            var envelope = envelopes[key][0];\n                            var metaConnect = envelopes[key][1];\n                            delete envelopes[key];\n                            if (ids.length > 0) {\n                                envelopes[ids.join(',')] = [envelope, metaConnect];\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            if (removed) {\n                this._debug('Transport', this.getType(), 'removed envelope, envelopes', envelopes);\n            }\n\n            this._notifySuccess(_successCallback, messages);\n\n            if (close) {\n                this.webSocketClose(context, 1000, 'Disconnect');\n            }\n        };\n\n        _self.onClose = function(context, event) {\n            this._debug('Transport', this.getType(), 'closed', context, event);\n\n            if (_sameContext(context)) {\n                // Remember if we were able to connect.\n                // This close event could be due to server shutdown,\n                // and if it restarts we want to try websocket again.\n                _webSocketSupported = _stickyReconnect && _webSocketConnected;\n                _connecting = null;\n                _context = null;\n            }\n\n            var timeouts = context.timeouts;\n            context.timeouts = {};\n            for (var id in timeouts) {\n                if (timeouts.hasOwnProperty(id)) {\n                    this.clearTimeout(timeouts[id]);\n                }\n            }\n\n            var envelopes = context.envelopes;\n            context.envelopes = {};\n            for (var key in envelopes) {\n                if (envelopes.hasOwnProperty(key)) {\n                    var envelope = envelopes[key][0];\n                    var metaConnect = envelopes[key][1];\n                    if (metaConnect) {\n                        _connected = false;\n                    }\n                    var failure = {\n                        websocketCode: event.code,\n                        reason: event.reason\n                    };\n                    if (event.exception) {\n                        failure.exception = event.exception;\n                    }\n                    this._notifyFailure(envelope.onFailure, context, envelope.messages, failure);\n                }\n            }\n        };\n\n        _self.registered = function(type, cometd) {\n            _super.registered(type, cometd);\n            _cometd = cometd;\n        };\n\n        _self.accept = function(version, crossDomain, url) {\n            this._debug('Transport', this.getType(), 'accept, supported:', _webSocketSupported);\n            // Using !! to return a boolean (and not the WebSocket object).\n            return _webSocketSupported && !!window.WebSocket && _cometd.websocketEnabled !== false;\n        };\n\n        _self.send = function(envelope, metaConnect) {\n            this._debug('Transport', this.getType(), 'sending', envelope, '/meta/connect =', metaConnect);\n            _send.call(this, _context, envelope, metaConnect);\n        };\n\n        _self.webSocketClose = function(context, code, reason) {\n            try {\n                if (context.webSocket) {\n                    context.webSocket.close(code, reason);\n                }\n            } catch (x) {\n                this._debug(x);\n            }\n        };\n\n        _self.abort = function() {\n            _super.abort();\n            _forceClose.call(this, _context, {code: 1000, reason: 'Abort'});\n            this.reset(true);\n        };\n\n        return _self;\n    };\n\n\n    /**\n     * The constructor for a CometD object, identified by an optional name.\n     * The default name is the string 'default'.\n     * @param name the optional name of this cometd object\n     */\n    var CometD = function(name) {\n        var _scheduler = new Scheduler();\n        var _cometd = this;\n        var _name = name || 'default';\n        var _crossDomain = false;\n        var _transports = new TransportRegistry();\n        var _transport;\n        var _status = 'disconnected';\n        var _messageId = 0;\n        var _clientId = null;\n        var _batch = 0;\n        var _messageQueue = [];\n        var _internalBatch = false;\n        var _listenerId = 0;\n        var _listeners = {};\n        var _backoff = 0;\n        var _scheduledSend = null;\n        var _extensions = [];\n        var _advice = {};\n        var _handshakeProps;\n        var _handshakeCallback;\n        var _callbacks = {};\n        var _remoteCalls = {};\n        var _reestablish = false;\n        var _connected = false;\n        var _unconnectTime = 0;\n        var _handshakeMessages = 0;\n        var _metaConnect = null;\n        var _config = {\n            useWorkerScheduler: true,\n            protocol: null,\n            stickyReconnect: true,\n            connectTimeout: 0,\n            maxConnections: 2,\n            backoffIncrement: 1000,\n            maxBackoff: 60000,\n            logLevel: 'info',\n            maxNetworkDelay: 10000,\n            requestHeaders: {},\n            appendMessageTypeToURL: true,\n            autoBatch: false,\n            urls: {},\n            maxURILength: 2000,\n            advice: {\n                timeout: 60000,\n                interval: 0,\n                reconnect: undefined,\n                maxInterval: 0\n            }\n        };\n\n        function _fieldValue(object, name) {\n            try {\n                return object[name];\n            } catch (x) {\n                return undefined;\n            }\n        }\n\n        /**\n         * Mixes in the given objects into the target object by copying the properties.\n         * @param deep if the copy must be deep\n         * @param target the target object\n         * @param objects the objects whose properties are copied into the target\n         */\n        this._mixin = function(deep, target, objects) {\n            var result = target || {};\n\n            // Skip first 2 parameters (deep and target), and loop over the others\n            for (var i = 2; i < arguments.length; ++i) {\n                var object = arguments[i];\n\n                if (object === undefined || object === null) {\n                    continue;\n                }\n\n                for (var propName in object) {\n                    if (object.hasOwnProperty(propName)) {\n                        var prop = _fieldValue(object, propName);\n                        var targ = _fieldValue(result, propName);\n\n                        // Avoid infinite loops\n                        if (prop === target) {\n                            continue;\n                        }\n                        // Do not mixin undefined values\n                        if (prop === undefined) {\n                            continue;\n                        }\n\n                        if (deep && typeof prop === 'object' && prop !== null) {\n                            if (prop instanceof Array) {\n                                result[propName] = this._mixin(deep, targ instanceof Array ? targ : [], prop);\n                            } else {\n                                var source = typeof targ === 'object' && !(targ instanceof Array) ? targ : {};\n                                result[propName] = this._mixin(deep, source, prop);\n                            }\n                        } else {\n                            result[propName] = prop;\n                        }\n                    }\n                }\n            }\n\n            return result;\n        };\n\n        function _isString(value) {\n            return Utils.isString(value);\n        }\n\n        function _isFunction(value) {\n            if (value === undefined || value === null) {\n                return false;\n            }\n            return typeof value === 'function';\n        }\n\n        function _zeroPad(value, length) {\n            var result = '';\n            while (--length > 0) {\n                if (value >= Math.pow(10, length)) {\n                    break;\n                }\n                result += '0';\n            }\n            result += value;\n            return result;\n        }\n\n        function _log(level, args) {\n            if (window.console) {\n                var logger = window.console[level];\n                if (_isFunction(logger)) {\n                    var now = new Date();\n                    [].splice.call(args, 0, 0, _zeroPad(now.getHours(), 2) + ':' + _zeroPad(now.getMinutes(), 2) + ':' +\n                        _zeroPad(now.getSeconds(), 2) + '.' + _zeroPad(now.getMilliseconds(), 3));\n                    logger.apply(window.console, args);\n                }\n            }\n        }\n\n        this._warn = function() {\n            _log('warn', arguments);\n        };\n\n        this._info = function() {\n            if (_config.logLevel !== 'warn') {\n                _log('info', arguments);\n            }\n        };\n\n        this._debug = function() {\n            if (_config.logLevel === 'debug') {\n                _log('debug', arguments);\n            }\n        };\n\n        function _splitURL(url) {\n            // [1] = protocol://,\n            // [2] = host:port,\n            // [3] = host,\n            // [4] = IPv6_host,\n            // [5] = IPv4_host,\n            // [6] = :port,\n            // [7] = port,\n            // [8] = uri,\n            // [9] = rest (query / fragment)\n            return new RegExp('(^https?://)?(((\\\\[[^\\\\]]+])|([^:/?#]+))(:(\\\\d+))?)?([^?#]*)(.*)?').exec(url);\n        }\n\n        /**\n         * Returns whether the given hostAndPort is cross domain.\n         * The default implementation checks against window.location.host\n         * but this function can be overridden to make it work in non-browser\n         * environments.\n         *\n         * @param hostAndPort the host and port in format host:port\n         * @return whether the given hostAndPort is cross domain\n         */\n        this._isCrossDomain = function(hostAndPort) {\n            if (window.location && window.location.host) {\n                if (hostAndPort) {\n                    return hostAndPort !== window.location.host;\n                }\n            }\n            return false;\n        };\n\n        function _configure(configuration) {\n            _cometd._debug('Configuring cometd object with', configuration);\n            // Support old style param, where only the Bayeux server URL was passed.\n            if (_isString(configuration)) {\n                configuration = {\n                    url: configuration\n                };\n            }\n            if (!configuration) {\n                configuration = {};\n            }\n\n            _config = _cometd._mixin(false, _config, configuration);\n\n            var url = _cometd.getURL();\n            if (!url) {\n                throw 'Missing required configuration parameter \\'url\\' specifying the Bayeux server URL';\n            }\n\n            // Check if we're cross domain.\n            var urlParts = _splitURL(url);\n            var hostAndPort = urlParts[2];\n            var uri = urlParts[8];\n            var afterURI = urlParts[9];\n            _crossDomain = _cometd._isCrossDomain(hostAndPort);\n\n            // Check if appending extra path is supported.\n            if (_config.appendMessageTypeToURL) {\n                if (afterURI !== undefined && afterURI.length > 0) {\n                    _cometd._info('Appending message type to URI ' + uri + afterURI + ' is not supported, disabling \\'appendMessageTypeToURL\\' configuration');\n                    _config.appendMessageTypeToURL = false;\n                } else {\n                    var uriSegments = uri.split('/');\n                    var lastSegmentIndex = uriSegments.length - 1;\n                    if (uri.match(/\\/$/)) {\n                        lastSegmentIndex -= 1;\n                    }\n                    if (uriSegments[lastSegmentIndex].indexOf('.') >= 0) {\n                        // Very likely the CometD servlet's URL pattern is mapped to an extension, such as *.cometd\n                        // It will be difficult to add the extra path in this case\n                        _cometd._info('Appending message type to URI ' + uri + ' is not supported, disabling \\'appendMessageTypeToURL\\' configuration');\n                        _config.appendMessageTypeToURL = false;\n                    }\n                }\n            }\n\n            if (window.Worker && window.Blob && window.URL && _config.useWorkerScheduler) {\n                var code = WorkerScheduler.toString();\n                // Remove the function declaration, the opening brace and the closing brace.\n                code = code.substring(code.indexOf('{') + 1, code.lastIndexOf('}'));\n                var blob = new window.Blob([code], {\n                    type: 'application/json'\n                });\n                var blobURL = window.URL.createObjectURL(blob);\n                var worker = new window.Worker(blobURL);\n                _scheduler.setTimeout = function(funktion, delay) {\n                    var id = _scheduler.register(funktion);\n                    worker.postMessage({\n                        id: id,\n                        type: 'setTimeout',\n                        delay: delay\n                    });\n                    return id;\n                };\n                _scheduler.clearTimeout = function(id) {\n                    _scheduler.unregister(id);\n                    worker.postMessage({\n                        id: id,\n                        type: 'clearTimeout'\n                    });\n                };\n                worker.onmessage = function(e) {\n                    var id = e.data.id;\n                    var funktion = _scheduler.unregister(id);\n                    if (funktion) {\n                        funktion();\n                    }\n                };\n            }\n        }\n\n        function _removeListener(subscription) {\n            if (subscription) {\n                var subscriptions = _listeners[subscription.channel];\n                if (subscriptions && subscriptions[subscription.id]) {\n                    delete subscriptions[subscription.id];\n                    _cometd._debug('Removed', subscription.listener ? 'listener' : 'subscription', subscription);\n                }\n            }\n        }\n\n        function _removeSubscription(subscription) {\n            if (subscription && !subscription.listener) {\n                _removeListener(subscription);\n            }\n        }\n\n        function _clearSubscriptions() {\n            for (var channel in _listeners) {\n                if (_listeners.hasOwnProperty(channel)) {\n                    var subscriptions = _listeners[channel];\n                    if (subscriptions) {\n                        for (var id in subscriptions) {\n                            if (subscriptions.hasOwnProperty(id)) {\n                                _removeSubscription(subscriptions[id]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        function _setStatus(newStatus) {\n            if (_status !== newStatus) {\n                _cometd._debug('Status', _status, '->', newStatus);\n                _status = newStatus;\n            }\n        }\n\n        function _isDisconnected() {\n            return _status === 'disconnecting' || _status === 'disconnected';\n        }\n\n        function _nextMessageId() {\n            var result = ++_messageId;\n            return '' + result;\n        }\n\n        function _applyExtension(scope, callback, name, message, outgoing) {\n            try {\n                return callback.call(scope, message);\n            } catch (x) {\n                var handler = _cometd.onExtensionException;\n                if (_isFunction(handler)) {\n                    _cometd._debug('Invoking extension exception handler', name, x);\n                    try {\n                        handler.call(_cometd, x, name, outgoing, message);\n                    } catch (xx) {\n                        _cometd._info('Exception during execution of extension exception handler', name, xx);\n                    }\n                } else {\n                    _cometd._info('Exception during execution of extension', name, x);\n                }\n                return message;\n            }\n        }\n\n        function _applyIncomingExtensions(message) {\n            for (var i = 0; i < _extensions.length; ++i) {\n                if (message === undefined || message === null) {\n                    break;\n                }\n\n                var extension = _extensions[i];\n                var callback = extension.extension.incoming;\n                if (_isFunction(callback)) {\n                    var result = _applyExtension(extension.extension, callback, extension.name, message, false);\n                    message = result === undefined ? message : result;\n                }\n            }\n            return message;\n        }\n\n        function _applyOutgoingExtensions(message) {\n            for (var i = _extensions.length - 1; i >= 0; --i) {\n                if (message === undefined || message === null) {\n                    break;\n                }\n\n                var extension = _extensions[i];\n                var callback = extension.extension.outgoing;\n                if (_isFunction(callback)) {\n                    var result = _applyExtension(extension.extension, callback, extension.name, message, true);\n                    message = result === undefined ? message : result;\n                }\n            }\n            return message;\n        }\n\n        function _notify(channel, message) {\n            var subscriptions = _listeners[channel];\n            if (subscriptions) {\n                for (var id in subscriptions) {\n                    if (subscriptions.hasOwnProperty(id)) {\n                        var subscription = subscriptions[id];\n                        // Subscriptions may come and go, so the array may have 'holes'\n                        if (subscription) {\n                            try {\n                                subscription.callback.call(subscription.scope, message);\n                            } catch (x) {\n                                var handler = _cometd.onListenerException;\n                                if (_isFunction(handler)) {\n                                    _cometd._debug('Invoking listener exception handler', subscription, x);\n                                    try {\n                                        handler.call(_cometd, x, subscription, subscription.listener, message);\n                                    } catch (xx) {\n                                        _cometd._info('Exception during execution of listener exception handler', subscription, xx);\n                                    }\n                                } else {\n                                    _cometd._info('Exception during execution of listener', subscription, message, x);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        function _notifyListeners(channel, message) {\n            // Notify direct listeners\n            _notify(channel, message);\n\n            // Notify the globbing listeners\n            var channelParts = channel.split('/');\n            var last = channelParts.length - 1;\n            for (var i = last; i > 0; --i) {\n                var channelPart = channelParts.slice(0, i).join('/') + '/*';\n                // We don't want to notify /foo/* if the channel is /foo/bar/baz,\n                // so we stop at the first non recursive globbing\n                if (i === last) {\n                    _notify(channelPart, message);\n                }\n                // Add the recursive globber and notify\n                channelPart += '*';\n                _notify(channelPart, message);\n            }\n        }\n\n        function _cancelDelayedSend() {\n            if (_scheduledSend !== null) {\n                _cometd.clearTimeout(_scheduledSend);\n            }\n            _scheduledSend = null;\n        }\n\n        function _delayedSend(operation, delay) {\n            _cancelDelayedSend();\n            var time = _advice.interval + delay;\n            _cometd._debug('Function scheduled in', time, 'ms, interval =', _advice.interval, 'backoff =', _backoff, operation);\n            _scheduledSend = _cometd.setTimeout(operation, time);\n        }\n\n        // Needed to break cyclic dependencies between function definitions\n        var _handleMessages;\n        var _handleFailure;\n\n        /**\n         * Delivers the messages to the CometD server\n         * @param messages the array of messages to send\n         * @param metaConnect true if this send is on /meta/connect\n         * @param extraPath an extra path to append to the Bayeux server URL\n         */\n        function _send(messages, metaConnect, extraPath) {\n            // We must be sure that the messages have a clientId.\n            // This is not guaranteed since the handshake may take time to return\n            // (and hence the clientId is not known yet) and the application\n            // may create other messages.\n            for (var i = 0; i < messages.length; ++i) {\n                var message = messages[i];\n                var messageId = message.id;\n\n                if (_clientId) {\n                    message.clientId = _clientId;\n                }\n\n                message = _applyOutgoingExtensions(message);\n                if (message !== undefined && message !== null) {\n                    // Extensions may have modified the message id, but we need to own it.\n                    message.id = messageId;\n                    messages[i] = message;\n                } else {\n                    delete _callbacks[messageId];\n                    messages.splice(i--, 1);\n                }\n            }\n\n            if (messages.length === 0) {\n                return;\n            }\n\n            if (metaConnect) {\n                _metaConnect = messages[0];\n            }\n\n            var url = _cometd.getURL();\n            if (_config.appendMessageTypeToURL) {\n                // If url does not end with '/', then append it\n                if (!url.match(/\\/$/)) {\n                    url = url + '/';\n                }\n                if (extraPath) {\n                    url = url + extraPath;\n                }\n            }\n\n            var envelope = {\n                url: url,\n                sync: false,\n                messages: messages,\n                onSuccess: function(rcvdMessages) {\n                    try {\n                        _handleMessages.call(_cometd, rcvdMessages);\n                    } catch (x) {\n                        _cometd._info('Exception during handling of messages', x);\n                    }\n                },\n                onFailure: function(conduit, messages, failure) {\n                    try {\n                        var transport = _cometd.getTransport();\n                        failure.connectionType = transport ? transport.getType() : \"unknown\";\n                        _handleFailure.call(_cometd, conduit, messages, failure);\n                    } catch (x) {\n                        _cometd._info('Exception during handling of failure', x);\n                    }\n                }\n            };\n            _cometd._debug('Send', envelope);\n            _transport.send(envelope, metaConnect);\n        }\n\n        function _queueSend(message) {\n            if (_batch > 0 || _internalBatch === true) {\n                _messageQueue.push(message);\n            } else {\n                _send([message], false);\n            }\n        }\n\n        /**\n         * Sends a complete bayeux message.\n         * This method is exposed as a public so that extensions may use it\n         * to send bayeux message directly, for example in case of re-sending\n         * messages that have already been sent but that for some reason must\n         * be resent.\n         */\n        this.send = _queueSend;\n\n        function _resetBackoff() {\n            _backoff = 0;\n        }\n\n        function _increaseBackoff() {\n            if (_backoff < _config.maxBackoff) {\n                _backoff += _config.backoffIncrement;\n            }\n            return _backoff;\n        }\n\n        /**\n         * Starts a the batch of messages to be sent in a single request.\n         * @see #_endBatch(sendMessages)\n         */\n        function _startBatch() {\n            ++_batch;\n            _cometd._debug('Starting batch, depth', _batch);\n        }\n\n        function _flushBatch() {\n            var messages = _messageQueue;\n            _messageQueue = [];\n            if (messages.length > 0) {\n                _send(messages, false);\n            }\n        }\n\n        /**\n         * Ends the batch of messages to be sent in a single request,\n         * optionally sending messages present in the message queue depending\n         * on the given argument.\n         * @see #_startBatch()\n         */\n        function _endBatch() {\n            --_batch;\n            _cometd._debug('Ending batch, depth', _batch);\n            if (_batch < 0) {\n                throw 'Calls to startBatch() and endBatch() are not paired';\n            }\n\n            if (_batch === 0 && !_isDisconnected() && !_internalBatch) {\n                _flushBatch();\n            }\n        }\n\n        /**\n         * Sends the connect message\n         */\n        function _connect() {\n            if (!_isDisconnected()) {\n                var bayeuxMessage = {\n                    id: _nextMessageId(),\n                    channel: '/meta/connect',\n                    connectionType: _transport.getType()\n                };\n\n                // In case of reload or temporary loss of connection\n                // we want the next successful connect to return immediately\n                // instead of being held by the server, so that connect listeners\n                // can be notified that the connection has been re-established\n                if (!_connected) {\n                    bayeuxMessage.advice = {\n                        timeout: 0\n                    };\n                }\n\n                _setStatus('connecting');\n                _cometd._debug('Connect sent', bayeuxMessage);\n                _send([bayeuxMessage], true, 'connect');\n                _setStatus('connected');\n            }\n        }\n\n        function _delayedConnect(delay) {\n            _setStatus('connecting');\n            _delayedSend(function() {\n                _connect();\n            }, delay);\n        }\n\n        function _updateAdvice(newAdvice) {\n            if (newAdvice) {\n                _advice = _cometd._mixin(false, {}, _config.advice, newAdvice);\n                _cometd._debug('New advice', _advice);\n            }\n        }\n\n        function _disconnect(abort) {\n            _cancelDelayedSend();\n            if (abort && _transport) {\n                _transport.abort();\n            }\n            _crossDomain = false;\n            _transport = null;\n            _setStatus('disconnected');\n            _clientId = null;\n            _batch = 0;\n            _resetBackoff();\n            _reestablish = false;\n            _connected = false;\n            _unconnectTime = 0;\n            _metaConnect = null;\n\n            // Fail any existing queued message\n            if (_messageQueue.length > 0) {\n                var messages = _messageQueue;\n                _messageQueue = [];\n                _handleFailure.call(_cometd, undefined, messages, {\n                    reason: 'Disconnected'\n                });\n            }\n        }\n\n        function _notifyTransportException(oldTransport, newTransport, failure) {\n            var handler = _cometd.onTransportException;\n            if (_isFunction(handler)) {\n                _cometd._debug('Invoking transport exception handler', oldTransport, newTransport, failure);\n                try {\n                    handler.call(_cometd, failure, oldTransport, newTransport);\n                } catch (x) {\n                    _cometd._info('Exception during execution of transport exception handler', x);\n                }\n            }\n        }\n\n        /**\n         * Sends the initial handshake message\n         */\n        function _handshake(handshakeProps, handshakeCallback) {\n            if (_isFunction(handshakeProps)) {\n                handshakeCallback = handshakeProps;\n                handshakeProps = undefined;\n            }\n\n            _clientId = null;\n\n            _clearSubscriptions();\n\n            // Reset the transports if we're not retrying the handshake\n            if (_isDisconnected()) {\n                _transports.reset(true);\n            }\n\n            // Reset the advice.\n            _updateAdvice({});\n\n            _batch = 0;\n\n            // Mark the start of an internal batch.\n            // This is needed because handshake and connect are async.\n            // It may happen that the application calls init() then subscribe()\n            // and the subscribe message is sent before the connect message, if\n            // the subscribe message is not held until the connect message is sent.\n            // So here we start a batch to hold temporarily any message until\n            // the connection is fully established.\n            _internalBatch = true;\n\n            // Save the properties provided by the user, so that\n            // we can reuse them during automatic re-handshake\n            _handshakeProps = handshakeProps;\n            _handshakeCallback = handshakeCallback;\n\n            var version = '1.0';\n\n            // Figure out the transports to send to the server\n            var url = _cometd.getURL();\n            var transportTypes = _transports.findTransportTypes(version, _crossDomain, url);\n\n            var bayeuxMessage = {\n                id: _nextMessageId(),\n                version: version,\n                minimumVersion: version,\n                channel: '/meta/handshake',\n                supportedConnectionTypes: transportTypes,\n                advice: {\n                    timeout: _advice.timeout,\n                    interval: _advice.interval\n                }\n            };\n            // Do not allow the user to override important fields.\n            var message = _cometd._mixin(false, {}, _handshakeProps, bayeuxMessage);\n\n            // Save the callback.\n            _cometd._putCallback(message.id, handshakeCallback);\n\n            // Pick up the first available transport as initial transport\n            // since we don't know if the server supports it\n            if (!_transport) {\n                _transport = _transports.negotiateTransport(transportTypes, version, _crossDomain, url);\n                if (!_transport) {\n                    var failure = 'Could not find initial transport among: ' + _transports.getTransportTypes();\n                    _cometd._warn(failure);\n                    throw failure;\n                }\n            }\n\n            _cometd._debug('Initial transport is', _transport.getType());\n\n            // We started a batch to hold the application messages,\n            // so here we must bypass it and send immediately.\n            _setStatus('handshaking');\n            _cometd._debug('Handshake sent', message);\n            _send([message], false, 'handshake');\n        }\n\n        function _delayedHandshake(delay) {\n            _setStatus('handshaking');\n\n            // We will call _handshake() which will reset _clientId, but we want to avoid\n            // that between the end of this method and the call to _handshake() someone may\n            // call publish() (or other methods that call _queueSend()).\n            _internalBatch = true;\n\n            _delayedSend(function() {\n                _handshake(_handshakeProps, _handshakeCallback);\n            }, delay);\n        }\n\n        function _notifyCallback(callback, message) {\n            try {\n                callback.call(_cometd, message);\n            } catch (x) {\n                var handler = _cometd.onCallbackException;\n                if (_isFunction(handler)) {\n                    _cometd._debug('Invoking callback exception handler', x);\n                    try {\n                        handler.call(_cometd, x, message);\n                    } catch (xx) {\n                        _cometd._info('Exception during execution of callback exception handler', xx);\n                    }\n                } else {\n                    _cometd._info('Exception during execution of message callback', x);\n                }\n            }\n        }\n\n        this._getCallback = function(messageId) {\n            return _callbacks[messageId];\n        };\n\n        this._putCallback = function(messageId, callback) {\n            var result = this._getCallback(messageId);\n            if (_isFunction(callback)) {\n                _callbacks[messageId] = callback;\n            }\n            return result;\n        };\n\n        function _handleCallback(message) {\n            var callback = _cometd._getCallback([message.id]);\n            if (_isFunction(callback)) {\n                delete _callbacks[message.id];\n                _notifyCallback(callback, message);\n            }\n        }\n\n        function _handleRemoteCall(message) {\n            var context = _remoteCalls[message.id];\n            delete _remoteCalls[message.id];\n            if (context) {\n                _cometd._debug('Handling remote call response for', message, 'with context', context);\n\n                // Clear the timeout, if present.\n                var timeout = context.timeout;\n                if (timeout) {\n                    _cometd.clearTimeout(timeout);\n                }\n\n                var callback = context.callback;\n                if (_isFunction(callback)) {\n                    _notifyCallback(callback, message);\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        this.onTransportFailure = function(message, failureInfo, failureHandler) {\n            this._debug('Transport failure', failureInfo, 'for', message);\n\n            var transports = this.getTransportRegistry();\n            var url = this.getURL();\n            var crossDomain = this._isCrossDomain(_splitURL(url)[2]);\n            var version = '1.0';\n            var transportTypes = transports.findTransportTypes(version, crossDomain, url);\n\n            if (failureInfo.action === 'none') {\n                if (message.channel === '/meta/handshake') {\n                    if (!failureInfo.transport) {\n                        var failure = 'Could not negotiate transport, client=[' + transportTypes + '], server=[' + message.supportedConnectionTypes + ']';\n                        this._warn(failure);\n                        _notifyTransportException(_transport.getType(), null, {\n                            reason: failure,\n                            connectionType: _transport.getType(),\n                            transport: _transport\n                        });\n                    }\n                }\n            } else {\n                failureInfo.delay = this.getBackoffPeriod();\n                // Different logic depending on whether we are handshaking or connecting.\n                if (message.channel === '/meta/handshake') {\n                    if (!failureInfo.transport) {\n                        // The transport is invalid, try to negotiate again.\n                        var oldTransportType = _transport ? _transport.getType() : null;\n                        var newTransport = transports.negotiateTransport(transportTypes, version, crossDomain, url);\n                        if (!newTransport) {\n                            this._warn('Could not negotiate transport, client=[' + transportTypes + ']');\n                            _notifyTransportException(oldTransportType, null, message.failure);\n                            failureInfo.action = 'none';\n                        } else {\n                            var newTransportType = newTransport.getType();\n                            this._debug('Transport', oldTransportType, '->', newTransportType);\n                            _notifyTransportException(oldTransportType, newTransportType, message.failure);\n                            failureInfo.action = 'handshake';\n                            failureInfo.transport = newTransport;\n                        }\n                    }\n\n                    if (failureInfo.action !== 'none') {\n                        this.increaseBackoffPeriod();\n                    }\n                } else {\n                    var now = new Date().getTime();\n\n                    if (_unconnectTime === 0) {\n                        _unconnectTime = now;\n                    }\n\n                    if (failureInfo.action === 'retry') {\n                        failureInfo.delay = this.increaseBackoffPeriod();\n                        // Check whether we may switch to handshaking.\n                        var maxInterval = _advice.maxInterval;\n                        if (maxInterval > 0) {\n                            var expiration = _advice.timeout + _advice.interval + maxInterval;\n                            var unconnected = now - _unconnectTime;\n                            if (unconnected + _backoff > expiration) {\n                                failureInfo.action = 'handshake';\n                            }\n                        }\n                    }\n\n                    if (failureInfo.action === 'handshake') {\n                        failureInfo.delay = 0;\n                        transports.reset(false);\n                        this.resetBackoffPeriod();\n                    }\n                }\n            }\n\n            failureHandler.call(_cometd, failureInfo);\n        };\n\n        function _handleTransportFailure(failureInfo) {\n            _cometd._debug('Transport failure handling', failureInfo);\n\n            if (failureInfo.transport) {\n                _transport = failureInfo.transport;\n            }\n\n            if (failureInfo.url) {\n                _transport.setURL(failureInfo.url);\n            }\n\n            var action = failureInfo.action;\n            var delay = failureInfo.delay || 0;\n            switch (action) {\n                case 'handshake':\n                    _delayedHandshake(delay);\n                    break;\n                case 'retry':\n                    _delayedConnect(delay);\n                    break;\n                case 'none':\n                    _disconnect(true);\n                    break;\n                default:\n                    throw 'Unknown action ' + action;\n            }\n        }\n\n        function _failHandshake(message, failureInfo) {\n            _handleCallback(message);\n            _notifyListeners('/meta/handshake', message);\n            _notifyListeners('/meta/unsuccessful', message);\n\n            // The listeners may have disconnected.\n            if (_isDisconnected()) {\n                failureInfo.action = 'none';\n            }\n\n            _cometd.onTransportFailure.call(_cometd, message, failureInfo, _handleTransportFailure);\n        }\n\n        function _handshakeResponse(message) {\n            var url = _cometd.getURL();\n            if (message.successful) {\n                var crossDomain = _cometd._isCrossDomain(_splitURL(url)[2]);\n                var newTransport = _transports.negotiateTransport(message.supportedConnectionTypes, message.version, crossDomain, url);\n                if (newTransport === null) {\n                    message.successful = false;\n                    _failHandshake(message, {\n                        cause: 'negotiation',\n                        action: 'none',\n                        transport: null\n                    });\n                    return;\n                } else if (_transport !== newTransport) {\n                    _cometd._debug('Transport', _transport.getType(), '->', newTransport.getType());\n                    _transport = newTransport;\n                }\n\n                _clientId = message.clientId;\n\n                // End the internal batch and allow held messages from the application\n                // to go to the server (see _handshake() where we start the internal batch).\n                _internalBatch = false;\n                _flushBatch();\n\n                // Here the new transport is in place, as well as the clientId, so\n                // the listeners can perform a publish() if they want.\n                // Notify the listeners before the connect below.\n                message.reestablish = _reestablish;\n                _reestablish = true;\n\n                _handleCallback(message);\n                _notifyListeners('/meta/handshake', message);\n\n                _handshakeMessages = message['x-messages'] || 0;\n\n                var action = _isDisconnected() ? 'none' : _advice.reconnect || 'retry';\n                switch (action) {\n                    case 'retry':\n                        _resetBackoff();\n                        if (_handshakeMessages === 0) {\n                            _delayedConnect(0);\n                        } else {\n                            _cometd._debug('Processing', _handshakeMessages, 'handshake-delivered messages');\n                        }\n                        break;\n                    case 'none':\n                        _disconnect(true);\n                        break;\n                    default:\n                        throw 'Unrecognized advice action ' + action;\n                }\n            } else {\n                _failHandshake(message, {\n                    cause: 'unsuccessful',\n                    action: _advice.reconnect || 'handshake',\n                    transport: _transport\n                });\n            }\n        }\n\n        function _handshakeFailure(message) {\n            _failHandshake(message, {\n                cause: 'failure',\n                action: 'handshake',\n                transport: null\n            });\n        }\n\n        function _matchMetaConnect(connect) {\n            if (_status === 'disconnected') {\n                return true;\n            }\n            if (_metaConnect && _metaConnect.id === connect.id) {\n                _metaConnect = null;\n                return true;\n            }\n            return false;\n        }\n\n        function _failConnect(message, failureInfo) {\n            // Notify the listeners after the status change but before the next action.\n            _notifyListeners('/meta/connect', message);\n            _notifyListeners('/meta/unsuccessful', message);\n\n            // The listeners may have disconnected.\n            if (_isDisconnected()) {\n                failureInfo.action = 'none';\n            }\n\n            _cometd.onTransportFailure.call(_cometd, message, failureInfo, _handleTransportFailure);\n        }\n\n        function _connectResponse(message) {\n            if (_matchMetaConnect(message)) {\n                _connected = message.successful;\n                if (_connected) {\n                    _notifyListeners('/meta/connect', message);\n\n                    // Normally, the advice will say \"reconnect: 'retry', interval: 0\"\n                    // and the server will hold the request, so when a response returns\n                    // we immediately call the server again (long polling).\n                    // Listeners can call disconnect(), so check the state after they run.\n                    var action = _isDisconnected() ? 'none' : _advice.reconnect || 'retry';\n                    switch (action) {\n                        case 'retry':\n                            _resetBackoff();\n                            _delayedConnect(_backoff);\n                            break;\n                        case 'none':\n                            _disconnect(false);\n                            break;\n                        default:\n                            throw 'Unrecognized advice action ' + action;\n                    }\n                } else {\n                    _failConnect(message, {\n                        cause: 'unsuccessful',\n                        action: _advice.reconnect || 'retry',\n                        transport: _transport\n                    });\n                }\n            } else {\n                _cometd._debug('Mismatched /meta/connect reply', message);\n            }\n        }\n\n        function _connectFailure(message) {\n            if (_matchMetaConnect(message)) {\n                _connected = false;\n                _failConnect(message, {\n                    cause: 'failure',\n                    action: 'retry',\n                    transport: null\n                });\n            } else {\n                _cometd._debug('Mismatched /meta/connect failure', message);\n            }\n        }\n\n        function _failDisconnect(message) {\n            _disconnect(true);\n            _handleCallback(message);\n            _notifyListeners('/meta/disconnect', message);\n            _notifyListeners('/meta/unsuccessful', message);\n        }\n\n        function _disconnectResponse(message) {\n            if (message.successful) {\n                // Wait for the /meta/connect to arrive.\n                _disconnect(false);\n                _handleCallback(message);\n                _notifyListeners('/meta/disconnect', message);\n            } else {\n                _failDisconnect(message);\n            }\n        }\n\n        function _disconnectFailure(message) {\n            _failDisconnect(message);\n        }\n\n        function _failSubscribe(message) {\n            var subscriptions = _listeners[message.subscription];\n            if (subscriptions) {\n                for (var id in subscriptions) {\n                    if (subscriptions.hasOwnProperty(id)) {\n                        var subscription = subscriptions[id];\n                        if (subscription && !subscription.listener) {\n                            delete subscriptions[id];\n                            _cometd._debug('Removed failed subscription', subscription);\n                        }\n                    }\n                }\n            }\n            _handleCallback(message);\n            _notifyListeners('/meta/subscribe', message);\n            _notifyListeners('/meta/unsuccessful', message);\n        }\n\n        function _subscribeResponse(message) {\n            if (message.successful) {\n                _handleCallback(message);\n                _notifyListeners('/meta/subscribe', message);\n            } else {\n                _failSubscribe(message);\n            }\n        }\n\n        function _subscribeFailure(message) {\n            _failSubscribe(message);\n        }\n\n        function _failUnsubscribe(message) {\n            _handleCallback(message);\n            _notifyListeners('/meta/unsubscribe', message);\n            _notifyListeners('/meta/unsuccessful', message);\n        }\n\n        function _unsubscribeResponse(message) {\n            if (message.successful) {\n                _handleCallback(message);\n                _notifyListeners('/meta/unsubscribe', message);\n            } else {\n                _failUnsubscribe(message);\n            }\n        }\n\n        function _unsubscribeFailure(message) {\n            _failUnsubscribe(message);\n        }\n\n        function _failMessage(message) {\n            if (!_handleRemoteCall(message)) {\n                _handleCallback(message);\n                _notifyListeners('/meta/publish', message);\n                _notifyListeners('/meta/unsuccessful', message);\n            }\n        }\n\n        function _messageResponse(message) {\n            if (message.data !== undefined) {\n                if (!_handleRemoteCall(message)) {\n                    _notifyListeners(message.channel, message);\n                    if (_handshakeMessages > 0) {\n                        --_handshakeMessages;\n                        if (_handshakeMessages === 0) {\n                            _cometd._debug('Processed last handshake-delivered message');\n                            _delayedConnect(0);\n                        }\n                    }\n                }\n            } else {\n                if (message.successful === undefined) {\n                    _cometd._warn('Unknown Bayeux Message', message);\n                } else {\n                    if (message.successful) {\n                        _handleCallback(message);\n                        _notifyListeners('/meta/publish', message);\n                    } else {\n                        _failMessage(message);\n                    }\n                }\n            }\n        }\n\n        function _messageFailure(failure) {\n            _failMessage(failure);\n        }\n\n        function _receive(message) {\n            _unconnectTime = 0;\n\n            message = _applyIncomingExtensions(message);\n            if (message === undefined || message === null) {\n                return;\n            }\n\n            _updateAdvice(message.advice);\n\n            var channel = message.channel;\n            switch (channel) {\n                case '/meta/handshake':\n                    _handshakeResponse(message);\n                    break;\n                case '/meta/connect':\n                    _connectResponse(message);\n                    break;\n                case '/meta/disconnect':\n                    _disconnectResponse(message);\n                    break;\n                case '/meta/subscribe':\n                    _subscribeResponse(message);\n                    break;\n                case '/meta/unsubscribe':\n                    _unsubscribeResponse(message);\n                    break;\n                default:\n                    _messageResponse(message);\n                    break;\n            }\n        }\n\n        /**\n         * Receives a message.\n         * This method is exposed as a public so that extensions may inject\n         * messages simulating that they had been received.\n         */\n        this.receive = _receive;\n\n        _handleMessages = function(rcvdMessages) {\n            _cometd._debug('Received', rcvdMessages);\n\n            for (var i = 0; i < rcvdMessages.length; ++i) {\n                var message = rcvdMessages[i];\n                _receive(message);\n            }\n        };\n\n        _handleFailure = function(conduit, messages, failure) {\n            _cometd._debug('handleFailure', conduit, messages, failure);\n\n            failure.transport = conduit;\n            for (var i = 0; i < messages.length; ++i) {\n                var message = messages[i];\n                var failureMessage = {\n                    id: message.id,\n                    successful: false,\n                    channel: message.channel,\n                    failure: failure\n                };\n                failure.message = message;\n                switch (message.channel) {\n                    case '/meta/handshake':\n                        _handshakeFailure(failureMessage);\n                        break;\n                    case '/meta/connect':\n                        _connectFailure(failureMessage);\n                        break;\n                    case '/meta/disconnect':\n                        _disconnectFailure(failureMessage);\n                        break;\n                    case '/meta/subscribe':\n                        failureMessage.subscription = message.subscription;\n                        _subscribeFailure(failureMessage);\n                        break;\n                    case '/meta/unsubscribe':\n                        failureMessage.subscription = message.subscription;\n                        _unsubscribeFailure(failureMessage);\n                        break;\n                    default:\n                        _messageFailure(failureMessage);\n                        break;\n                }\n            }\n        };\n\n        function _hasSubscriptions(channel) {\n            var subscriptions = _listeners[channel];\n            if (subscriptions) {\n                for (var id in subscriptions) {\n                    if (subscriptions.hasOwnProperty(id)) {\n                        if (subscriptions[id]) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        function _resolveScopedCallback(scope, callback) {\n            var delegate = {\n                scope: scope,\n                method: callback\n            };\n            if (_isFunction(scope)) {\n                delegate.scope = undefined;\n                delegate.method = scope;\n            } else {\n                if (_isString(callback)) {\n                    if (!scope) {\n                        throw 'Invalid scope ' + scope;\n                    }\n                    delegate.method = scope[callback];\n                    if (!_isFunction(delegate.method)) {\n                        throw 'Invalid callback ' + callback + ' for scope ' + scope;\n                    }\n                } else if (!_isFunction(callback)) {\n                    throw 'Invalid callback ' + callback;\n                }\n            }\n            return delegate;\n        }\n\n        function _addListener(channel, scope, callback, isListener) {\n            // The data structure is a map<channel, subscription[]>, where each subscription\n            // holds the callback to be called and its scope.\n\n            var delegate = _resolveScopedCallback(scope, callback);\n            _cometd._debug('Adding', isListener ? 'listener' : 'subscription', 'on', channel, 'with scope', delegate.scope, 'and callback', delegate.method);\n\n            var id = ++_listenerId;\n            var subscription = {\n                id: id,\n                channel: channel,\n                scope: delegate.scope,\n                callback: delegate.method,\n                listener: isListener\n            };\n\n            var subscriptions = _listeners[channel];\n            if (!subscriptions) {\n                subscriptions = {};\n                _listeners[channel] = subscriptions;\n            }\n\n            subscriptions[id] = subscription;\n\n            _cometd._debug('Added', isListener ? 'listener' : 'subscription', subscription);\n\n            return subscription;\n        }\n\n        //\n        // PUBLIC API\n        //\n\n        /**\n         * Registers the given transport under the given transport type.\n         * The optional index parameter specifies the \"priority\" at which the\n         * transport is registered (where 0 is the max priority).\n         * If a transport with the same type is already registered, this function\n         * does nothing and returns false.\n         * @param type the transport type\n         * @param transport the transport object\n         * @param index the index at which this transport is to be registered\n         * @return true if the transport has been registered, false otherwise\n         * @see #unregisterTransport(type)\n         */\n        this.registerTransport = function(type, transport, index) {\n            var result = _transports.add(type, transport, index);\n            if (result) {\n                this._debug('Registered transport', type);\n\n                if (_isFunction(transport.registered)) {\n                    transport.registered(type, this);\n                }\n            }\n            return result;\n        };\n\n        /**\n         * Unregisters the transport with the given transport type.\n         * @param type the transport type to unregister\n         * @return the transport that has been unregistered,\n         * or null if no transport was previously registered under the given transport type\n         */\n        this.unregisterTransport = function(type) {\n            var transport = _transports.remove(type);\n            if (transport !== null) {\n                this._debug('Unregistered transport', type);\n\n                if (_isFunction(transport.unregistered)) {\n                    transport.unregistered();\n                }\n            }\n            return transport;\n        };\n\n        this.unregisterTransports = function() {\n            _transports.clear();\n        };\n\n        /**\n         * @return an array of all registered transport types\n         */\n        this.getTransportTypes = function() {\n            return _transports.getTransportTypes();\n        };\n\n        this.findTransport = function(name) {\n            return _transports.find(name);\n        };\n\n        /**\n         * @returns the TransportRegistry object\n         */\n        this.getTransportRegistry = function() {\n            return _transports;\n        };\n\n        /**\n         * Configures the initial Bayeux communication with the Bayeux server.\n         * Configuration is passed via an object that must contain a mandatory field <code>url</code>\n         * of type string containing the URL of the Bayeux server.\n         * @param configuration the configuration object\n         */\n        this.configure = function(configuration) {\n            _configure.call(this, configuration);\n        };\n\n        /**\n         * Configures and establishes the Bayeux communication with the Bayeux server\n         * via a handshake and a subsequent connect.\n         * @param configuration the configuration object\n         * @param handshakeProps an object to be merged with the handshake message\n         * @see #configure(configuration)\n         * @see #handshake(handshakeProps)\n         */\n        this.init = function(configuration, handshakeProps) {\n            this.configure(configuration);\n            this.handshake(handshakeProps);\n        };\n\n        /**\n         * Establishes the Bayeux communication with the Bayeux server\n         * via a handshake and a subsequent connect.\n         * @param handshakeProps an object to be merged with the handshake message\n         * @param handshakeCallback a function to be invoked when the handshake is acknowledged\n         */\n        this.handshake = function(handshakeProps, handshakeCallback) {\n            if (_status !== 'disconnected') {\n                throw 'Illegal state: handshaken';\n            }\n            _handshake(handshakeProps, handshakeCallback);\n        };\n\n        /**\n         * Disconnects from the Bayeux server.\n         * @param disconnectProps an object to be merged with the disconnect message\n         * @param disconnectCallback a function to be invoked when the disconnect is acknowledged\n         */\n        this.disconnect = function(disconnectProps, disconnectCallback) {\n            if (_isDisconnected()) {\n                return;\n            }\n\n            if (_isFunction(disconnectProps)) {\n                disconnectCallback = disconnectProps;\n                disconnectProps = undefined;\n            }\n\n            var bayeuxMessage = {\n                id: _nextMessageId(),\n                channel: '/meta/disconnect'\n            };\n            // Do not allow the user to override important fields.\n            var message = this._mixin(false, {}, disconnectProps, bayeuxMessage);\n\n            // Save the callback.\n            _cometd._putCallback(message.id, disconnectCallback);\n\n            _setStatus('disconnecting');\n            _send([message], false, 'disconnect');\n        };\n\n        /**\n         * Marks the start of a batch of application messages to be sent to the server\n         * in a single request, obtaining a single response containing (possibly) many\n         * application reply messages.\n         * Messages are held in a queue and not sent until {@link #endBatch()} is called.\n         * If startBatch() is called multiple times, then an equal number of endBatch()\n         * calls must be made to close and send the batch of messages.\n         * @see #endBatch()\n         */\n        this.startBatch = function() {\n            _startBatch();\n        };\n\n        /**\n         * Marks the end of a batch of application messages to be sent to the server\n         * in a single request.\n         * @see #startBatch()\n         */\n        this.endBatch = function() {\n            _endBatch();\n        };\n\n        /**\n         * Executes the given callback in the given scope, surrounded by a {@link #startBatch()}\n         * and {@link #endBatch()} calls.\n         * @param scope the scope of the callback, may be omitted\n         * @param callback the callback to be executed within {@link #startBatch()} and {@link #endBatch()} calls\n         */\n        this.batch = function(scope, callback) {\n            var delegate = _resolveScopedCallback(scope, callback);\n            this.startBatch();\n            try {\n                delegate.method.call(delegate.scope);\n                this.endBatch();\n            } catch (x) {\n                this._info('Exception during execution of batch', x);\n                this.endBatch();\n                throw x;\n            }\n        };\n\n        /**\n         * Adds a listener for bayeux messages, performing the given callback in the given scope\n         * when a message for the given channel arrives.\n         * @param channel the channel the listener is interested to\n         * @param scope the scope of the callback, may be omitted\n         * @param callback the callback to call when a message is sent to the channel\n         * @returns the subscription handle to be passed to {@link #removeListener(object)}\n         * @see #removeListener(subscription)\n         */\n        this.addListener = function(channel, scope, callback) {\n            if (arguments.length < 2) {\n                throw 'Illegal arguments number: required 2, got ' + arguments.length;\n            }\n            if (!_isString(channel)) {\n                throw 'Illegal argument type: channel must be a string';\n            }\n\n            return _addListener(channel, scope, callback, true);\n        };\n\n        /**\n         * Removes the subscription obtained with a call to {@link #addListener(string, object, function)}.\n         * @param subscription the subscription to unsubscribe.\n         * @see #addListener(channel, scope, callback)\n         */\n        this.removeListener = function(subscription) {\n            // Beware of subscription.id == 0, which is falsy => cannot use !subscription.id\n            if (!subscription || !subscription.channel || !(\"id\" in subscription)) {\n                throw 'Invalid argument: expected subscription, not ' + subscription;\n            }\n\n            _removeListener(subscription);\n        };\n\n        /**\n         * Removes all listeners registered with {@link #addListener(channel, scope, callback)} or\n         * {@link #subscribe(channel, scope, callback)}.\n         */\n        this.clearListeners = function() {\n            _listeners = {};\n        };\n\n        /**\n         * Subscribes to the given channel, performing the given callback in the given scope\n         * when a message for the channel arrives.\n         * @param channel the channel to subscribe to\n         * @param scope the scope of the callback, may be omitted\n         * @param callback the callback to call when a message is sent to the channel\n         * @param subscribeProps an object to be merged with the subscribe message\n         * @param subscribeCallback a function to be invoked when the subscription is acknowledged\n         * @return the subscription handle to be passed to {@link #unsubscribe(object)}\n         */\n        this.subscribe = function(channel, scope, callback, subscribeProps, subscribeCallback) {\n            if (arguments.length < 2) {\n                throw 'Illegal arguments number: required 2, got ' + arguments.length;\n            }\n            if (!_isString(channel)) {\n                throw 'Illegal argument type: channel must be a string';\n            }\n            if (_isDisconnected()) {\n                throw 'Illegal state: disconnected';\n            }\n\n            // Normalize arguments\n            if (_isFunction(scope)) {\n                subscribeCallback = subscribeProps;\n                subscribeProps = callback;\n                callback = scope;\n                scope = undefined;\n            }\n            if (_isFunction(subscribeProps)) {\n                subscribeCallback = subscribeProps;\n                subscribeProps = undefined;\n            }\n\n            // Only send the message to the server if this client has not yet subscribed to the channel\n            var send = !_hasSubscriptions(channel);\n\n            var subscription = _addListener(channel, scope, callback, false);\n\n            if (send) {\n                // Send the subscription message after the subscription registration to avoid\n                // races where the server would send a message to the subscribers, but here\n                // on the client the subscription has not been added yet to the data structures\n                var bayeuxMessage = {\n                    id: _nextMessageId(),\n                    channel: '/meta/subscribe',\n                    subscription: channel\n                };\n                // Do not allow the user to override important fields.\n                var message = this._mixin(false, {}, subscribeProps, bayeuxMessage);\n\n                // Save the callback.\n                _cometd._putCallback(message.id, subscribeCallback);\n\n                _queueSend(message);\n            }\n\n            return subscription;\n        };\n\n        /**\n         * Unsubscribes the subscription obtained with a call to {@link #subscribe(string, object, function)}.\n         * @param subscription the subscription to unsubscribe.\n         * @param unsubscribeProps an object to be merged with the unsubscribe message\n         * @param unsubscribeCallback a function to be invoked when the unsubscription is acknowledged\n         */\n        this.unsubscribe = function(subscription, unsubscribeProps, unsubscribeCallback) {\n            if (arguments.length < 1) {\n                throw 'Illegal arguments number: required 1, got ' + arguments.length;\n            }\n            if (_isDisconnected()) {\n                throw 'Illegal state: disconnected';\n            }\n\n            if (_isFunction(unsubscribeProps)) {\n                unsubscribeCallback = unsubscribeProps;\n                unsubscribeProps = undefined;\n            }\n\n            // Remove the local listener before sending the message\n            // This ensures that if the server fails, this client does not get notifications\n            this.removeListener(subscription);\n\n            var channel = subscription.channel;\n            // Only send the message to the server if this client unsubscribes the last subscription\n            if (!_hasSubscriptions(channel)) {\n                var bayeuxMessage = {\n                    id: _nextMessageId(),\n                    channel: '/meta/unsubscribe',\n                    subscription: channel\n                };\n                // Do not allow the user to override important fields.\n                var message = this._mixin(false, {}, unsubscribeProps, bayeuxMessage);\n\n                // Save the callback.\n                _cometd._putCallback(message.id, unsubscribeCallback);\n\n                _queueSend(message);\n            }\n        };\n\n        this.resubscribe = function(subscription, subscribeProps) {\n            _removeSubscription(subscription);\n            if (subscription) {\n                return this.subscribe(subscription.channel, subscription.scope, subscription.callback, subscribeProps);\n            }\n            return undefined;\n        };\n\n        /**\n         * Removes all subscriptions added via {@link #subscribe(channel, scope, callback, subscribeProps)},\n         * but does not remove the listeners added via {@link addListener(channel, scope, callback)}.\n         */\n        this.clearSubscriptions = function() {\n            _clearSubscriptions();\n        };\n\n        /**\n         * Publishes a message on the given channel, containing the given content.\n         * @param channel the channel to publish the message to\n         * @param content the content of the message\n         * @param publishProps an object to be merged with the publish message\n         * @param publishCallback a function to be invoked when the publish is acknowledged by the server\n         */\n        this.publish = function(channel, content, publishProps, publishCallback) {\n            if (arguments.length < 1) {\n                throw 'Illegal arguments number: required 1, got ' + arguments.length;\n            }\n            if (!_isString(channel)) {\n                throw 'Illegal argument type: channel must be a string';\n            }\n            if (/^\\/meta\\//.test(channel)) {\n                throw 'Illegal argument: cannot publish to meta channels';\n            }\n            if (_isDisconnected()) {\n                throw 'Illegal state: disconnected';\n            }\n\n            if (_isFunction(content)) {\n                publishCallback = content;\n                content = {};\n                publishProps = undefined;\n            } else if (_isFunction(publishProps)) {\n                publishCallback = publishProps;\n                publishProps = undefined;\n            }\n\n            var bayeuxMessage = {\n                id: _nextMessageId(),\n                channel: channel,\n                data: content\n            };\n            // Do not allow the user to override important fields.\n            var message = this._mixin(false, {}, publishProps, bayeuxMessage);\n\n            // Save the callback.\n            _cometd._putCallback(message.id, publishCallback);\n\n            _queueSend(message);\n        };\n\n        /**\n         * Publishes a message with binary data on the given channel.\n         * The binary data chunk may be an ArrayBuffer, a DataView, a TypedArray\n         * (such as Uint8Array) or a plain integer array.\n         * The meta data object may contain additional application data such as\n         * a file name, a mime type, etc.\n         * @param channel the channel to publish the message to\n         * @param data the binary data to publish\n         * @param last whether the binary data chunk is the last\n         * @param meta an object containing meta data associated to the binary chunk\n         * @param callback a function to be invoked when the publish is acknowledged by the server\n         */\n        this.publishBinary = function(channel, data, last, meta, callback) {\n            if (_isFunction(data)) {\n                callback = data;\n                data = new ArrayBuffer(0);\n                last = true;\n                meta = undefined;\n            } else if (_isFunction(last)) {\n                callback = last;\n                last = true;\n                meta = undefined;\n            } else if (_isFunction(meta)) {\n                callback = meta;\n                meta = undefined;\n            }\n            var content = {\n                meta: meta,\n                data: data,\n                last: last\n            };\n            var ext = {\n                ext: {\n                    binary: {}\n                }\n            };\n            this.publish(channel, content, ext, callback);\n        };\n\n        this.remoteCall = function(target, content, timeout, callProps, callback) {\n            if (arguments.length < 1) {\n                throw 'Illegal arguments number: required 1, got ' + arguments.length;\n            }\n            if (!_isString(target)) {\n                throw 'Illegal argument type: target must be a string';\n            }\n            if (_isDisconnected()) {\n                throw 'Illegal state: disconnected';\n            }\n\n            if (_isFunction(content)) {\n                callback = content;\n                content = {};\n                timeout = _config.maxNetworkDelay;\n                callProps = undefined;\n            } else if (_isFunction(timeout)) {\n                callback = timeout;\n                timeout = _config.maxNetworkDelay;\n                callProps = undefined;\n            } else if (_isFunction(callProps)) {\n                callback = callProps;\n                callProps = undefined;\n            }\n\n            if (typeof timeout !== 'number') {\n                throw 'Illegal argument type: timeout must be a number';\n            }\n\n            if (!target.match(/^\\//)) {\n                target = '/' + target;\n            }\n            var channel = '/service' + target;\n\n            var bayeuxMessage = {\n                id: _nextMessageId(),\n                channel: channel,\n                data: content\n            };\n            var message = this._mixin(false, {}, callProps, bayeuxMessage);\n\n            var context = {\n                callback: callback\n            };\n            if (timeout > 0) {\n                context.timeout = _cometd.setTimeout(function() {\n                    _cometd._debug('Timing out remote call', message, 'after', timeout, 'ms');\n                    _failMessage({\n                        id: message.id,\n                        error: '406::timeout',\n                        successful: false,\n                        failure: {\n                            message: message,\n                            reason: 'Remote Call Timeout'\n                        }\n                    });\n                }, timeout);\n                _cometd._debug('Scheduled remote call timeout', message, 'in', timeout, 'ms');\n            }\n            _remoteCalls[message.id] = context;\n\n            _queueSend(message);\n        };\n\n        this.remoteCallBinary = function(target, data, last, meta, timeout, callback) {\n            if (_isFunction(data)) {\n                callback = data;\n                data = new ArrayBuffer(0);\n                last = true;\n                meta = undefined;\n                timeout = _config.maxNetworkDelay;\n            } else if (_isFunction(last)) {\n                callback = last;\n                last = true;\n                meta = undefined;\n                timeout = _config.maxNetworkDelay;\n            } else if (_isFunction(meta)) {\n                callback = meta;\n                meta = undefined;\n                timeout = _config.maxNetworkDelay;\n            } else if (_isFunction(timeout)) {\n                callback = timeout;\n                timeout = _config.maxNetworkDelay;\n            }\n\n            var content = {\n                meta: meta,\n                data: data,\n                last: last\n            };\n            var ext = {\n                ext: {\n                    binary: {}\n                }\n            };\n\n            this.remoteCall(target, content, timeout, ext, callback);\n        };\n\n        /**\n         * Returns a string representing the status of the bayeux communication with the Bayeux server.\n         */\n        this.getStatus = function() {\n            return _status;\n        };\n\n        /**\n         * Returns whether this instance has been disconnected.\n         */\n        this.isDisconnected = _isDisconnected;\n\n        /**\n         * Sets the backoff period used to increase the backoff time when retrying an unsuccessful or failed message.\n         * Default value is 1 second, which means if there is a persistent failure the retries will happen\n         * after 1 second, then after 2 seconds, then after 3 seconds, etc. So for example with 15 seconds of\n         * elapsed time, there will be 5 retries (at 1, 3, 6, 10 and 15 seconds elapsed).\n         * @param period the backoff period to set\n         * @see #getBackoffIncrement()\n         */\n        this.setBackoffIncrement = function(period) {\n            _config.backoffIncrement = period;\n        };\n\n        /**\n         * Returns the backoff period used to increase the backoff time when retrying an unsuccessful or failed message.\n         * @see #setBackoffIncrement(period)\n         */\n        this.getBackoffIncrement = function() {\n            return _config.backoffIncrement;\n        };\n\n        /**\n         * Returns the backoff period to wait before retrying an unsuccessful or failed message.\n         */\n        this.getBackoffPeriod = function() {\n            return _backoff;\n        };\n\n        /**\n         * Increases the backoff period up to the maximum value configured.\n         * @returns the backoff period after increment\n         * @see getBackoffIncrement\n         */\n        this.increaseBackoffPeriod = function() {\n            return _increaseBackoff();\n        };\n\n        /**\n         * Resets the backoff period to zero.\n         */\n        this.resetBackoffPeriod = function() {\n            _resetBackoff();\n        };\n\n        /**\n         * Sets the log level for console logging.\n         * Valid values are the strings 'error', 'warn', 'info' and 'debug', from\n         * less verbose to more verbose.\n         * @param level the log level string\n         */\n        this.setLogLevel = function(level) {\n            _config.logLevel = level;\n        };\n\n        /**\n         * Registers an extension whose callbacks are called for every incoming message\n         * (that comes from the server to this client implementation) and for every\n         * outgoing message (that originates from this client implementation for the\n         * server).\n         * The format of the extension object is the following:\n         * <pre>\n         * {\n         *     incoming: function(message) { ... },\n         *     outgoing: function(message) { ... }\n         * }\n         * </pre>\n         * Both properties are optional, but if they are present they will be called\n         * respectively for each incoming message and for each outgoing message.\n         * @param name the name of the extension\n         * @param extension the extension to register\n         * @return true if the extension was registered, false otherwise\n         * @see #unregisterExtension(name)\n         */\n        this.registerExtension = function(name, extension) {\n            if (arguments.length < 2) {\n                throw 'Illegal arguments number: required 2, got ' + arguments.length;\n            }\n            if (!_isString(name)) {\n                throw 'Illegal argument type: extension name must be a string';\n            }\n\n            var existing = false;\n            for (var i = 0; i < _extensions.length; ++i) {\n                var existingExtension = _extensions[i];\n                if (existingExtension.name === name) {\n                    existing = true;\n                    break;\n                }\n            }\n            if (!existing) {\n                _extensions.push({\n                    name: name,\n                    extension: extension\n                });\n                this._debug('Registered extension', name);\n\n                // Callback for extensions\n                if (_isFunction(extension.registered)) {\n                    extension.registered(name, this);\n                }\n\n                return true;\n            } else {\n                this._info('Could not register extension with name', name, 'since another extension with the same name already exists');\n                return false;\n            }\n        };\n\n        /**\n         * Unregister an extension previously registered with\n         * {@link #registerExtension(name, extension)}.\n         * @param name the name of the extension to unregister.\n         * @return true if the extension was unregistered, false otherwise\n         */\n        this.unregisterExtension = function(name) {\n            if (!_isString(name)) {\n                throw 'Illegal argument type: extension name must be a string';\n            }\n\n            var unregistered = false;\n            for (var i = 0; i < _extensions.length; ++i) {\n                var extension = _extensions[i];\n                if (extension.name === name) {\n                    _extensions.splice(i, 1);\n                    unregistered = true;\n                    this._debug('Unregistered extension', name);\n\n                    // Callback for extensions\n                    var ext = extension.extension;\n                    if (_isFunction(ext.unregistered)) {\n                        ext.unregistered();\n                    }\n\n                    break;\n                }\n            }\n            return unregistered;\n        };\n\n        /**\n         * Find the extension registered with the given name.\n         * @param name the name of the extension to find\n         * @return the extension found or null if no extension with the given name has been registered\n         */\n        this.getExtension = function(name) {\n            for (var i = 0; i < _extensions.length; ++i) {\n                var extension = _extensions[i];\n                if (extension.name === name) {\n                    return extension.extension;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Returns the name assigned to this CometD object, or the string 'default'\n         * if no name has been explicitly passed as parameter to the constructor.\n         */\n        this.getName = function() {\n            return _name;\n        };\n\n        /**\n         * Returns the clientId assigned by the Bayeux server during handshake.\n         */\n        this.getClientId = function() {\n            return _clientId;\n        };\n\n        /**\n         * Returns the URL of the Bayeux server.\n         */\n        this.getURL = function() {\n            if (_transport) {\n                var url = _transport.getURL();\n                if (url) {\n                    return url;\n                }\n                url = _config.urls[_transport.getType()];\n                if (url) {\n                    return url;\n                }\n            }\n            return _config.url;\n        };\n\n        this.getTransport = function() {\n            return _transport;\n        };\n\n        this.getConfiguration = function() {\n            return this._mixin(true, {}, _config);\n        };\n\n        this.getAdvice = function() {\n            return this._mixin(true, {}, _advice);\n        };\n\n        this.setTimeout = function(funktion, delay) {\n            return _scheduler.setTimeout(function() {\n                try {\n                    _cometd._debug('Invoking timed function', funktion);\n                    funktion();\n                } catch (x) {\n                    _cometd._debug('Exception invoking timed function', funktion, x);\n                }\n            }, delay);\n        };\n\n        this.clearTimeout = function(id) {\n            _scheduler.clearTimeout(id);\n        };\n\n        // Initialize transports.\n        if (window.WebSocket) {\n            this.registerTransport('websocket', new WebSocketTransport());\n        }\n        this.registerTransport('long-polling', new LongPollingTransport());\n        this.registerTransport('callback-polling', new CallbackPollingTransport());\n    };\n\n    var _z85EncodeTable = [\n        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n        'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n        'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D',\n        'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\n        'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n        'Y', 'Z', '.', '-', ':', '+', '=', '^', '!', '/',\n        '*', '?', '&', '<', '>', '(', ')', '[', ']', '{',\n        '}', '@', '%', '$', '#'\n    ];\n    var _z85DecodeTable = [\n        0x00, 0x44, 0x00, 0x54, 0x53, 0x52, 0x48, 0x00,\n        0x4B, 0x4C, 0x46, 0x41, 0x00, 0x3F, 0x3E, 0x45,\n        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n        0x08, 0x09, 0x40, 0x00, 0x49, 0x42, 0x4A, 0x47,\n        0x51, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A,\n        0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32,\n        0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A,\n        0x3B, 0x3C, 0x3D, 0x4D, 0x00, 0x4E, 0x43, 0x00,\n        0x00, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,\n        0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,\n        0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,\n        0x21, 0x22, 0x23, 0x4F, 0x00, 0x50, 0x00, 0x00\n    ];\n    var Z85 = {\n        encode: function(bytes) {\n            var buffer = null;\n            if (bytes instanceof ArrayBuffer) {\n                buffer = bytes;\n            } else if (bytes.buffer instanceof ArrayBuffer) {\n                buffer = bytes.buffer;\n            } else if (Array.isArray(bytes)) {\n                buffer = new Uint8Array(bytes).buffer;\n            }\n            if (buffer == null) {\n                throw 'Cannot Z85 encode ' + bytes;\n            }\n\n            var length = buffer.byteLength;\n            var remainder = length % 4;\n            var padding = 4 - (remainder === 0 ? 4 : remainder);\n            var view = new DataView(buffer);\n            var result = '';\n            var value = 0;\n            for (var i = 0; i < length + padding; ++i) {\n                var isPadding = i >= length;\n                value = value * 256 + (isPadding ? 0 : view.getUint8(i));\n                if ((i + 1) % 4 === 0) {\n                    var divisor = 85 * 85 * 85 * 85;\n                    for (var j = 5; j > 0; --j) {\n                        if (!isPadding || j > padding) {\n                            var code = Math.floor(value / divisor) % 85;\n                            result += _z85EncodeTable[code];\n                        }\n                        divisor /= 85;\n                    }\n                    value = 0;\n                }\n            }\n\n            return result;\n        },\n        decode: function(string) {\n            var remainder = string.length % 5;\n            var padding = 5 - (remainder === 0 ? 5 : remainder);\n            for (var p = 0; p < padding; ++p) {\n                string += _z85EncodeTable[_z85EncodeTable.length - 1];\n            }\n            var length = string.length;\n\n            var buffer = new ArrayBuffer((length * 4 / 5) - padding);\n            var view = new DataView(buffer);\n            var value = 0;\n            var charIdx = 0;\n            var byteIdx = 0;\n            for (var i = 0; i < length; ++i) {\n                var code = string.charCodeAt(charIdx++) - 32;\n                value = value * 85 + _z85DecodeTable[code];\n                if (charIdx % 5 === 0) {\n                    var divisor = 256 * 256 * 256;\n                    while (divisor >= 1) {\n                        if (byteIdx < view.byteLength) {\n                            view.setUint8(byteIdx++, Math.floor(value / divisor) % 256);\n                        }\n                        divisor /= 256;\n                    }\n                    value = 0;\n                }\n            }\n\n            return buffer;\n        }\n    };\n\n    return {\n        CometD: CometD,\n        Transport: Transport,\n        RequestTransport: RequestTransport,\n        LongPollingTransport: LongPollingTransport,\n        CallbackPollingTransport: CallbackPollingTransport,\n        WebSocketTransport: WebSocketTransport,\n        Utils: Utils,\n        Z85: Z85\n    };\n}));\n","const lib = require('cometd');\nmodule.exports = {\n  CometD: lib.CometD,\n  default: lib\n};\n","import { CometD } from 'isomorphic-cometd';\nimport { IFetchClient } from '../core';\nimport { MetaChannel } from './MetaChannel';\n\nexport interface ICometdConfig {\n  url: string;\n  logLevel?: string;\n  requestHeaders?: any;\n  appendMessageTypeToURL?: boolean;\n  stickyReconnect?: boolean;\n}\n\nexport class Realtime {\n  private cometd: CometD = new CometD();\n\n  /**\n   * Allows to set up a realtime (websocket or long-polling) connection to the platform.\n   * @param client The fetch client instance to use\n   * @param url The URL to connect to\n   * @param handshakeCallback A function which is called on succeeded or failed handshake\n   */\n  constructor(\n    private client: IFetchClient,\n    private url: string = '/notification/realtime',\n    handshakeCallback?\n  ) {\n    this.cometd.websocketEnabled = true;\n    this.cometd.addListener(MetaChannel.HANDSHAKE, handshakeCallback || this.metaHandshake);\n  }\n\n  /**\n   * Subscribes to a realtime channel to listen for data.\n   * @param channel The channel to connect to\n   * @param callback A function to call when data is received\n   */\n  subscribe(channel: string, callback: (data: any) => void): object {\n    this.checkConnection();\n    return this.cometd.subscribe(channel, callback);\n  }\n\n  /**\n   * Cancels the listening to a channel.\n   * @param subscription The subscription object returned by subscribe()\n   */\n  unsubscribe(subscription: object): object {\n    return this.cometd.unsubscribe(subscription);\n  }\n\n  /**\n   * Disconnects the current connection.\n   */\n  disconnect(): void {\n    this.cometd.disconnect();\n  }\n\n  private checkConnection() {\n    const { cometd, client, url } = this;\n    if (cometd.isDisconnected()) {\n      const { headers } = client.getFetchOptions();\n      const config = {\n        url: client.getUrl(url),\n        requestHeaders: headers\n      };\n      cometd.configure(config);\n      this.handshake(client.getCometdHandshake());\n    }\n  }\n\n  private handshake(config: object) {\n    this.cometd.handshake(config);\n  }\n\n  private metaHandshake = msg => {\n    if (!msg.successful) {\n      throw new Error('Handshake failed');\n    }\n  };\n}\n","import { IIdentified, Service, IResult, IResultList } from '../core';\nimport { IEvent } from './IEvent';\n\n/**\n * This class allows managing for events.\n */\nexport class EventService extends Service<IEvent> {\n  protected baseUrl = 'event';\n  protected listUrl = 'events';\n  protected propertyName = 'events';\n  protected channel = '/events/*';\n\n  /**\n   * Gets the details of a specific event.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const eventId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await eventService.detail(eventId);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IIdentified): Promise<IResult<IEvent>> {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new event.\n   *\n   * @param {IEvent} entity Event object with mandantory fragments.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const mandantoryObject: IEvent = {\n   *    source: device,\n   *    text: 'I am an Event!',\n   *    time: '2018-05-02T10:08:00Z',\n   *    type: 'device-type-here',\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await eventService.create(mandantoryObject);\n   *  })();\n   * ```\n   */\n  async create(entity: IEvent): Promise<IResult<IEvent>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates event data.\n   *\n   * @param {Partial<IEvent>} entity Event is partially updatable.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialUpdateObject: Partial<IEvent> = {\n   *    source: device,\n   *    text: 'Changed Event!'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await eventService.update(partialUpdateObject);\n   *  })();\n   * ```\n   */\n  async update(entity: Partial<IEvent>): Promise<IResult<IEvent>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of events filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying events.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await eventService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}): Promise<IResultList<IEvent>> {\n    return super.list(filter);\n  }\n\n  /**\n   * Removes an event with given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {string | number | IIdentified} entityOrId entity or id of the event.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const eventId: number = 1;\n   *\n   *   (async () => {\n   *     const {data, res} = await eventService.delete(eventId);\n   *     // data will be null\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | number | IIdentified): Promise<IResult<null>> {\n    return super.delete(entityOrId);\n  }\n}\n","/* eslint-env browser */\nmodule.exports = typeof self == 'object' ? self.FormData : window.FormData;\n","import FormData from 'form-data';\nimport { Stream } from 'stream';\nimport { Service, IResult, IFetchResponse } from '../core';\nimport { IEvent } from './IEvent';\nimport { IEventBinary } from './IEventBinary';\n\nexport class EventBinaryService extends Service<IEventBinary> {\n  protected baseUrl = 'event';\n  protected listUrl = 'events';\n\n  /**\n   * Uploads an event binary.\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {Stream | Buffer | File | Blob} file file to upload.\n   * @param {string | number | IEvent} eventOrId Event or Id of the Event.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const file = Buffer.from('aaa');\n   *   const eventId: string | number = 123;\n   *\n   *    (async () => {\n   *      const {data, res} = await eventBinaryService.upload(file, eventId);\n   *   })();\n   * ```\n   */\n  async upload(\n    file: Stream | Buffer | File | Blob,\n    entityOrId: string | number | IEvent\n  ): Promise<IResult<IEventBinary>> {\n    const method = 'POST';\n    const url = this.getDetailUrl(entityOrId);\n    const body = new FormData();\n\n    body.append('file', file);\n    const headers = {\n      accept: 'application/json'\n    };\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Downloads the binary for a given event.\n   * @returns Response wrapped in [[IFetchResponse]]\n   *\n   * @param {string | number | IEvent} eventOrId Event or Id of the Event.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const eventId: string | number = 123;\n   *\n   *    (async () => {\n   *      const res = await eventBinaryService.download(eventId);\n   *   })();\n   */\n  async download(entityOrId: string | number | IEvent): Promise<IFetchResponse> {\n    const url = this.getDetailUrl(entityOrId);\n    return await this.fetch(url);\n  }\n\n  /**\n   * Removes the binary for a given event.\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {string | number | IEvent} eventOrId Event or Id of the Event.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const eventId: string | number = 123;\n   *\n   *    (async () => {\n   *      const {data, res} = await eventBinaryService.delete(eventId);\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | number | IEvent) {\n    return super.delete(entityOrId);\n  }\n\n  protected getDetailUrl(entityOrId: string | number | IEvent): string {\n    let id: string | number;\n    if (typeof entityOrId === 'object' && entityOrId.id) {\n      id = entityOrId.id;\n    } else {\n      id = entityOrId as string;\n    }\n    return `${this.listUrl}/${id}/binaries`;\n  }\n}\n","import FormData from 'form-data';\nimport { Stream } from 'stream';\nimport { Service, IResult, IFetchResponse, IFetchOptions } from '../core';\nimport { IdReference } from './InventoryService';\nimport { IManagedObject, IManagedObjectBinary } from './IManagedObject';\n\nexport class InventoryBinaryService extends Service<IManagedObjectBinary> {\n  protected baseUrl = 'inventory';\n  protected listUrl = 'binaries';\n  protected propertyName = 'managedObjects';\n\n  /**\n   * Uploads a file and creates a managed object with its metadata.\n   * @param file A file to be uploaded.\n   * @param managedObject An object containing metadata about the file.\n   * Note that you can specify `fileType` and `fileName` in case `file` does not define them\n   * but these two properties will be removed from `managedObject` before saving.\n   */\n  async create(\n    file: Stream | Buffer | File | Blob,\n    managedObject: Partial<IManagedObject> = {}\n  ): Promise<IResult<IManagedObjectBinary>> {\n    const method = 'POST';\n    const url = this.listUrl;\n    const body = new FormData();\n    let fileName;\n    let fileType;\n    if (managedObject.fileName) {\n      fileName = managedObject.fileName;\n      delete managedObject.fileName;\n    }\n    if (managedObject.fileType) {\n      fileType = managedObject.fileType;\n      delete managedObject.fileType;\n    }\n    if (!fileName) {\n      fileName = 'bin';\n    }\n    if (typeof File !== 'undefined' && file instanceof File) {\n      fileName = file.name;\n      fileType = file.type;\n    }\n    if (!managedObject.name) {\n      managedObject.name = fileName;\n    }\n    if (!managedObject.type) {\n      managedObject.type = fileType || 'c8y_upload';\n    }\n    body.append('file', file, fileName);\n    body.append('object', JSON.stringify(managedObject));\n    const headers = {\n      accept: 'application/json'\n    };\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n\n  async delete(managedObjectOrId: IdReference) {\n    return super.delete(managedObjectOrId);\n  }\n\n  async download(managedObjectOrId: IdReference, init?: IFetchOptions): Promise<IFetchResponse> {\n    const url = this.getDetailUrl(managedObjectOrId);\n    return await this.fetch(url, init);\n  }\n\n  /**\n   * Uploads a file and creates a managed object with its metadata. What's more, it invokes an upload progress callback.\n   * @param file A file to be uploaded.\n   * @param managedObject An object containing metadata about the file.\n   * @param onProgress Event handler for progress update, invoked while the browser is uploading the file.\n   */\n  createWithProgress(\n    file: Stream | Buffer | File | Blob,\n    onProgress: EventListener,\n    managedObject: Partial<IManagedObject> = {}\n  ): XMLHttpRequest {\n    const url = `/${this.baseUrl}/${this.listUrl}`;\n    const method = 'POST';\n    const body = new FormData();\n    let fileName;\n    let fileType;\n    if (managedObject.fileName) {\n      fileName = managedObject.fileName;\n      delete managedObject.fileName;\n    }\n    if (managedObject.fileType) {\n      fileType = managedObject.fileType;\n      delete managedObject.fileType;\n    }\n    if (!fileName) {\n      fileName = 'bin';\n    }\n    if (typeof File !== 'undefined' && file instanceof File) {\n      fileName = file.name;\n      fileType = file.type;\n    }\n    if (!managedObject.name) {\n      managedObject.name = fileName;\n    }\n    if (!managedObject.type) {\n      managedObject.type = fileType || 'c8y_upload';\n    }\n    body.append('file', file, fileName);\n    body.append('object', JSON.stringify(managedObject));\n    let bodyHeaders;\n\n    if (typeof body.getHeaders === 'function') {\n      bodyHeaders = body.getHeaders();\n    }\n    const headers = this.client.getFetchOptions().headers;\n    Object.assign(\n      headers,\n      {\n        accept: 'application/json'\n      },\n      bodyHeaders\n    );\n\n    const xhr = new XMLHttpRequest();\n    xhr.open(method, url, true);\n    for (const key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n    xhr.upload.addEventListener('progress', onProgress);\n\n    let xhrBody: XMLHttpRequestBodyInit;\n    if (typeof body.getBuffer === 'function') {\n      xhrBody = body.getBuffer();\n    } else {\n      xhrBody = body as any;\n    }\n    xhr.send(xhrBody);\n\n    return xhr;\n  }\n\n  getXMLHttpResponse(xhr): Promise<IResult<IManagedObjectBinary>> {\n    return new Promise((res, rej) => {\n      xhr.addEventListener('loadend', () => {\n        xhr.readyState === 4 && (xhr.status === 200 || xhr.status === 201)\n          ? res(JSON.parse(xhr.responseText))\n          : rej(\n              xhr.responseText ? { data: JSON.parse(xhr.responseText) } : 'Could not upload file.'\n            );\n      });\n    });\n  }\n\n  /**\n   * Gets binary managed object's id from its download or self URL.\n   *\n   * @param {string} url URL string.\n   *\n   * @returns {number} Binary managed object's id.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const id = InventoryBinaryService.getIdFromUrl('http://mytenant.cumulocity.com/inventory/binaries/12345');\n   * ```\n   */\n  getIdFromUrl(url: string): string {\n    if (!!url) {\n      const regexp = new RegExp(\n        '\\\\/inventory\\\\/binaries\\\\/(\\\\d+)|\\\\/inventory\\\\/managedObjects\\\\/(\\\\d+)'\n      );\n      const matches = url.match(regexp);\n      return matches && (matches[1] || matches[2]);\n    }\n  }\n}\n","import { IIdentified, Service, IResult, IResultList, IFetchClient, QueriesUtil } from '../core';\nimport { IManagedObject } from './IManagedObject';\nimport { InventoryBinaryService } from './InventoryBinaryService';\n\nimport { Realtime } from '../realtime';\n\n/**\n * Possible types of a child.\n */\nexport enum ChildType {\n  ASSETS = 'childAssets',\n  DEVICES = 'childDevices',\n  ADDITIONS = 'childAdditions'\n}\n\n/**\n * IdReference is only a combined type of string | number | IIdentified\n */\nexport type IdReference = string | number | IIdentified;\n\n/**\n * This class allows for managing managed objects and different child types, see [[ChildType]].\n */\nexport class InventoryService extends Service<IManagedObject> {\n  binary: InventoryBinaryService;\n  queriesUtil: QueriesUtil;\n  protected baseUrl = 'inventory';\n  protected listUrl = 'managedObjects';\n  protected propertyName = 'managedObjects';\n  protected channel = '/managedobjects/*';\n  protected inventoriesQueryParamName = 'query';\n  protected devicesQueryParamName = 'q';\n\n  constructor(client: IFetchClient, realtime?: Realtime) {\n    super(client, realtime);\n    this.queriesUtil = new QueriesUtil();\n    this.binary = new InventoryBinaryService(client);\n  }\n\n  /**\n   * Gets the details of managed object\n   *\n   * @param {IdReference} managedObjectOrId ManagedObject or Id of the ManagedObject.\n   * @param {object} filter Filter object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const managedObjId: number = 1;\n   *    const filter = { withChildren: false };\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.detail(managedObjId, filter);\n   *   })();\n   * ```\n   */\n  async detail(managedObjectOrId: IdReference, filter: object = {}) {\n    return super.detail(managedObjectOrId, filter);\n  }\n\n  /**\n   * Creates a new managed object.\n   *\n   * @param {Partial<IManagedObject>} managedObject\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialManagedObj: Partial<IManagedObject> = {\n   *    customFragment: 'yourData'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await inventoryService.create(partialManagedObj);\n   *  })();\n   * ```\n   */\n  async create(managedObject: Partial<IManagedObject>) {\n    return super.create(managedObject);\n  }\n\n  /**\n   * Updates managed object data.\n   *\n   * @param {Partial<IManagedObject>} managedObject Managed object is partially updatable.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialUpdateObject: Partial<IManagedObject> = {\n   *    customFragment: 'Changed data',\n   *    name: 'Name'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await inventoryService.update(partialUpdateObject);\n   *  })();\n   * ```\n   */\n  async update(managedObject: Partial<IManagedObject>) {\n    return super.update(managedObject);\n  }\n\n  /**\n   * Gets the list of managed objects filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying managed objects.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await inventoryService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n\n  /**\n   * Gets the list of all managed objects filtered and sorted by given query.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying managed objects.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *  const query = {\n   *      name: 'MY-NAM*'\n   *  }\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await inventoryService.listQuery(query, filter);\n   *   })();\n   * ```\n   */\n  async listQuery(query, filter: object = {}) {\n    filter[this.inventoriesQueryParamName] = this.queriesUtil.buildQuery(query);\n    return super.list(filter);\n  }\n\n  /**\n   * Gets the list of all devices filtered and sorted by given query.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying devices.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *  const query = {\n   *      name: 'MY-NAM*'\n   *  }\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await inventoryService.listQueryDevices(query, filter);\n   *   })();\n   * ```\n   */\n  async listQueryDevices(query, filter: object = {}) {\n    filter[this.devicesQueryParamName] = this.queriesUtil.buildQuery(query);\n    return super.list(filter);\n  }\n\n  /**\n   * Removes managed object with given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IdReference} managedObjectOrId ManagedObject or Id of the ManagedObject.\n   * @param {object} params Additional query params.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const managedObjectId: number = 1;\n   *   const params: any = {\n   *     cascade: true\n   *   }\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.delete(managedObjectId, params);\n   *   })();\n   * ```\n   */\n  async delete(managedObjectOrId: IdReference, params: any = {}) {\n    return super.delete(managedObjectOrId, params);\n  }\n\n  /**\n   * Gets a list of child additions from a given managed object (parent)\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {IdReference} parentReference\n   * @param {object} filter\n   *\n   * **Example**\n   * ```typescript\n   *    const parentReferenceId: IdReference = 1;\n   *\n   *    const filter: object = {\n   *      pageSize: 100,\n   *      withTotalPages: true\n   *    };\n   *\n   *    (async () => {\n   *      const {data, res, paging} = await inventoryService.childAdditionsList(parentReferenceId, filter);\n   *    })();\n   * ```\n   */\n  async childAdditionsList(parentReference: IdReference, filter: object = {}) {\n    return this.listChildren(ChildType.ADDITIONS, parentReference, filter);\n  }\n\n  /**\n   * Creates a new managed object as child addition to another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {Partial<IManagedObject>} managedObject\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const mOAsChildAddition: Partial<IManagedObject> = {\n   *      name: 'Child addition MO',\n   *      type: 'new type',\n   *      ...\n   *    };\n   *\n   *    // This is the identifier of the managed object which should be the parent of\n   *    // mOAsChildAddition, see above.\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childAdditionsCreate(mOAsChildAddition, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childAdditionsCreate(managedObject: Partial<IManagedObject>, parentReference: IdReference) {\n    return this.createChild(ChildType.ADDITIONS, managedObject, parentReference);\n  }\n\n  /**\n   * Adds an existing managed object as child addition to another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IdReference} childReference\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const childRef: number = 2;\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childAdditionsCreate(childRef, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childAdditionsAdd(childReference: IdReference, parentReference: IdReference) {\n    return this.addChild(ChildType.ADDITIONS, childReference, parentReference);\n  }\n\n  /**\n   * Removes an existing managed object as child addition from another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IdReference} childReference\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const childRef: number = 2;\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childAdditionsRemove(childRef, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childAdditionsRemove(childReference: IdReference, parentReference: IdReference) {\n    return this.removeChild(ChildType.ADDITIONS, childReference, parentReference);\n  }\n\n  /**\n   * Gets a list of child assets from a given managed object (parent)\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {IdReference} parentReference\n   * @param {object} filter\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const parentReferenceId: IdReference = 1;\n   *\n   *    const filter: object = {\n   *      pageSize: 100,\n   *      withTotalPages: true\n   *    };\n   *\n   *    (async () => {\n   *      const {data, res, paging} = await inventoryService.childAssetsList(parentReferenceId, filter);\n   *    })();\n   * ```\n   */\n  async childAssetsList(parentReference: IdReference, filter: object = {}) {\n    return this.listChildren(ChildType.ASSETS, parentReference, filter);\n  }\n\n  /**\n   * Creates a new managed object as child asset to another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {Partial<IManagedObject>} managedObject\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const mOAsChildAsset: Partial<IManagedObject> = {\n   *      name: 'Child asset MO',\n   *      type: 'new type',\n   *      ...\n   *    };\n   *\n   *    // This is the identifier of the managed object which should be the parent of\n   *    // mOAsChildAsset, see above.\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childAdditionsCreate(mOAsChildAddition, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childAssetsCreate(managedObject: Partial<IManagedObject>, parentReference: IdReference) {\n    return this.createChild(ChildType.ASSETS, managedObject, parentReference);\n  }\n\n  /**\n   * Adds an existing managed object as child asset to another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IdReference} childReference\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const childRef: number = 2;\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childAssetsAdd(childRef, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childAssetsAdd(childReference: IdReference, parentReference: IdReference) {\n    return this.addChild(ChildType.ASSETS, childReference, parentReference);\n  }\n  /**\n   * Adds bulk of existing managed objects as child assets to another managed object (parent).\n   *\n   * @returns Response wrapped in array of [[IResult]]\n   *\n   * @param {IdReference[]} childReference List of existing managed objects IDs that should be added to another managed object (parent).\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const childAssetsRefIds: string[] = ['2', '3'];\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childAssetsBulkAdd(childAssetsRefIds, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childAssetsBulkAdd(childReference: IdReference[], parentReference: IdReference) {\n    return this.addChildBulk(ChildType.ASSETS, childReference, parentReference);\n  }\n\n  /**\n   * Removes an existing managed object as child asset from another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IdReference} childReference\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const childRef: number = 2;\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childAssetsRemove(childRef, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childAssetsRemove(childReference: IdReference, parentReference: IdReference) {\n    return this.removeChild(ChildType.ASSETS, childReference, parentReference);\n  }\n\n  /**\n   * Gets a list of child devices from a given managed object (parent)\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {IdReference} parentReference\n   * @param {object} filter\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const parentReferenceId: IdReference = 1;\n   *\n   *    const filter: object = {\n   *      pageSize: 100,\n   *      withTotalPages: true\n   *    };\n   *\n   *    (async () => {\n   *      const {data, res, paging} = await inventoryService.childDevicesList(parentReferenceId, filter);\n   *    })();\n   * ```\n   */\n  async childDevicesList(parentReference: IdReference, filter: object = {}) {\n    return this.listChildren(ChildType.DEVICES, parentReference, filter);\n  }\n\n  /**\n   * Creates a new managed object as child device to another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {Partial<IManagedObject>} managedObject\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const mOAsChildDevice: Partial<IManagedObject> = {\n   *      name: 'Child device MO',\n   *      type: 'new type',\n   *      ...\n   *    };\n   *\n   *    // This is the identifier of the managed object which should be the parent of\n   *    // mOAsChildDevice, see above.\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childDevicesCreate(mOAsChildDevice, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childDevicesCreate(managedObject: Partial<IManagedObject>, parentReference: IdReference) {\n    return this.createChild(ChildType.DEVICES, managedObject, parentReference);\n  }\n\n  /**\n   * Adds an existing managed object as child device to another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IdReference} childReference\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const childRef: number = 2;\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childDevicesAdd(childRef, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childDevicesAdd(childReference: IdReference, parentReference: IdReference) {\n    return this.addChild(ChildType.DEVICES, childReference, parentReference);\n  }\n\n  /**\n   * Removes an existing managed object as child device from another managed object (parent)\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IdReference} childReference\n   * @param {IdReference} parentReference\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const childRef: number = 2;\n   *    const parentReferenceId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryService.childDevicesRemove(childRef, parentReferenceId);\n   *    })();\n   * ```\n   */\n  async childDevicesRemove(childReference: IdReference, parentReference: IdReference) {\n    return this.removeChild(ChildType.DEVICES, childReference, parentReference);\n  }\n\n  /**\n   * Gets an array of measurement fragments supported by the specified managedObject.\n   * e.g. [\"c8y_Temperature\", \"c8y_Humidity\"]\n   *\n   * @returns array of supported measurement fragments\n   *\n   * @param {IdReference} managedObjectOrId\n   */\n  async getSupportedMeasurements(managedObjectOrId: IdReference): Promise<string[]> {\n    return this.getSupportedMeasurementDetails(managedObjectOrId, 'supportedMeasurements');\n  }\n\n  /**\n   * Gets an array of measurement series supported by the specified managedObject.\n   * e.g. [\"c8y_Temperature.T\", \"c8y_Humidity.H\"]\n   *\n   * @returns array of supported measurement series\n   *\n   * @param {IdReference} managedObjectOrId\n   */\n  async getSupportedSeries(managedObjectOrId: IdReference): Promise<string[]> {\n    return this.getSupportedMeasurementDetails(managedObjectOrId, 'supportedSeries');\n  }\n\n  /**\n   * Gets an array of measurement series and fragments supported by the specified managedObject.\n   *\n   * @returns array of supported measurement series and fragments\n   *\n   * @param {IdReference} managedObjectOrId\n   */\n  async getMeasurementsAndSeries(managedObjectOrId: IdReference): Promise<\n    Array<{\n      fragment: string;\n      series: string;\n    }>\n  > {\n    const [supportedMeasurements, supportedSeries] = await Promise.all([\n      this.getSupportedMeasurements(managedObjectOrId),\n      this.getSupportedSeries(managedObjectOrId)\n    ]);\n\n    // sort by longest measurement fragment first\n    const sortedSupportedMeasurements = supportedMeasurements.sort((a, b) => b.length - a.length);\n\n    return supportedSeries\n      .map(s => {\n        const fragment = sortedSupportedMeasurements.find(m => s.indexOf(`${m}.`) === 0);\n        const series = s.replace(`${fragment}.`, '');\n        return {\n          fragment,\n          series\n        };\n      })\n      .filter(obj => !!obj.fragment);\n  }\n\n  /**\n   * Gets a list of KPIs (data point library entries) matching a given managed object\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {IdReference} parentReference\n   * @param {object} filter\n   */\n  async assetKPIsList(parentReference: IdReference, filter: object = {}) {\n    return this.listKPIs(parentReference, filter);\n  }\n\n  protected async listKPIs(\n    parentReference: IdReference,\n    filter: object = {}\n  ): Promise<IResultList<IManagedObject>> {\n    const headers = { accept: 'application/json' };\n    const url = this.getChildrenUrl('kpis', parentReference);\n    const res = await this.fetch(url, this.changeFetchOptions({ headers, params: filter }, url));\n    const json = await res.json();\n    const data = json[this.propertyName];\n    const paging = this.getPaging(json, filter);\n    return { res, data, paging };\n  }\n\n  protected onBeforeUpdate(objWithId: Partial<IManagedObject>): Partial<IManagedObject> {\n    delete objWithId.lastUpdated;\n    return objWithId;\n  }\n\n  protected onBeforeCreate(managedObject: Partial<IManagedObject>): Partial<IManagedObject> {\n    delete managedObject.id;\n    delete managedObject.lastUpdated;\n    return managedObject;\n  }\n\n  private getChildrenUrl(type: ChildType | string, parentReference: IdReference): string {\n    return `${this.getDetailUrl(parentReference)}/${type}`;\n  }\n\n  private getChildUrl(\n    type: ChildType,\n    childReference: IdReference,\n    parentReference: IdReference\n  ): string {\n    const childId = this.getIdString(childReference);\n    return `${this.getChildrenUrl(type, parentReference)}/${childId}`;\n  }\n\n  private async listChildren(\n    type: ChildType,\n    parentReference: IdReference,\n    filter: object = {}\n  ): Promise<IResultList<IManagedObject>> {\n    const headers = { 'content-type': 'application/json' };\n    const url = this.getChildrenUrl(type, parentReference);\n    const res = await this.fetch(url, { headers, params: filter });\n    const json = await res.json();\n    const data = json.references.map(ref => ref.managedObject);\n    const paging = this.getPaging(json, filter);\n    paging.list = pagingFilter => this.listChildren(type, parentReference, pagingFilter);\n    return { res, data, paging };\n  }\n\n  private async createChild(\n    type: ChildType,\n    managedObject: Partial<IManagedObject>,\n    parentReference: IdReference\n  ): Promise<IResult<IIdentified>> {\n    const url = this.getChildrenUrl(type, parentReference);\n    const method = 'POST';\n    const body = JSON.stringify(this.onBeforeCreate(managedObject));\n    const headers = { 'content-type': this.mimeType('managedObject'), accept: 'application/json' };\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  private async addChild(\n    type: ChildType,\n    childReference: IdReference,\n    parentReference: IdReference\n  ): Promise<IResult<IIdentified>> {\n    const url = this.getChildrenUrl(type, parentReference);\n    const method = 'POST';\n    const childId = this.getIdString(childReference);\n    const body = JSON.stringify({ managedObject: { id: String(childId) } });\n    const headers = {\n      accept: 'application/json',\n      'content-type': this.mimeType('managedObjectReference')\n    };\n    const res = await this.fetch(url, { method, body, headers });\n    let data = await res.json();\n    data = data.managedObject;\n    return { res, data };\n  }\n\n  private async addChildBulk(\n    type: ChildType,\n    childReferenceArray: IdReference[],\n    parentReference: IdReference\n  ): Promise<IResultList<IIdentified>> {\n    const url = this.getChildrenUrl(type, parentReference);\n    const method = 'POST';\n    const references = childReferenceArray.map(childId => ({\n      managedObject: {\n        id: this.getIdString(childId)\n      }\n    }));\n    const body = JSON.stringify({\n      references\n    });\n    const headers = {\n      accept: 'application/json',\n      'content-type': this.mimeType('managedObjectReferenceCollection')\n    };\n    const res = await this.fetch(url, { method, body, headers });\n    const data = (await res.json()).references;\n    return { res, data: data.map(obj => obj.managedObject) };\n  }\n\n  private async removeChild(\n    type: ChildType,\n    childReference: IdReference,\n    parentReference: IdReference\n  ): Promise<IResult<null>> {\n    const childId = this.getIdString(childReference);\n    const url = `${this.getChildrenUrl(type, parentReference)}/${childId}`;\n    const method = 'DELETE';\n    const headers = { accept: 'application/json' };\n    const res = await this.fetch(url, { method, headers });\n    const data = null;\n    return { res, data };\n  }\n\n  private async getSupportedMeasurementDetails(\n    managedObjectOrId: IdReference,\n    type: 'supportedMeasurements' | 'supportedSeries' = 'supportedSeries'\n  ): Promise<string[]> {\n    const url = `${this.getDetailUrl(managedObjectOrId)}/${type}`;\n    this.getIdString(managedObjectOrId);\n    const headers = { accept: 'application/json' };\n    const res = await this.fetch(url, { headers });\n    const data = await res.json();\n    return data.c8y_SupportedMeasurements || data.c8y_SupportedSeries;\n  }\n}\n","import { IIdentified, Service, IResult } from '../core';\nimport { IMeasurement, IMeasurementCreate } from './IMeasurement';\nimport { ISeriesFilter } from './ISeriesFilter';\nimport { ISeries } from './ISeries';\n\n/**\n * This class allows for managing measurements.\n */\nexport class MeasurementService extends Service<IMeasurement> {\n  protected baseUrl = 'measurement';\n  protected listUrl = 'measurements';\n  protected propertyName = 'measurements';\n  protected channel = '/measurements/*';\n\n  /**\n   * Gets the details of selected measurement.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @deprecated As of version 10.16.0.0 and the usage of the time series database,\n   * reading a single measurement via id is not supported any more.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const measurementId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await measurementService.detail(measurementId);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IIdentified) {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new measurement.\n   *\n   * @param {Partial<IMeasurementCreate>} entity At least sourceId is mandantory.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const mandantoryObject: Partial<IMeasurementCreate> = {\n   *    sourceId: device.id,\n   *    fragment: { series: { unit: '%', value: 51 } },\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await measurementService.create(mandantoryObject);\n   *  })();\n   * ```\n   */\n  async create(entity: Partial<IMeasurementCreate>) {\n    return super.create(this.onBeforeCreate(entity));\n  }\n\n  /**\n   * Gets the list of measurements filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying measurements.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await measurementService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n\n  /**\n   * Removes a measurement with given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {string | number | IIdentified} entityOrId\n   *\n   * @deprecated As of version 10.16.0.0 and the usage of the time series database,\n   * deleting a single measurement via id is not supported any more.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const id: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await measurementService.delete(id);\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | number | IIdentified) {\n    return super.delete(entityOrId);\n  }\n\n  /**\n   * Gets the list of series in a measurement filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {object} filter Object containing filters for querying measurements.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *    dateFrom: '2018-02-06T10:43:55.077Z',\n   *    dateTo: '2018-02-06T10:50:55.077Z',\n   *    source: device.id\n   *  };\n   *\n   *   (async () => {\n   *     const {data, res} = await measurementService.listSeries(filter);\n   *   })();\n   * ```\n   */\n  async listSeries(params: ISeriesFilter): Promise<IResult<ISeries>> {\n    const url = `${this.baseUrl}/${this.listUrl}/series`;\n    const res = await this.client.fetch(url, { params });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  protected onBeforeCreate(entity: Partial<IMeasurementCreate>) {\n    if (!entity.time) {\n      entity.time = new Date();\n    }\n    if (!entity.type) {\n      entity.type = 'c8y_Measurement';\n    }\n    if (entity.sourceId) {\n      const { sourceId } = entity;\n      delete entity.sourceId;\n      if (!entity.source) {\n        entity.source = {\n          id: String(sourceId)\n        };\n      }\n    }\n    return entity;\n  }\n}\n","export enum aggregationType {\n  MINUTELY = 'MINUTELY',\n  HOURLY = 'HOURLY',\n  DAILY = 'DAILY'\n}\n\n/**\n * This interface specifies all fragments which can be used\n * to filter for specific series.\n */\nexport interface ISeriesFilter {\n  /**\n   * The ManagedObject which is the source of these series\n   */\n  source: number | string;\n  /**\n   * From which date the series should be gathered\n   */\n  dateFrom: string | Date;\n  /**\n   * To which date the series should be gathered\n   */\n  dateTo: string | Date;\n  /**\n   * For which aggregation it should filter, see [[aggregationType]]\n   */\n  aggregationType?: aggregationType;\n  /**\n   * The series type and name\n   *\n   * **Example**\n   * ```typescript\n   *\n   * const series: string[] = ['c8y_AccelerationMeasurement.acceleration', '...'];\n   * ```\n   */\n  series?: string | string[];\n}\n","import { IIdentified, Service, IResult, IResultList } from '../core';\nimport { IAlarm } from './IAlarm';\n\n/**\n * This class allows for managing alarms.\n */\nexport class AlarmService extends Service<IAlarm> {\n  protected baseUrl = 'alarm';\n  protected listUrl = 'alarms';\n  protected propertyName = 'alarms';\n  protected channel = '/alarms/*';\n\n  /**\n   * Gets the details of selected alarms.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const alarmId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await alarmService.detail(alarmId);\n   *    })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IIdentified): Promise<IResult<IAlarm>> {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new alarm.\n   *\n   * @param {IAlarm} entity Alarm object with mandantory fragments.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const mandantoryObject: IAlarm = {\n   *    severity: Severity.CRITICAL,\n   *    source: device,\n   *    text: 'I am an Alarm!',\n   *    time: '2018-05-02T10:08:00Z',\n   *    type: 'device-type-here',\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await alarmService.create(mandantoryObject);\n   *  })();\n   * ```\n   */\n  async create(entity: IAlarm): Promise<IResult<IAlarm>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates alarm data.\n   *\n   * @param {Partial<IAlarm>} entity Alarm is partially updatable.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialUpdateObject: Partial<IAlarm> = {\n   *    severity: Severity.MINOR,\n   *    source: device,\n   *    text: 'Changed Alarm!'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await alarmService.update(partialUpdateObject);\n   *  })();\n   * ```\n   */\n  async update(entity: Partial<IAlarm>): Promise<IResult<IAlarm>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of alarms filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying alarms.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     severity: Severity.MAJOR,\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await alarmService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}): Promise<IResultList<IAlarm>> {\n    return super.list(filter);\n  }\n}\n","import { gettext } from '../gettext';\n\n/**\n * A specific alarm can have one of the following states\n */\nexport enum AlarmStatus {\n  ACKNOWLEDGED = gettext('ACKNOWLEDGED'),\n  CLEARED = gettext('CLEARED'),\n  ACTIVE = gettext('ACTIVE')\n}\n","import { IIdentified, Service, IResult, IResultList } from '../core';\nimport { IOperation } from './IOperation';\n\n/**\n * This class allows for managing operations on a device.\n */\nexport class OperationService extends Service<IOperation> {\n  protected baseUrl = 'devicecontrol';\n  protected listUrl = 'operations';\n  protected propertyName = 'operations';\n\n  /**\n   * Gets the details of selected operation.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entitytabs.service.ts.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const operationId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await operationService.detail(operationId);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IIdentified): Promise<IResult<IOperation>> {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new operation.\n   *\n   * @param {IOperation} entity Operation object with mandantory fragments.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const mandantoryObject: IOperation = {\n   *    com_cumulocity_model_WebCamDevice: {\n   *      name: 'take picture',\n   *      parameters: {\n   *         duration: '5s',\n   *         quality: 'HD'\n   *      }\n   *    },\n   *    deviceId: device.id,\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await operationService.create(mandantoryObject);\n   *  })();\n   * ```\n   */\n  async create(entity: IOperation): Promise<IResult<IOperation>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates operation data.\n   *\n   * @param {Partial<IOperation>} entity Operation is partially updatable.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialUpdateObject: Partial<IOperation> = {\n   *    com_cumulocity_model_WebCamDevice: {\n   *      name: 'take picture',\n   *      parameters: {\n   *         duration: '2s',\n   *         quality: 'HD',\n   *         ratio: '16:9'\n   *      }\n   *    },\n   *    deviceId: device.id,\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await operationService.update(partialUpdateObject);\n   *  })();\n   * ```\n   */\n  async update(entity: Partial<IOperation>): Promise<IResult<IOperation>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of operations filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying operations.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await operationService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}): Promise<IResultList<IOperation>> {\n    return super.list(filter);\n  }\n}\n","import { IIdentified, Service, IResult } from '../core';\nimport { IOperationBulk } from './IOperationBulk';\n\n/**\n * This class allows for managing bulk operations.\n */\nexport class OperationBulkService extends Service<IOperationBulk> {\n  protected baseUrl = 'devicecontrol';\n  protected listUrl = 'bulkoperations';\n  protected propertyName = 'bulkOperations';\n\n  /**\n   * Gets the details of selected bulk operation.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const bulkOperationId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await operationBulkService.detail(bulkOperationId);\n   *   })();\n   * ```\n   */\n  async detail(operationOrId: string | number | IIdentified) {\n    return super.detail(operationOrId);\n  }\n\n  /**\n   * Creates a new operation.\n   *\n   * @param {Partial<IOperationBulk>} operation Operation object with mandantory fragments.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const mandantoryObject: Partial<IOperationBulk> = {\n   *    creationRamp: 15,\n   *    groupId: '149044',\n   *    operationPrototype: {\n   *      c8y_Restart: {},\n   *      description: 'Restart device',\n   *      deviceId: device.id,\n   *      status: 'PENDING'\n   *    },\n   *     startDate: '2018-02-15T16:01:00.000Z'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await operationBulkService.create(mandantoryObject);\n   *  })();\n   * ```\n   */\n  async create(operation: Partial<IOperationBulk>) {\n    return super.create(operation);\n  }\n\n  /**\n   * Updates a new operation.\n   *\n   * @param {Partial<IOperationBulk>} operation Operation object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const updateObject: Partial<IOperationBulk> = {\n   *    creationRamp: 15,\n   *    groupId: '149044',\n   *    operationPrototype: {\n   *      c8y_Restart: {},\n   *      description: 'Restart device',\n   *      deviceId: device.id,\n   *      status: 'PENDING'\n   *    },\n   *     startDate: '2018-02-15T16:01:00.000Z'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await operationBulkService.update(updateObject);\n   *  })();\n   * ```\n   */\n  async update(entity: Partial<IOperationBulk>) {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of bulk operations filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying alarms.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await operationBulkService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n\n  /**\n   * Removes an bulk operation with given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {string | number | IIdentified):} operationOrId Operation object or id.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const id: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await operationBulkService.delete(id);\n   *   })();\n   * ```\n   */\n  async delete(operationOrId: string | number | IIdentified): Promise<IResult<null>> {\n    return super.delete(operationOrId);\n  }\n}\n","import { gettext } from '../gettext';\r\n\r\n/**\r\n * A bulk operation can have one of the following states.\r\n */\r\nexport enum OperationBulkStatus {\r\n  ACTIVE = gettext('ACTIVE'),\r\n  IN_PROGRESS = gettext('IN_PROGRESS'),\r\n  COMPLETED = gettext('COMPLETED'),\r\n  DELETED = gettext('DELETED')\r\n}\r\n","import { gettext } from '../gettext';\r\n\r\n/**\r\n * A bulk operation can have one of the following general statuses.\r\n */\r\nexport enum OperationBulkGeneralStatus {\r\n  SCHEDULED = gettext('SCHEDULED'),\r\n  EXECUTING = gettext('EXECUTING'),\r\n  EXECUTING_WITH_ERROR = gettext('EXECUTING_WITH_ERROR'),\r\n  CANCELED = gettext('CANCELED'),\r\n  FAILED = gettext('FAILED'),\r\n  SUCCESSFUL = gettext('SUCCESSFUL'),\r\n  DELETED = gettext('DELETED'),\r\n  INCORRECT = gettext('INCORRECT')\r\n}\r\n","import { gettext } from '../gettext';\n\n/**\n * An Operation can have one of the following states.\n */\nexport enum OperationStatus {\n  PENDING = gettext('PENDING'),\n  EXECUTING = gettext('EXECUTING'),\n  SUCCESSFUL = gettext('SUCCESSFUL'),\n  FAILED = gettext('FAILED')\n}\n","import { Service, IResult, IResultList } from '../core';\nimport { ITenant } from './ITenant';\nimport { ICurrentTenant } from './ICurrentTenant';\nimport { ITfaSettings } from './ITfaSettings';\nimport { IApplication } from '../application';\n\n/**\n * @description\n * This service allows for managing tenants.\n */\nexport class TenantService extends Service<ITenant> {\n  protected baseUrl = 'tenant';\n  protected listUrl = 'tenants';\n  protected currentTenantUrl = 'currentTenant';\n  protected propertyName = 'tenants';\n  protected fetchOptions = {\n    method: 'PUT',\n    body: '{}',\n    headers: { 'content-type': 'application/json', accept: 'application/json' }\n  };\n\n  /**\n   * Get a representation of a tenant.\n   *\n   * @param {string|number|IIdentified} entityOrId Tenant's id or tenant object.\n   *\n   * @returns Returns promise object that is resolved with the IIdentified wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const tenantId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await tenantService.detail(tenantId);\n   *   })();\n   * ```\n   *\n   * Required role: ROLE_TENANT_MANAGEMENT_READ<br><br>\n   * User password is never returned in GET response. Authentication mechanism is provided by another interface.\n   */\n  async detail(entityOrId: string | number | ITenant): Promise<IResult<ITenant>> {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new tenant.\n   *\n   * @param {IIdentified} entity Tenant object.\n   *\n   * @returns {IResult<IIdentified>} Returns promise object that is resolved with the details of newly created tenant.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const tenantObject = {\n   *    id: \"sample_tenant\",\n   *    company: \"sample_company\",\n   *    domain: \"sample_domain.com\",\n   *    contactName: \"Mr. Doe\",\n   *    ...\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await tenantService.create(tenantObject);\n   *  })();\n   * ```\n   *\n   * Required role: ROLE_TENANT_MANAGEMENT_ADMIN or ROLE_TENANT_MANAGEMENT_CREATE<br><br>\n   * Note that creating a tenant with adminName, adminPass and adminEmail, creates an admin user with these settings.\n   * For the tenant id SQL keywords (e.g., select, cross, where) are not allowed.\n   */\n  async create(entity: ITenant): Promise<IResult<ITenant>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates tenant data.\n   *\n   * @param {IIdentified} entity Tenant is partially updatable.\n   *\n   * @returns {IResult<IIdentified>} Returns promise object that is resolved with the saved tenant object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialUpdateObject: IIdentified = {\n   *     adminName : \"newAdmin\"\n   *     ...\n   *   }\n   *\n   *  (async () => {\n   *    const {data, res} = await tenantService.update(partialUpdateObject);\n   *  })();\n   * ```\n   *\n   * Required role: ROLE_TENANT_MANAGEMENT_ADMIN or ROLE_TENANT_MANAGEMENT_UPDATE<br><br>\n   * Note that updating adminPass and adminEmail updates these settings in the admin user of the tenant.\n   * Updating adminName has no effect.\n   */\n  async update(entity: ITenant): Promise<IResult<ITenant>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of tenants filtered by parameters.\n   *\n   * @param {object} filter Object containing filters for querying tenants.\n   *\n   * @returns Returns promise object that is resolved with the IIdentified wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     severity: Severity.MAJOR,\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await tenantService.list(filter);\n   *   })();\n   * ```\n   *\n   * Required role: ROLE_TENANT_MANAGEMENT_READ\n   */\n  async list(filter: object = {}): Promise<IResultList<ITenant>> {\n    return super.list(filter);\n  }\n\n  /**\n   * Delete a representation of a tenant.\n   *\n   * @param {string|number|IIdentified} entityOrId Tenant's id or tenant object.\n   *\n   * @returns Returns promise object that is resolved with the IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const tenantId: string = \"uniqueTenantId\";\n   *\n   *    (async () => {\n   *      const {data, res} = await tenantService.delete(tenantId);\n   *   })();\n   * ```\n   *\n   * Required role: ROLE_TENANT_MANAGEMENT_ADMIN\n   */\n  async delete(entityOrId: string | number | ITenant): Promise<IResult<null>> {\n    return super.delete(entityOrId);\n  }\n\n  async current(): Promise<IResult<ICurrentTenant>> {\n    const headers = { 'content-type': 'application/json' };\n    const res = await this.fetch(this.currentTenantUrl, { headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * enable support user for current tenant.\n   *\n   * @returns Returns promise object that is resolved with the IResult.\n   *\n   * **Example**\n   * ```typescript\n   *    (async () => {\n   *      const {res} = await tenantService.enableSupportUser();\n   *   })();\n   * ```\n   */\n  async enableSupportUser(): Promise<IResult<null>> {\n    const url = 'support-user/enable';\n    const res = await this.fetch(url, this.fetchOptions);\n    return { res, data: null };\n  }\n\n  /**\n   * disable support user for current tenant.\n   *\n   * @returns Returns promise object that is resolved with the IResult.\n   *\n   * **Example**\n   * ```typescript\n   *    (async () => {\n   *      const {res} = await tenantService.disableSupportUser();\n   *   })();\n   * ```\n   */\n  async disableSupportUser(): Promise<IResult<null>> {\n    const url = 'support-user/disable';\n    const res = await this.fetch(url, this.fetchOptions);\n    return { res, data: null };\n  }\n\n  async currentTenantType() {\n    const tenantData = await this.current();\n    if (\n      tenantData.data.customProperties &&\n      tenantData.data.customProperties.tenantType === 'TRIAL'\n    ) {\n      return 'TRIAL';\n    }\n    return 'REGULAR';\n  }\n\n  /**\n   * Returns two factor-authentication settings for given tenant.\n   *\n   * @param tenant The tenant object.\n   *\n   * @returns Promise which resolves with the object with TFA settings.\n   *\n   * **Example**\n   * ```typescript\n   *   (async () => {\n   *     const currentTenant = (await tenantService.current()).data;\n   *     const currentTenantTfaSettings = await tenantService.getTfaSettings(currentTenant);\n   *\n   *     const subtenant = (await tenantService.detail('t12345')).data;\n   *     const subtenantTfaSettings = await tenantService.getTfaSettings(subtenant);\n   *   })();\n   * ```\n   */\n  async getTfaSettings(tenant: ICurrentTenant | ITenant): Promise<ITfaSettings> {\n    const entityOrId: string = this.getIdString(tenant);\n    const url = `tenants/${entityOrId}/tfa`;\n    const res = await this.fetch(url);\n    const tfaSettings = await res.json();\n\n    return tfaSettings;\n  }\n\n  /**\n   * Subscribes a given application to a given tenant.\n   *\n   * @param tenant The tenant object.\n   * @param application The application object.\n   *\n   * @returns Returns promise object that is resolved with the IResult.\n   *\n   * **Example**\n   * ```typescript\n   *     const newApp = {\n   *        name: 'New application',\n   *        type: 'HOSTED',\n   *        key: 'new-app'\n   *     };\n   *\n   *     const application = (await applicationService.create(newApp)).data;\n   *     const currentTenant = (await tenantService.current()).data;\n   *\n   *     const {data, res} = await tenantService.subscribeApplication(currentTenant, application);\n   *   })();\n   * ```\n   */\n  async subscribeApplication(\n    tenant: ICurrentTenant | ITenant,\n    application: IApplication\n  ): Promise<IResult<null>> {\n    const entityOrId: string = this.getIdString(tenant);\n    const applicationId = application.id;\n    const url = `tenants/${entityOrId}/applications`;\n    const method = 'POST';\n    const body = JSON.stringify({\n      application: {\n        id: applicationId,\n        self: application.self\n      }\n    });\n    const headers = { 'content-type': this.mimeType('applicationReference') };\n    const res = await this.fetch(url, this.changeFetchOptions({ method, body, headers }, url));\n    return { res, data: null };\n  }\n\n  /**\n   * Unsubscribes a given application from a given tenant.\n   *\n   * @param tenant The tenant object.\n   * @param application The application object.\n   *\n   * @returns Returns promise object that is resolved with the IResult.\n   *\n   * **Example**\n   * ```typescript\n   *     const newApp = {\n   *        name: 'New application',\n   *        type: 'HOSTED',\n   *        key: 'new-app'\n   *     };\n   *\n   *     const application = (await applicationService.create(newApp)).data;\n   *     const currentTenant = (await tenantService.current()).data;\n   *     await tenantService.addApplication(currentTenant, application);\n   *\n   *     await tenantService.unsubscribeApplication(currentTenant, application);\n   *   })();\n   * ```\n   */\n  async unsubscribeApplication(\n    tenant: ICurrentTenant | ITenant,\n    application: IApplication\n  ): Promise<IResult<null>> {\n    const entityOrId: string = this.getIdString(tenant);\n    const url = `tenants/${entityOrId}/applications/${application.id}`;\n    const method = 'DELETE';\n    const res = await this.fetch(url, this.changeFetchOptions({ method }, url));\n    return { res, data: null };\n  }\n\n  protected getIdString(tenant: ITenant | ICurrentTenant): string {\n    return (tenant as ITenant).id || (tenant as ICurrentTenant).name;\n  }\n\n  protected onBeforeCreate(obj: ITenant): any {\n    return obj;\n  }\n}\n","import { gettext } from '../gettext';\r\n\r\nexport enum TenantStatus {\r\n  ACTIVE = gettext('ACTIVE'),\r\n  SUSPENDED = gettext('SUSPENDED')\r\n}\r\n","/**\n * Represents a strategy used for two-factor authentication.\n */\nexport enum TfaStrategy {\n  /** Two-factor authentication with Time-Based One Time Passwords. */\n  TOTP = 'TOTP',\n  /** Two-factor authentication with codes sent via SMSes. */\n  SMS = 'SMS'\n}\n","import { IFetchClient, IIdentified, Service } from '../core';\nimport { IUserInventoryRole } from './IUserInventoryRole';\n\n/**\n * @description\n * This service allows for managing current user's inventory roles.\n */\nexport class UserInventoryRoleService extends Service<IUserInventoryRole> {\n  protected baseUrl;\n  protected listUrl = `inventory`;\n  protected currenUserUrl = `currentUser`;\n  protected propertyName = 'inventoryAssignments';\n\n  constructor(userUrl: string, client: IFetchClient) {\n    super(client);\n    this.baseUrl = `user/${userUrl}/roles`;\n  }\n\n  /**\n   * Get a representation of a concrete current user's inventory role.\n   *\n   * @param {string|number|IUserInventoryRole} entityOrId inventory role id or inventory role object.\n   *\n   * @returns Returns promise object that is resolved with the IUserInventoryRole wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const inventoryRoleId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await userInventoryRoleService.detail(inventoryRoleId);\n   *   })();\n   * ```\n   *\n   * Required role: ROLE_TENANT_MANAGEMENT_READ<br><br>\n   * User password is never returned in GET response. Authentication mechanism is provided by another interface.\n   */\n  async detail(entityOrId: string | number | IUserInventoryRole) {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Assign inventory role to current user.\n   *\n   * @param {IUserInventoryRole} entity Inventory Role object.\n   *\n   * @returns Returns promise object that is resolved with the details of newly assigned inventory role.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const inventoryRoleObject: IUserInventoryRole = {\n   *    ...\n   *  };\n   *\n   *    (async () => {\n   *      const {data, res} = await userInventoryRoleService.create(inventoryRoleObject);\n   *   })();\n   * ```\n   */\n  async create(entity: IUserInventoryRole) {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates an inventory role.\n   *\n   * @param {Partial<IUserInventoryRole>} entity Inventory Role object.\n   */\n  async update(entity: Partial<IUserInventoryRole>) {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list the inventory roles applied to a current user.\n   *\n   * @param {object} filter Object containing filters for querying inventory roles.\n   *\n   * @returns Returns promise object that is resolved with the IUserInventoryRole wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     severity: Severity.MAJOR,\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await userInventoryRoleService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n\n  /**\n   * Unassign inventory role from current user\n   *\n   * @param {string|number|IIdentified} entityOrId Inventory Role id or Inventory Role object.\n   *\n   * @returns Returns promise object that is resolved with the IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const inventoryRoleId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await userInventoryRoleService.delete(inventoryRoleId);\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | number | IIdentified) {\n    return super.delete(entityOrId);\n  }\n}\n","import { IIdentified, Service, IResult, IFetchOptions } from '../core';\nimport { IUser } from './IUser';\nimport { ICurrentUser } from './ICurrentUser';\nimport { UserInventoryRoleService } from './UserInventoryRoleService';\nimport { IResetPassword } from './IResetPassword';\nimport { ITotp } from './ITotp';\nimport { ITotpStatus } from './ITotpStatus';\n\n/**\n * @description\n * This service allows for managing users.\n */\nexport class UserService extends Service<IUser> {\n  protected get listUrl() {\n    return `${this.client.tenant}/users`;\n  }\n  protected baseUrl = 'user';\n  protected currentUserUrl = 'currentUser';\n  protected passwordResetUrl = 'passwordReset';\n  protected currentUserPhoneUrl = 'currentUserPhone';\n  protected verifyTFACodeUrl = 'pin';\n  protected totpCurrentUserURL = `${this.currentUserUrl}/totpSecret`;\n  protected verifyTOTPCodeUrl = `${this.totpCurrentUserURL}/verify`;\n  protected activateTOTPCodeUrl = `${this.totpCurrentUserURL}/activity`;\n  protected revokeTOTPSecretUrl = 'totpSecret/revoke';\n  protected get newsletterEmailsUrl() {\n    return `${this.client.tenant}/users/newsletterEmails`;\n  }\n  protected get currentUserPasswordUrl() {\n    return `${this.currentUserUrl}/password`;\n  }\n  protected get revokeAllTokensUrl() {\n    return `/logout/${this.client.tenant}/allUsers`;\n  }\n  protected propertyName = 'users';\n\n  /**\n   * Gets the details of given user.\n   *\n   * @param {string | number | IUser} entityOrId User's id or user object.\n   *\n   * @returns Returns promise object that is resolved with the IUser wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const userId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.detail(userId);\n   *   })();\n   * ```\n   * User password is never returned in GET response. Authentication mechanism is provided by another interface.\n   */\n  async detail(entityOrId: string | number | IUser) {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new user.\n   *\n   * @param {IUser} entity User object.\n   *\n   * @returns {IResult<IUser>} Returns promise object that is resolved with the details of newly created user.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const userObject: IUser = {\n   *    userName: \"newUser\",\n   *    password: \"userPassword12!@\"\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await userService.create(userObject);\n   *  })();\n   * ```\n   */\n  async create(entity: IUser) {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates user data.\n   *\n   * @param {Partial<IUser>} entity User is partially updatable.\n   *\n   * @returns {IResult<IUserGroup>} Returns promise object that is resolved with the saved user object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialUpdateObject: Partial<IUser> = {\n   *     \"id\" : \"myuser\",\n   *     \"userName\" : \"newUserName\",\n   *     \"email\": \"newUserEmail@example.com\"\n   *     ...\n   *   }\n   *\n   *  (async () => {\n   *    const {data, res} = await userService.update(partialUpdateObject);\n   *  })();\n   * ```\n   * When user is updated with changed permissions or groups, suitable audit record is created with type\n   * 'User' and activity 'User updated'.\n   */\n  async update(entity: Partial<IUser>) {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of users filtered by parameters.\n   *\n   * @param {object} filter Object containing filters for querying users.\n   *\n   * @returns Returns promise object that is resolved with the IUser wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await userService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n\n  /**\n   * Removes user.\n   *\n   * @param {number|IIdentified} entityOrId User's id or user object.\n   *\n   * @returns Returns promise object that is resolved with the IResult of null.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const userId: string = \"uniqueUserId\";\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.delete(userGroupId);\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | number | IIdentified) {\n    return super.delete(entityOrId);\n  }\n\n  /**\n   * Create instance of User Inventory Role Service related with given User.\n   *\n   * @param {string|number|IUser} entityOrId User's id or user object.\n   *\n   * @returns Returns UserInventoryRoleService object that is related with given User.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const userId: string = \"uniqueUserId\";\n   *\n   *    const userInventoryRoleService = userService.inventoryAssignment(userGroupId);\n   *    (async () => {\n   *      const {data, res} = await userInventoryRoleService.create(...);\n   *   })();\n   * ```\n   */\n  inventoryAssignment(entityOrId: string | number | IUser) {\n    return new UserInventoryRoleService(this.getDetailUrl(entityOrId), this.client);\n  }\n\n  /**\n   * Gets user that is currently logged in.\n   *\n   * @returns Returns promise object that is resolved with the IUser wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.current();\n   *   })();\n   * ```\n   */\n  async current(): Promise<IResult<IUser>> {\n    const headers = {\n      'content-type': 'application/json',\n      Accept: 'application/vnd.com.nsn.cumulocity.user+json;'\n    };\n    const res = await this.fetch(this.currentUserUrl, { headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Gets user that is currently logged in with the list of all roles assigned.\n   *\n   * @returns Returns promise object that is resolved with the ICurrenUser wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.currentWithEffectiveRoles();\n   *   })();\n   * ```\n   */\n  async currentWithEffectiveRoles(): Promise<IResult<ICurrentUser>> {\n    const headers = {\n      'content-type': 'application/json',\n      Accept: 'application/vnd.com.nsn.cumulocity.currentUser+json;'\n    };\n    const res = await this.fetch(this.currentUserUrl, { headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Updates the current user\n   *\n   * @param {IUser} user The user object with the properties to be updated\n   *\n   * @return Returns promise object resolved with the IUser wrapped by IResult\n   */\n  async updateCurrent(user: IUser): Promise<IResult<IUser>> {\n    const mimeType = 'application/vnd.com.nsn.cumulocity.user+json';\n    const headers = { 'content-type': mimeType, Accept: mimeType };\n    const body = JSON.stringify(this.onBeforeUpdate(user));\n    const res = await this.fetch(this.currentUserUrl, { headers, body, method: 'PUT' });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Sends an email message with a link allowing user to reset their password.\n   *\n   * @param {string} email The email address to send the message to.\n   * @param {string} tenantId The id of user's tenant (if cannot be inferred from URL).\n   *\n   * @returns Returns a request result object.\n   *\n   * **Example**\n   * ```typescript\n   *   const email = 'user@example.com';\n   *   const tenantId = 't123456';\n   *\n   *   (async () => {\n   *     const { res, data } = await userService.sendPasswordResetMail(email, tenantId);\n   *   })();\n   * ```\n   */\n  async sendPasswordResetMail(email: string, tenantId?: string): Promise<IResult<null>> {\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const method = 'POST';\n    const url = this.passwordResetUrl;\n    const params = tenantId ? { tenantId } : {};\n    const body = JSON.stringify({ email });\n    const res = await this.fetch(url, { headers, method, params, body });\n    return { res, data: null };\n  }\n\n  /**\n   * Resets user's password to a new one.\n   *\n   * @param {IResetPassword} newPassword Object with token, user's email, new password and its strength indicator.\n   * @param {string} tenantId The id of user's tenant (if cannot be inferred from URL).\n   *\n   * @returns Returns a request result object.\n   *\n   * **Example**\n   * ```typescript\n   *   const newPassword: IResetPassword = {\n   *     token: '123123ASDAWERER@#!WEDS$@#!WADA#A#EA#EA#EA',\n   *     email: 'user@example.com',\n   *     newPassword: 'myNewPassword',\n   *     passwordStrength: PasswordStrength.GREEN\n   *   };\n   *   const tenantId = 't123456';\n   *\n   *   (async () => {\n   *     const { res, data } = await userService.resetPassword(newPassword, tenantId);\n   *   })();\n   * ```\n   */\n  async resetPassword(newPassword: IResetPassword, tenantId?: string): Promise<IResult<null>> {\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const method = 'PUT';\n    const url = this.passwordResetUrl;\n    const params = tenantId ? { tenantId } : {};\n    const body = JSON.stringify(newPassword);\n    const res = await this.fetch(url, { headers, method, params, body });\n    return { res, data: null };\n  }\n\n  /**\n   * Verifies TFA code which is sent via SMS. If invoked with string '0', new TFA code will be sent.\n   *\n   * @param {string} pin The code to verify.\n   *\n   * @returns Returns a status object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.verifyTFACode('123123');\n   *   })();\n   * ```\n   */\n  async verifyTFACode(pin: string): Promise<IResult<null>> {\n    const method = 'POST';\n    const body = JSON.stringify({ pin });\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const res = await this.fetch(this.verifyTFACodeUrl, { headers, body, method });\n    return { res, data: null };\n  }\n\n  /**\n   * Verifies TFA code which is generated by a TOTP app.\n   *\n   * @param {string} code The code to verify.\n   *\n   * @returns Returns a status object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.verifyTotpCode('123123');\n   *   })();\n   * ```\n   */\n  async verifyTotpCode(code): Promise<IResult<null>> {\n    const method = 'POST';\n    const headers = { 'content-type': 'application/json' };\n    const body = JSON.stringify({ code });\n    const res = await this.fetch(this.verifyTOTPCodeUrl, { headers, body, method });\n    return { res, data: null };\n  }\n\n  /**\n   * Verifies TFA code which is generated by a TOTP app.\n   *\n   * @returns Returns a status object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.activateTotp();\n   *   })();\n   * ```\n   */\n  async activateTotp(): Promise<IResult<null>> {\n    const method = 'POST';\n    const headers = { 'content-type': 'application/json' };\n    const body = JSON.stringify({ isActive: true });\n    const res = await this.fetch(this.activateTOTPCodeUrl, { headers, body, method });\n    return { res, data: null };\n  }\n\n  /**\n   * Checks if TOTP is activated and enforced.\n   *\n   * @returns Returns an object of ITotpStatus if it is active.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.getActivityTotp();\n   *      console.log(data.isActive);\n   *   })();\n   * ```\n   */\n  async getActivityTotp(): Promise<IResult<ITotpStatus>> {\n    const method = 'GET';\n    const headers = { 'content-type': 'application/json' };\n    const res = await this.fetch(this.activateTOTPCodeUrl, { headers, method });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Generates a secret which can be used to setup two-factor authentication with TOTP.\n   *\n   * @returns Returns the secret and an URL to a QR Code.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    (async () => {\n   *      const {data, res} = await userService.generateTotpSecret();\n   *      console.log(secret);\n   *   })();\n   * ```\n   */\n  async generateTotpSecret(): Promise<IResult<ITotp>> {\n    const method = 'POST';\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const res = await this.fetch(this.totpCurrentUserURL, { headers, method });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Revokes a specific user's TOTP secret.\n   *\n   * @param {IUser} user User whose TOTP secret to revoke.\n   *\n   * @returns Status object\n   */\n  async totpRevokeSecret(user: IUser): Promise<IResult<null>> {\n    const url = `${this.getDetailUrl(user)}/${this.revokeTOTPSecretUrl}`;\n    const method = 'DELETE';\n    const headers = { accept: 'application/json' };\n    const res = await this.fetch(url, { headers, method });\n    return { res, data: null };\n  }\n\n  /**\n   * Saves phone number for the current user.\n   * @param phoneNumber Phone number to save.\n   * @returns Server response and data with updated current user object.\n   */\n  async savePhoneNumber(phoneNumber: string): Promise<IResult<ICurrentUser>> {\n    const url = this.currentUserPhoneUrl;\n    const options: IFetchOptions = {\n      method: 'PUT',\n      headers: { 'content-type': 'application/json', accept: 'application/json' },\n      body: JSON.stringify({\n        phone: phoneNumber\n      })\n    };\n    const res = await this.fetch(url, options);\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Gets the list of emails of users subscribed for newsletter\n   * on the current tenant and its subtenants.\n   * @returns Server response and data with email addresses as plain text.\n   */\n  async getNewsletterEmails(): Promise<IResult<string>> {\n    const url = this.newsletterEmailsUrl;\n    const options: IFetchOptions = {\n      method: 'GET',\n      headers: { accept: 'text/plain' }\n    };\n    const res = await this.fetch(url, options);\n    const data = await res.text();\n    return { res, data };\n  }\n\n  /**\n   * Changes password for user.\n   *\n   * @param {string | number | IUser} entityOrId User's id or user object.\n   * @param {string} newPassword New user password.\n   * @param {string} currentUserPassword The password of the currently logged user.\n   *\n   * @returns Returns a result object.\n   */\n  async changeUserPassword(\n    entityOrId: string | number | IUser,\n    newPassword: string,\n    currentUserPassword: string\n  ): Promise<IResult<null>> {\n    const method = 'PUT';\n    const headers = { 'content-type': 'application/json' };\n    const body = JSON.stringify({ newPassword, currentUserPassword });\n    const res = await this.fetch(this.changeUserPasswordUrl(entityOrId), { headers, body, method });\n    return { res, data: null };\n  }\n\n  /**\n   * Changes password for current user.\n   *\n   * @param {string} newPassword New password for current user.\n   * @param {string} currentUserPassword The password of the currently logged user.\n   *\n   * @returns Returns a result object. During this action if preferred login mode is OAI_SECURE new jwt cookie will be set.\n   */\n  async changeCurrentUserPassword(\n    newPassword: string,\n    currentUserPassword: string\n  ): Promise<IResult<null>> {\n    const method = 'PUT';\n    const headers = { 'content-type': 'application/json' };\n    const body = JSON.stringify({ newPassword, currentUserPassword });\n    const res = await this.fetch(this.currentUserPasswordUrl, { headers, body, method });\n    return { res, data: null };\n  }\n\n  /**\n   * Revoke tokens for all users. All users logged with \"OAI-Secure\" or \"Single sign-on redirect\" will be logged out.\n   *\n   * @returns Returns a result object.\n   */\n  async revokeTokens(): Promise<IResult<null>> {\n    const method = 'POST';\n    const headers = { 'content-type': 'application/json' };\n    const res = await this.fetch(this.revokeAllTokensUrl, { headers, method });\n    return { res, data: null };\n  }\n\n  hasRole(user: IUser, roleId: string): boolean {\n    return this.hasRoleInUser(user, roleId) || this.hasRoleInGroups(user, roleId);\n  }\n\n  hasAllRoles(user: IUser, roleIds: string[]): boolean {\n    return roleIds.every(roleId => this.hasRole(user, roleId));\n  }\n\n  hasAnyRole(user: IUser, roleIds: string[]): boolean {\n    return roleIds.some(roleId => this.hasRole(user, roleId));\n  }\n\n  hasAnyGlobalRole(user: IUser, globalRoleIds: number[]): boolean {\n    return globalRoleIds.some(globalRoleId => this.hasGlobalRoleInUser(user, globalRoleId));\n  }\n\n  isDeviceUser(user: IUser) {\n    return user.id.match(/^device_/);\n  }\n\n  protected onBeforeUpdate(user: IUser): any {\n    const obj = Object.assign({}, user);\n    delete obj.id;\n    delete obj.userName;\n    return obj;\n  }\n\n  protected getDetailUrl(entityOrId: string | number | IUser): string {\n    return `${this.listUrl}/${encodeURIComponent(this.getId(entityOrId))}`;\n  }\n\n  protected getId(entityOrId: string | number | IUser): string {\n    let id: string | number;\n    if (typeof entityOrId === 'object' && entityOrId.id) {\n      id = entityOrId.id;\n    } else if (typeof entityOrId === 'object' && entityOrId.userName) {\n      id = entityOrId.userName;\n    } else {\n      id = entityOrId as string | number;\n    }\n    return String(id);\n  }\n\n  protected hasRoleInUser(user, roleId) {\n    const effectiveRoles = user.effectiveRoles || [];\n    return (\n      this.hasRoleInReferences((user && user.roles && user.roles.references) || [], roleId) ||\n      effectiveRoles.some(({ id }) => roleId === id)\n    );\n  }\n\n  protected hasRoleInGroups(user, roleId) {\n    const groupReferences = (user && user.groups && user.groups.references) || [];\n    return groupReferences.some(groupRef =>\n      this.hasRoleInReferences(groupRef.group.roles.references, roleId)\n    );\n  }\n\n  protected hasRoleInReferences(references, roleId) {\n    return references.some(ref => ref.role.id === roleId);\n  }\n\n  protected changeUserPasswordUrl(entityOrId: string | number | IUser) {\n    return `${this.client.tenant}/users/${this.getId(entityOrId)}/password`;\n  }\n\n  protected hasGlobalRoleInUser(user: IUser, globalRoleId: number) {\n    const groupReferencesIds = (user?.groups?.references || []).map(gR => gR?.group?.id);\n    return groupReferencesIds.some(id => id === globalRoleId);\n  }\n}\n","export enum PasswordStrength {\n  GREEN = 'GREEN',\n  RED = 'RED',\n  YELLOW = 'YELLOW'\n}\n","import { IFetchClient, Service, IResult, IFetchResponse } from '../core';\nimport { IApplication } from './IApplication';\nimport { IApplicationBinary } from './IApplicationBinary';\nimport { Stream } from 'stream';\nimport FormData from 'form-data';\nimport { IUploadParamsOverride } from './IUploadParamsOverride';\n\nexport class ApplicationBinaryService extends Service<IApplicationBinary> {\n  protected baseUrl;\n  protected listUrl = 'binaries';\n  protected propertyName = 'attachments';\n\n  constructor(client: IFetchClient, applicationOrId: string | number | IApplication) {\n    super(client);\n    this.baseUrl = `application/applications/${this.getIdString(applicationOrId)}`;\n  }\n\n  async upload(\n    binary: ArrayBuffer | Stream | Buffer | File | Blob,\n    fileName?: string,\n    uploadParamsOverride?: IUploadParamsOverride\n  ): Promise<IResult<IApplicationBinary>> {\n    const url = uploadParamsOverride?.listUrl || this.listUrl;\n    const method = 'POST';\n    const body = this.createBinaryRequestBody(binary, fileName, uploadParamsOverride);\n    let bodyHeaders;\n    if (typeof body.getHeaders === 'function') {\n      bodyHeaders = body.getHeaders();\n    }\n    const headers = Object.assign(\n      uploadParamsOverride?.headers || {\n        Accept: 'application/json'\n      },\n      bodyHeaders\n    );\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  uploadWithProgressXhr(\n    binary: ArrayBuffer | Stream | Buffer | File | Blob,\n    onProgress,\n    fileName?: string,\n    uploadParamsOverride?: IUploadParamsOverride\n  ): XMLHttpRequest {\n    const url = `/${this.baseUrl}/${uploadParamsOverride?.listUrl || this.listUrl}`;\n    const method = 'POST';\n    const body = this.createBinaryRequestBody(binary, fileName, uploadParamsOverride);\n    let bodyHeaders;\n    if (typeof body.getHeaders === 'function') {\n      bodyHeaders = body.getHeaders();\n    }\n    const headers = this.client.getFetchOptions().headers;\n    Object.assign(\n      headers,\n      uploadParamsOverride?.headers || {\n        Accept: 'application/json'\n      }\n    );\n    Object.assign(headers, bodyHeaders);\n    const xhr = new XMLHttpRequest();\n    xhr.open(method, url, true);\n    for (const key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n\n    xhr.upload.addEventListener('progress', onProgress);\n\n    let xhrBody: XMLHttpRequestBodyInit;\n    if (typeof body.getBuffer === 'function') {\n      xhrBody = body.getBuffer();\n    } else {\n      xhrBody = body as any;\n    }\n    xhr.send(xhrBody);\n    return xhr;\n  }\n\n  getXMLHttpResponse(xhr): Promise<IApplication> {\n    return new Promise((res, rej) => {\n      xhr.addEventListener('loadend', () => {\n        xhr.readyState === 4 && (xhr.status === 200 || xhr.status === 201)\n          ? res(JSON.parse(xhr.responseText))\n          : rej(\n              xhr.responseText ? { data: JSON.parse(xhr.responseText) } : 'Could not upload file.'\n            );\n      });\n    });\n  }\n\n  async list(filter?) {\n    return super.list(filter);\n  }\n\n  async delete(binaryOrId: string | number | IApplicationBinary) {\n    return super.delete(binaryOrId);\n  }\n\n  async listPlugins() {\n    const headers = { accept: 'application/json' };\n    const url = `${this.listUrl}/plugins`;\n    const res = await this.fetch(url, { headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  async addPlugin(pluginName: string, pluginFile: Stream | Buffer | ArrayBuffer) {\n    const url = `${this.listUrl}/plugins/${encodeURIComponent(pluginName)}`;\n    const method = 'POST';\n    const body = new FormData();\n    const bufferOrStream = pluginFile instanceof ArrayBuffer ? Buffer.from(pluginFile) : pluginFile;\n    body.append('file', bufferOrStream);\n\n    const headers = {\n      accept: 'application/json'\n    };\n\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  async removePlugin(pluginName: string) {\n    const method = 'DELETE';\n    const headers = { accept: 'application/json' };\n    const url = `${this.listUrl}/plugins/${pluginName}`;\n    const res = await this.fetch(url, { method, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  async updateFiles(files: Array<{ path: string; contents: Stream | Buffer | ArrayBuffer }>) {\n    const url = `${this.listUrl}/files`;\n    const method = 'POST';\n    const body = new FormData();\n    files.forEach(file => {\n      const bufferOrStream =\n        file.contents instanceof ArrayBuffer ? Buffer.from(file.contents) : file.contents;\n      body.append(file.path, bufferOrStream);\n    });\n    const headers = {\n      accept: 'application/json'\n    };\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  async downloadArchive(binaryId: number | string): Promise<IFetchResponse> {\n    const url = `${this.listUrl}/${binaryId}`;\n    return await this.fetch(url);\n  }\n\n  private createBinaryRequestBody(\n    binary: ArrayBuffer | Stream | Buffer | File | Blob,\n    fileName?: string,\n    uploadParamsOverride?: IUploadParamsOverride\n  ) {\n    const body = new FormData();\n    const bufferOrStream = binary instanceof ArrayBuffer ? Buffer.from(binary) : binary;\n    let uploadFileName = fileName;\n    if (typeof File !== 'undefined' && binary instanceof File) {\n      uploadFileName = binary.name;\n    }\n    body.append(uploadParamsOverride?.bodyFileProperty || 'file', bufferOrStream, uploadFileName);\n    body.append('fileName', uploadFileName);\n    if (uploadParamsOverride?.requestBody) {\n      for (const key in uploadParamsOverride.requestBody) {\n        if (uploadParamsOverride.requestBody.hasOwnProperty(key)) {\n          body.append(key, JSON.stringify(uploadParamsOverride.requestBody[key]));\n        }\n      }\n    }\n    return body;\n  }\n}\n","export enum ApplicationType {\n  EXTERNAL = 'EXTERNAL',\n  HOSTED = 'HOSTED',\n  MICROSERVICE = 'MICROSERVICE',\n  FEATURE = 'FEATURE'\n}\n","import {\n  IApplicationInstanceLog,\n  IApplicationInstanceLogRequestParams,\n  IApplicationManagedObject\n} from './IApplicationInstanceDetails';\nimport { IFetchResponse, IResult, IResultList, Service } from '../core';\nimport { InventoryService } from '../inventory';\nimport { ITenant, TenantService } from '../tenant';\nimport { IUser, UserService } from '../user';\nimport { ApplicationBinaryService } from './ApplicationBinaryService';\nimport { ApplicationType } from './ApplicationType';\nimport { IApplication } from './IApplication';\nimport { gettext } from '../gettext';\nimport { IApplicationVersionDeleteParams, IApplicationVersion } from './IApplicationVersion';\nimport { IManifest } from './IManifest';\nimport { ApplicationAvailability } from './ApplicationAvailability';\n\nexport class ApplicationService extends Service<IApplication> {\n  protected baseUrl = 'application';\n  protected listUrl = 'applications';\n  protected propertyName = 'applications';\n  protected channel = '/applications/*';\n\n  /**\n   * Creates a new application.\n   *\n   * @param {IIdentified} entity Application object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const newApp = {\n   *    name: 'New application',\n   *    type: 'EXTERNAL',\n   *    key: 'new-app'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await applicationService.create(newApp);\n   *  })();\n   * ```\n   */\n  async create(entity: IApplication): Promise<IResult<IApplication>> {\n    return super.create(entity);\n  }\n\n  async clone(entity: IApplication): Promise<IResult<IApplication>> {\n    const url = `${this.getDetailUrl(entity)}/clone`;\n    const method = 'POST';\n    const body = '';\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Gets the list of existing applications filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying applications.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await applicationService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}): Promise<IResultList<IApplication>> {\n    return super.list(filter);\n  }\n\n  /**\n   * Gets the list of all application versions.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.\n   *\n   * @param {object} params Additional request parameters.\n   *\n   * @returns Returns list of all application versions.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const applicationId: number = 1;\n   *\n   *    (async () => {\n   *      const {res, data} = await applicationService.listVersions(applicationId);\n   *   })();\n   * ```\n   */\n  async listVersions(\n    entityOrId: string | number | IApplication,\n    params: object = {}\n  ): Promise<IResultList<IApplicationVersion>> {\n    const id = this.getEntityId(entityOrId);\n    const url = `${this.listUrl}/${id}/versions`;\n    const headers = { 'content-type': 'application/json' };\n    try {\n      const res = await this.fetch(url, { headers, params });\n      const data = (await res.json())?.applicationVersions;\n      return { res, data };\n    } catch (ex) {\n      if (ex.res.status === 404) {\n        const { data: appDetail, res } = await this.detail(entityOrId);\n        return { res, data: appDetail.applicationVersions };\n      }\n      throw ex;\n    }\n  }\n\n  /**\n   * Gets the details of selected application.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const applicationId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await applicationService.detail(applicationId);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IApplication): Promise<IResult<IApplication>> {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Updates existing application.\n   * Make sure that you specifiy the application id within the update object.\n   *\n   * @param {IIdentified} entity Application object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const updateApp = {\n   *    id: 38\n   *    name: 'Updated application'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await applicationService.update(updateApp);\n   *  })();\n   * ```\n   */\n  async update(entity: IApplication): Promise<IResult<IApplication>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Removes an application with given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {string | number | IIdentified} entityOrId entity or id of the application.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const removeApp: object = {\n   *     id: 38\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res} = await applicationService.delete(removeApp);\n   *     // data will be null\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | number | IApplication): Promise<IResult<null>> {\n    return super.delete(entityOrId);\n  }\n\n  async listByName(name: string): Promise<IResultList<IApplication>> {\n    const headers = { 'content-type': 'application/json' };\n    const url = `applicationsByName/${encodeURIComponent(name)}`;\n    const res = await this.fetch(url, { headers });\n    const json = await res.json();\n    const data = json[this.propertyName];\n    return { res, data };\n  }\n\n  async listByTenant(\n    tenantOrName?: string | ITenant,\n    params: object = {}\n  ): Promise<IResultList<IApplication>> {\n    const headers = { 'content-type': 'application/json' };\n    const tenantService = new TenantService(this.client);\n    const tenantName = this.getIdString(tenantOrName || (await tenantService.current()).data.name);\n    const url = `applicationsByTenant/${encodeURIComponent(tenantName)}`;\n    const res = await this.fetch(url, { headers, params });\n    const json = await res.json();\n    const data = json[this.propertyName];\n    return { res, data };\n  }\n\n  async listByOwner(\n    tenantOrName?: string | ITenant,\n    params: object = {}\n  ): Promise<IResultList<IApplication>> {\n    const headers = { 'content-type': 'application/json' };\n    const tenantService = new TenantService(this.client);\n    const tenantName = this.getIdString(tenantOrName || (await tenantService.current()).data.name);\n    const url = `applicationsByOwner/${encodeURIComponent(tenantName)}`;\n    const res = await this.fetch(url, { headers, params });\n    const json = await res.json();\n    const data = json[this.propertyName];\n    return { res, data };\n  }\n\n  async listByUser(\n    userOrId?: string | number | IUser,\n    params: object = {}\n  ): Promise<IResultList<IApplication>> {\n    const headers = { 'content-type': 'application/json' };\n    const userService = new UserService(this.client);\n    const userId = this.getIdString(userOrId || (await userService.current()).data);\n    const url = `applicationsByUser/${encodeURIComponent(userId)}`;\n    const res = await this.fetch(url, { headers, params });\n    const json = await res.json();\n    const data = json[this.propertyName];\n    return { res, data };\n  }\n\n  async reactivateArchive(appId: number | string): Promise<IResult<null>> {\n    const url = `${this.listUrl}/${appId}/refresh`;\n    const method = 'POST';\n    const body = '';\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const res = await this.fetch(url, { method, body, headers });\n    return { res, data: null };\n  }\n\n  binary(application: string | number | IApplication): ApplicationBinaryService {\n    return new ApplicationBinaryService(this.client, application);\n  }\n\n  getHref(application: IApplication): string {\n    if (application.type === ApplicationType.EXTERNAL) {\n      return application.externalUrl;\n    }\n    return `/apps/${application.public ? 'public/' : ''}${application.contextPath}`;\n  }\n\n  /**\n   * Checks if current user can access specified application.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {string | IApplication} application Application name or contextPath as a\n   * string or Application object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const checkApp: object = {\n   *    name: 'myApplication'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await applicationService.isAvailable(checkApp);\n   *  })();\n   * ```\n   */\n  async isAvailable(application: string | Partial<IApplication>): Promise<IResult<boolean>> {\n    const { res, data } = await this.listByUser(undefined, {\n      dropOverwrittenApps: true,\n      noPaging: true\n    });\n\n    const available: boolean = (data || []).some((availableApp: IApplication) =>\n      typeof application === 'string'\n        ? availableApp.name === application || availableApp.contextPath === application\n        : this.isMatch(availableApp, application)\n    );\n\n    return { data: available, res };\n  }\n\n  /**\n   * Gets instance details of the specified application (microservice).\n   *\n   * @param {string|number|IApplication} entityOrId Entity or Id of the application.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const applicationId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await applicationService.getStatusDetails(applicationId);\n   *   })();\n   * ```\n   */\n  async getStatusDetails(\n    entityOrId: string | number | IApplication\n  ): Promise<IResultList<IApplicationManagedObject>> {\n    const appId = this.getEntityId(entityOrId);\n    const inventory = new InventoryService(this.client, this.realtime);\n    return inventory.list({ type: `c8y_Application_${appId}` });\n  }\n\n  /**\n   * Extracts instance names of the provided IApplicationManagedObject.\n   *\n   * @param {IApplicationManagedObject} appStatusDetails Application details managedObject.\n   *\n   * @returns instance names\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const applicationId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await applicationService.getStatusDetails(applicationId);\n   *      const instances = data.map((appMO) => applicationService.getInstanceNames(appMO));\n   *   })();\n   * ```\n   */\n  getInstanceNames(appStatusDetails: IApplicationManagedObject): string[] {\n    let instanceNames = new Array<string>();\n    if (appStatusDetails && appStatusDetails.c8y_Status && appStatusDetails.c8y_Status.instances) {\n      instanceNames = Object.keys(appStatusDetails.c8y_Status.instances);\n    }\n    return instanceNames;\n  }\n\n  /**\n   * Get log for a specific application instance.\n   *\n   * @param {string|number|IApplication} entityOrId Entity or Id of the application.\n   *\n   * @param {string} instanceName instance name of the application.\n   *\n   * @param {IApplicationInstanceLogRequestParams} params Object containing parameters for querying the log file.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const applicationId: number = 1;\n   *    const applicationInstanceName: string = 'apama-ctrl-1c-4g-scope-t123456789-deployment-abcdefghij-abcde';\n   *\n   *    (async () => {\n   *      const {data, res} = await applicationService.getInstanceLog(applicationId, applicationInstanceName);\n   *   })();\n   * ```\n   */\n  async getInstanceLog(\n    entityOrId: string | number | IApplication,\n    instanceName: string,\n    params?: IApplicationInstanceLogRequestParams\n  ): Promise<IResult<IApplicationInstanceLog>> {\n    const url = `${this.getDetailUrl(entityOrId)}/logs/${instanceName}`;\n    const headers = { accept: this.mimeType('applicationLogs') };\n    const res = await this.fetch(url, { headers, params });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Dynamic options are stored on the API in a specific `config: {}` object. They can\n   * be used to configure the app dynamically.\n   *\n   * Note: To avoids conflicts with the default Config, it is recommended\n   * to use a certain namespace.\n   * @param entityOrId Entity or Id of the application.\n   * @param config Configuration to be updated.\n   * @returns Returns updated configuration.\n   */\n  async updateApplicationConfig<T>(\n    entityOrId: string | number | IApplication,\n    config: T\n  ): Promise<IApplication & { config: T }> {\n    const id = this.getEntityId(entityOrId);\n    const { data: app } = await this.detail(id);\n    const currentConfig = app?.config || {};\n    const newConfig = { ...currentConfig, ...config };\n    const updatedConfigApp = await this.update({\n      id,\n      config: newConfig\n    });\n    return (await updatedConfigApp)?.data as any;\n  }\n\n  /**\n   * Gets manifest (cumulocity.json file) of a given application.\n   *\n   * @param {IApplication} app Application entity.\n   *\n   * @param {string} app version\n   *\n   * @returns Application manifest object.\n   */\n  async getAppManifest(app: IApplication, version?: string): Promise<IManifest> {\n    const date = new Date();\n    let result: IFetchResponse;\n    if (!version) {\n      result = await this.client.fetch(\n        `/apps/${app.contextPath}/cumulocity.json?nocache=${date.getTime()}`\n      );\n    } else {\n      result = await this.client.fetch(\n        `/apps/${app.contextPath}@${version}/cumulocity.json?nocache=${date.getTime()}`\n      );\n    }\n    if (result.status >= 400) {\n      throw new Error(gettext('No Cumulocity IoT manifest found.'));\n    }\n    const c8yJson = await result.json();\n    return c8yJson;\n  }\n\n  /**\n   * Updates manifest (cumulocity.json file) of a given application.\n   *\n   * @param {string|number|IApplication} entityOrId Entity or Id of the application.\n   *\n   * @param {any} manifestJSON Application manifest object to be stored.\n   *\n   * @returns Application manifest object.\n   */\n  async storeAppManifest(entityOrId: string | number | IApplication, manifestJSON: any) {\n    return await this.binary(entityOrId).updateFiles([\n      { path: 'cumulocity.json', contents: JSON.stringify(manifestJSON) as any }\n    ]);\n  }\n\n  /**\n   * Sets tags for specific application package version.\n   *\n   * @param {IApplication} app Application entity.\n   *\n   * @param {string} version Application package version which tags will be set.\n   *\n   * @param {string[]} tags Tags array to set on package version\n   *\n   * @returns Application version object.\n   */\n  async setPackageVersionTag(app: IApplication, version: string, tags: string[]) {\n    const url = `${this.getDetailUrl(app)}/versions/${version}`;\n    const method = 'PUT';\n    const body = JSON.stringify({ tags });\n    const headers = {\n      accept: 'application/vnd.com.nsn.cumulocity.applicationVersion+json;charset=UTF-8;ver=0.9',\n      'content-type': 'application/json'\n    };\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Retrieves the manifest of the application behind the given context path.\n   * @param contextPath\n   */\n  async getManifestOfContextPath(contextPath: string): Promise<IResult<Partial<IApplication>>> {\n    const url = `${this.getDetailUrl(contextPath)}/manifest`;\n    const res = await this.fetch(url);\n    const { application } = await res.json();\n    return {\n      res,\n      data: application\n    };\n  }\n\n  /**\n   * Removes package version.\n   *\n   * @param {IApplication} app Application entity.\n   *\n   * @param {IApplicationVersionDeleteParams} params Version or tag indication package to remove.\n   *\n   * @returns Request response.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const { res } = await applicationService.deleteVersionPackage(app, {version: '1.0.0'});\n   *\n   *    const { res } = await applicationService.deleteVersionPackage(app, {tag: 'next'});\n   *\n   * ```\n   */\n  async deleteVersionPackage(app: IApplication, params: IApplicationVersionDeleteParams) {\n    const url = `${this.getDetailUrl(app)}/versions/`;\n    const method = 'DELETE';\n    const res = await this.fetch(url, this.changeFetchOptions({ method, params }, url));\n    return { res, data: null };\n  }\n\n  /**\n   * Updates the availability of the given application to the provided value.\n   *\n   * @param {string|number|IApplication} entityOrId Entity or Id of the application.\n   *\n   * @param {any} availability The new application availability.\n   *\n   * @returns Updated application.\n   */\n  async updateApplicationAvailability(\n    entityOrId: string | number | IApplication,\n    availability: ApplicationAvailability\n  ): Promise<IResult<IApplication>> {\n    const id = this.getEntityId(entityOrId);\n    return await this.update({\n      id,\n      availability\n    });\n  }\n\n  private isMatch(object, source): boolean {\n    return Object.keys(source).every(key => {\n      if (Array.isArray(object[key]) && Array.isArray(source[key])) {\n        return source[key].every(el => object[key].includes(el));\n      } else if (\n        typeof object[key] === 'object' &&\n        object[key] !== null &&\n        typeof source[key] === 'object' &&\n        source[key] !== null\n      ) {\n        return this.isMatch(object[key], source[key]);\n      } else {\n        return object[key] === source[key];\n      }\n    });\n  }\n}\n","import { IManagedObject } from '../inventory';\n\nexport enum InstanceStatus {\n  Up = 'Up',\n  Unhealthy = 'Unhealthy',\n  Down = 'Down',\n  Unknown = 'Unknown'\n}\n\nexport interface ILastUpdated {\n  date: {\n    $date: string;\n  };\n  offset: number;\n  [key: string]: any;\n}\n\nexport interface IInstanceDetails {\n  lastUpdated: ILastUpdated;\n  memoryInBytes: number;\n  scheduled: boolean;\n  restarts: number;\n  cpuInMillis: number;\n  [key: string]: any;\n}\n\nexport interface IApplicationStatus {\n  lastUpdated: ILastUpdated;\n  instances: {\n    [instanceName: string]: IInstanceDetails;\n  };\n  details: {\n    desired: number;\n    aggregatedResources: {\n      memory: string;\n      cpu: string;\n    };\n    active: number;\n    restarts: number;\n  };\n  status: InstanceStatus;\n  [key: string]: any;\n}\n\nexport interface IApplicationManagedObjectAdditions {\n  c8y_Status?: IApplicationStatus;\n  applicationOwner?: string;\n  c8y_Subscriptions?: {\n    [tenantId: string]: IApplicationStatus;\n  };\n  applicationId?: string;\n  name?: string;\n  c8y_SupportedLogs?: string[];\n  [key: string]: any;\n}\n\nexport type IApplicationManagedObject = IManagedObject & IApplicationManagedObjectAdditions;\n\nexport interface IApplicationInstanceLog {\n  dateFrom: string;\n  dateTo: string;\n  logs: string;\n  truncated: boolean;\n  [key: string]: any;\n}\n\nexport interface IApplicationInstanceLogRequestParams {\n  dateFrom?: string;\n  dateTo?: string;\n  /**\n   * Limits the maximum number of lines to be returned by the backend.\n   */\n  limit?: number;\n  [key: string]: any;\n}\n","export enum BillingMode {\n  SUBSCRIPTION = 'SUBSCRIPTION',\n  RESOURCES = 'RESOURCES'\n}\n","export enum Isolation {\n  PER_TENANT = 'PER_TENANT',\n  MULTI_TENANT = 'MULTI_TENANT'\n}\n","import { gettext } from '../gettext';\n\nexport enum ApplicationAvailability {\n  MARKET = gettext('MARKET'),\n  PRIVATE = gettext('PRIVATE'),\n  SHARED = gettext('SHARED')\n}\n","import { Service, IResult, IResultList } from '../core';\r\nimport { ISystemOption } from './ISystemOption';\r\n\r\nexport class SystemOptionsService extends Service<ISystemOption> {\r\n  protected baseUrl = 'tenant/system';\r\n  protected listUrl = 'options';\r\n  protected propertyName = 'options';\r\n\r\n  /**\r\n   * Gets the details of given system option.\r\n   *\r\n   * @param {string|number|IIdentified} option System option object with mandantory fragments.\r\n   *\r\n   * @returns Response wrapped in [[IResult]]\r\n   *\r\n   * **Example**\r\n   * ```typescript\r\n   *\r\n   *    const option: ISystemOption = {\r\n   *      category: 'alarm.type.mapping',\r\n   *      key: 'temp_to_high'\r\n   *    };\r\n   *\r\n   *    (async () => {\r\n   *      const {data, res} = await systemOptionsService.detail(option);\r\n   *   })();\r\n   * ```\r\n   */\r\n  async detail(option: ISystemOption): Promise<IResult<ISystemOption>> {\r\n    return super.detail(option);\r\n  }\r\n\r\n  /**\r\n   * Gets the list of system options filtered by parameters.\r\n   *\r\n   * @returns Response wrapped in [[IResultList]]\r\n   *\r\n   * @param {object} filter Object containing filters for querying system options.\r\n   *\r\n   * **Example**\r\n   * ```typescript\r\n   *\r\n   *  const filter: object = {\r\n   *     pageSize: 100,\r\n   *     withTotalPages: true\r\n   *   };\r\n   *\r\n   *   (async () => {\r\n   *     const {data, res, paging} = await systemOptionsService.list(filter);\r\n   *   })();\r\n   * ```\r\n   */\r\n  async list(filter: object = {}): Promise<IResultList<ISystemOption>> {\r\n    const headers = { 'content-type': 'application/json' };\r\n    const url = this.listUrl;\r\n    const res = await this.fetch(url, { headers, params: filter });\r\n    const json = await res.json();\r\n    const data = json[this.propertyName];\r\n\r\n    return { res, data };\r\n  }\r\n\r\n  protected getDetailUrl(option: ISystemOption): string {\r\n    return `${this.listUrl}/${option.category}/${option.key}`;\r\n  }\r\n\r\n  protected onBeforeCreate(obj: ISystemOption): any {\r\n    return obj;\r\n  }\r\n}\r\n","import { Service, IResultList, IResult, IIdentified } from '../core';\nimport { ITenantOption } from './ITenantOption';\nimport { ITenantOptionDetailParams } from './ITenantOptionDetailParams';\n\n/**\n * @description\n * This service allows for managing tenant's options.\n */\nexport class TenantOptionsService extends Service<ITenantOption> {\n  protected baseUrl = 'tenant';\n  protected listUrl = 'options';\n  protected propertyName = 'options';\n\n  private securityOptionsCategories = ['password'];\n  private securityOptionsListUrl = 'security-options';\n  private systemOptions = 'system';\n\n  /**\n   * Get a representation of a tenant's option.\n   *\n   * @param entity Tenant option object.\n   * @param params Additional query parameters.\n   *\n   * @returns Returns promise object that is resolved with\n   * the ITenantOption wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   * const option: ITenantOption = {\n   *   category: 'access.control',\n   *   key: 'allow.origin'\n   * };\n   * const params: ITenantOptionDetailParams = {\n   *   evaluate: 'inherited'\n   * };\n   * (async () => {\n   *   const { data, res } = await tenantService.detail(option);\n   *   console.log('value inherited from parent tenant:', data.value);\n   * })();\n   * ```\n   *\n   * Required role: ROLE_OPTION_MANAGEMENT_READ\n   */\n  async detail(\n    entity: ITenantOption,\n    params: ITenantOptionDetailParams = {}\n  ): Promise<IResult<ITenantOption>> {\n    return super.detail(entity, params);\n  }\n\n  /**\n   * Creates a new tenant's option.\n   *\n   * @param {ITenantOption} entity Tenant's Option object.\n   *\n   * @returns {IResult<IIdentified>} Returns promise object that is resolved with\n   * the details of newly created tenant option.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const tenantObject = {\n   *    id: \"sample_tenant\",\n   *    company: \"sample_company\",\n   *    domain: \"sample_domain.com\",\n   *    contactName: \"Mr. Doe\",\n   *    ...\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await tenantService.create(tenantObject);\n   *  })();\n   * ```\n   *\n   * Required role: ROLE_OPTION_MANAGEMENT_ADMIN<br><br>\n   * Options are category-key-value tuples, storing tenant configuration.Some categories of options\n   * allow creation of new one, other are limited to predefined set of keys.<br><br>\n   * Any option of any tenant can be defined as \"non-editable\" by \"management\" tenant. Afterwards, any PUT or DELETE\n   * requests made on that option by the owner tenant, will result in 403 error (Unauthorized).\n   */\n  async create(entity: ITenantOption): Promise<IResult<ITenantOption>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates tenant's option data.\n   *\n   * @param {ITenantOption} entity Tenant option is partially updatable.\n   *\n   * @returns {IResult<ITenantOption>} Returns promise object that is resolved with the saved tenant option object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialUpdateObject: IIdentified = {\n   *     value : \"http://developer.cumulocity.com\"\n   *     ...\n   *   }\n   *\n   *  (async () => {\n   *    const {data, res} = await tenantOptionsService.update(partialUpdateObject);\n   *  })();\n   * ```\n   *\n   * Required role: ROLE_OPTION_MANAGEMENT_ADMIN\n   */\n  async update(entity: ITenantOption): Promise<IResult<ITenantOption>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of tenant's options filtered by parameters.\n   *\n   * @param {object} filter Object containing filters for querying tenant options.\n   *\n   * @returns {IResultList<ITenantOption>} Returns promise object that is resolved\n   * with the ITenantOption wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     severity: Severity.MAJOR,\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await tenantOptionsService.list(filter);\n   *   })();\n   * ```\n   *\n   * Required role: ROLE_OPTION_MANAGEMENT_READ\n   */\n  async list(filter: object = {}): Promise<IResultList<ITenantOption>> {\n    return super.list(filter);\n  }\n\n  /**\n   * Delete a representation of a tenant's option.\n   *\n   * @param {string|number|IIdentified} entityOrId Tenant's option id or tenant's option object.\n   *\n   * @returns Returns promise object that is resolved with the IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const tenantOptionId: string = \"uniqueTenantId\";\n   *\n   *    (async () => {\n   *      const {data, res} = await tenantOptionsService.delete(tenantOptionId);\n   *   })();\n   * ```\n   *\n   * Required role: ROLE_TENANT_MANAGEMENT_ADMIN\n   */\n  async delete(entityOrId: string | number | IIdentified): Promise<IResult<null>> {\n    return super.delete(entityOrId);\n  }\n\n  protected getDetailUrl(entity: ITenantOption): string {\n    const encodedCategory = encodeURIComponent(entity.category);\n    const encodedKey = encodeURIComponent(entity.key);\n    if (this.securityOptionsCategories.indexOf(entity.category) > -1) {\n      return `${this.securityOptionsListUrl}/${encodedCategory}/${encodedKey}`;\n    } else {\n      return `${this.listUrl}/${encodedCategory}/${encodedKey}`;\n    }\n  }\n\n  protected onBeforeCreate(obj: ITenantOption): any {\n    return obj;\n  }\n}\n","import { Service, IResult } from '../core';\nimport { ITenantSecurityOption } from './ITenantSecurityOption';\n\n/**\n * @description\n * This service allows to get tenant security option.\n */\nexport class TenantSecurityOptionsService extends Service<ITenantSecurityOption> {\n  protected baseUrl = 'tenant';\n  protected listUrl = 'security-options';\n  protected category = 'password';\n  protected propertyName = 'options';\n\n  /**\n   * Get a specific tenant's security option.\n   *\n   * @param {ITenantSecurityOption} Tenant's security option object with key value.\n   *\n   * @returns Returns promise object that is resolved with the ITenantSecurityOption wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *     const option: ITenantSecurityOption = {\n   *        key: 'limit.validity'\n   *      };\n   *\n   *    (async () => {\n   *      const {data, res} = await tenantSecurityOptionsService.detail(option);\n   *   })();\n   * ```\n   */\n  async detail(\n    tenantSecurityOption: ITenantSecurityOption\n  ): Promise<IResult<ITenantSecurityOption>> {\n    return super.detail(tenantSecurityOption);\n  }\n\n  protected getDetailUrl(tenantSecurityOption: ITenantSecurityOption): string {\n    return `${this.listUrl}/${this.category}/${tenantSecurityOption.key}`;\n  }\n\n  protected onBeforeCreate(obj: ITenantSecurityOption): any {\n    return obj;\n  }\n}\n","import { IIdentified, IResult, IResultList, Service } from '../core';\nimport { ITenantLoginOption } from './ITenantLoginOptions';\n\n/**\n * @description\n * This service allows to get tenant login options.\n */\nexport class TenantLoginOptionsService extends Service<ITenantLoginOption> {\n  protected baseUrl = 'tenant';\n  protected listUrl = 'loginOptions';\n  protected propertyName = 'loginOptions';\n\n  /**\n   * Gets the details of login option.\n   *\n   * @param entityIdentityOrId Login option's id or login option object.\n   *\n   * @returns Returns promise object that is resolved with the ITenantLoginOption wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const tenantLoginOptionId: string = 'uniqueTenantLoginOptionId';\n   *\n   *    (async () => {\n   *      const {data, res} = await tenantLoginOptionsService.detail(tenantLoginOptionId);\n   *   })();\n   * ```\n   */\n  async detail(entityIdentityOrId: string | IIdentified): Promise<IResult<ITenantLoginOption>> {\n    return super.detail(entityIdentityOrId);\n  }\n\n  /**\n   * Gets the list of tenant's login options filtered by parameters.\n   *\n   * @param filter Object containing filters for querying tenant's login options.\n   *\n   * @returns Returns promise object that is resolved with the ITenantLoginOption wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     tenantId: '1111111'\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await tenantLoginOptionsService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}): Promise<IResultList<ITenantLoginOption>> {\n    return super.list(filter);\n  }\n\n  /**\n   * Gets the list of all tenant's login options for current tenant.\n   *\n   * @returns Returns promise object that is resolved with the ITenantLoginOption wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await tenantLoginOptionsService.listForCurrentTenant();\n   *   })();\n   * ```\n   */\n  async listForCurrentTenant(): Promise<IResultList<ITenantLoginOption>> {\n    return super.list({ tenantId: this.client.tenant });\n  }\n\n  /**\n   * Gets the list of all tenant's login options for management tenant.\n   *\n   * @returns Returns promise object that is resolved with the ITenantLoginOption wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await tenantLoginOptionsService.listForManagement();\n   *   })();\n   * ```\n   */\n  async listForManagement(): Promise<IResultList<ITenantLoginOption>> {\n    return super.list({ management: true });\n  }\n\n  /**\n   * Creates a new tenant login option.\n   *\n   * @param entity ITenantLoginOption object.\n   *\n   * @returns Returns promise object that is resolved with the details of newly created tenant login option.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const tenantLoginOption: ITenantLoginOption = {\n   *    grantType: \"PASSWORD\",\n   *    providerName: \"Cumulocity\",\n   *    type: \"BASIC\",\n   *    userManagementSource: \"INTERNAL\",\n   *    visibleOnLoginPage: true\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await tenantLoginOptionsService.create(tenantLoginOption);\n   *  })();\n   * ```\n   */\n  async create(entity: ITenantLoginOption): Promise<IResult<ITenantLoginOption>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates tenant's login option data.\n   *\n   * @param entity ITenantLoginOption object.\n   *\n   * @returns Returns promise object that is resolved with the saved tenant's login option object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const tenantLoginOption: ITenantLoginOption = {\n   *    grantType: \"PASSWORD\",\n   *    id: \"2eff9a0b-e376-4ce8-a0f1-0a07cef8a8a1\",\n   *    providerName: \"Cumulocity\",\n   *    type: \"BASIC\",\n   *    userManagementSource: \"INTERNAL\",\n   *    visibleOnLoginPage: true\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await tenantLoginOptionsService.update(tenantLoginOption);\n   *  })();\n   * ```\n   */\n  async update(entity: ITenantLoginOption): Promise<IResult<ITenantLoginOption>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Update tenant's login option data if id exists in object, otherwise create new entity.\n   *\n   * @param entity ITenantLoginOption object.\n   *\n   * @returns Returns promise object that is resolved with the saved tenant's login option object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const tenantLoginOption: ITenantLoginOption = {\n   *    grantType: \"PASSWORD\",\n   *    id: \"2eff9a0b-e376-4ce8-a0f1-0a07cef8a8a1\",\n   *    providerName: \"Cumulocity\",\n   *    type: \"BASIC\",\n   *    userManagementSource: \"INTERNAL\",\n   *    visibleOnLoginPage: true\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await tenantLoginOptionsService.save(tenantLoginOption);\n   *  })();\n   * ```\n   */\n  async save(entity: ITenantLoginOption): Promise<IResult<ITenantLoginOption>> {\n    return entity.id ? this.update(entity) : this.create(entity);\n  }\n\n  /**\n   * Removes tenant's login option.\n   *\n   * @param entityOrId Tenant's login option's id or tenant's login option object.\n   *\n   * @returns Returns promise object that is resolved with the IResult of null.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const tenantLoginOptionId: string = 'uniqueTenantLoginOptionId';\n   *\n   *    (async () => {\n   *      const {data, res} = await tenantLoginOptionsService.delete(tenantLoginOptionId);\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | IIdentified): Promise<IResult<null>> {\n    return super.delete(entityOrId);\n  }\n}\n","/**\n * A list of supported [[ITenantLoginOption]] which\n * describe the way a user can login to the Platform.\n */\nimport { TfaStrategy } from '../tenant';\n\nexport interface ITenantLoginOptions {\n  /**\n   * Link to the resource\n   */\n  self?: string;\n  /**\n   * The list of tenant login options\n   */\n  loginOptions: ITenantLoginOption[];\n}\n\n/**\n * Describes the login option which can be requested by any\n * application on startup without login. It describes which kind\n * of login mechanism (e.g. Basic, SSO or OAI-Secure) is\n * supported by the current Platform.\n */\nexport interface ITenantLoginOption {\n  /**\n   * Identifies the login option\n   */\n  id?: string;\n  /**\n   * Login option type\n   */\n  type?: TenantLoginOptionType;\n  /**\n   * Grant type\n   */\n  grantType?: GrantType;\n  /**\n   * The origin of the users REMOTE or INTERNAL\n   */\n  userManagementSource: UserManagementSource;\n  /**\n   * Link to the resource\n   */\n  self?: string;\n  /**\n   * The strategy for Two Factor Authentication\n   */\n  tfaStrategy?: TfaStrategy;\n  /**\n   * Indicates whether the login option should be visible on the login page of UI applications.\n   * If set to `true` for more than one login option, then the preferred one will be selected according to priority:\n   * 1. OAI-Secure: authentication information is stored in a HttpOnly cookie\n   * 2. Basic Auth: authentication information is stored in a session storage\n   * 3. SSO redirect: allows a user to login with a single 3rd-party authorization server using the OAuth2 protocol.\n   * If no login option has `visibleOnLoginPage` set to `true`, the preferred login option will be Basic Auth.\n   */\n  visibleOnLoginPage?: boolean;\n  /**\n   * The label which is shown on the login button\n   */\n  buttonName?: string;\n  /**\n   * The request which is used to initialize an oauth flow\n   */\n  initRequest?: string;\n  /**\n   * Determines if password strength is enforced on system level\n   */\n  enforceStrength?: boolean;\n  /**\n   * Minimum length of a password to be considered as a “green” strong one\n   */\n  greenMinLength?: number;\n  /**\n   * Determines if password strength is enforced on tenant level\n   */\n  strengthValidity?: boolean;\n  /**\n   * Organizations name which provides login option\n   */\n  providerName?: string;\n  /**\n   * Basic authentication restrictions.\n   */\n  authenticationRestrictions?: IAuthenticationRestrictions;\n  /**\n   * Configuration for OAI-Secure sessions.\n   */\n  sessionConfiguration?: ISessionConfiguration;\n  /**\n   * Tenant correct domain for OAI-Secure login option.\n   * UI will redirect to this domain if OAI-Secure is\n   * set as preferred login mode and domain in browser is wrong.\n   */\n  loginRedirectDomain?: string;\n}\n\nexport interface IAuthenticationRestrictions {\n  /**\n   * The list of user agents which are allowed to use the platform's REST API.\n   * The values are compared with `User-Agent` HTTP header.\n   */\n  trustedUserAgents: string[];\n\n  /**\n   * The list of user agents which are forbidden to use the platform's REST API.\n   * The values are compared with `User-Agent` HTTP header.\n   */\n  forbiddenUserAgents: string[];\n\n  /**\n   * The list of clients which are forbidden to use the platform's REST API.\n   * For now, the only value supported in the array is `'WEB_BROWSERS'` (which blocks all web browsers).\n   */\n  forbiddenClients: string[];\n}\n\nexport interface ISessionConfiguration {\n  /**\n   * The maximum amount of time a session can be active.\n   */\n  absoluteTimeoutMillis: number;\n  /**\n   * The maximum amount of sessions per user.\n   */\n  maximumNumberOfParallelSessions: number;\n  /**\n   * The timeout after which the session id is automatically renewed. If there is no activity after renewal timeout and before absolute session timeout, the session will not be renewed.\n   */\n  renewalTimeoutMillis: number;\n  /**\n   * If `true`, then every request needs to use the same `User-Agent` header as the first request which initiated the session.\n   */\n  userAgentValidationRequired: boolean;\n}\n\nexport enum TenantLoginOptionType {\n  /**\n   * OAI-Secure: authentication information is stored in a HttpOnly cookie\n   */\n  OAUTH2_INTERNAL = 'OAUTH2_INTERNAL',\n  /**\n   * SSO redirect: allows a user to login with a single 3rd-party authorization server using the OAuth2 protocol.\n   */\n  OAUTH2 = 'OAUTH2',\n  /**\n   * Basic Auth: authentication information is stored in a session storage\n   */\n  BASIC = 'BASIC'\n}\n\nexport enum GrantType {\n  AUTHORIZATION_CODE = 'AUTHORIZATION_CODE',\n  PASSWORD = 'PASSWORD'\n}\n\nexport enum UserManagementSource {\n  REMOTE = 'REMOTE',\n  INTERNAL = 'INTERNAL'\n}\n","import { Service, IResult, IResultList } from '../core';\nimport { IAuditRecord } from './IAuditRecord';\n\nexport class AuditService extends Service<IAuditRecord> {\n  protected baseUrl = 'audit';\n  protected listUrl = 'auditRecords';\n  protected propertyName = 'auditRecords';\n\n  /**\n   * Gets the details of selected audit record.\n   *\n   * @param {string|number|IAuditRecord} entityOrId Entity or Id of the entity.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const auditId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await auditService.detail(auditId);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IAuditRecord): Promise<IResult<IAuditRecord>> {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new audit record for a given source.\n   *\n   * @param {IAuditRecord} entity Audit record object with mandantory fragments.\n   * IAuditRecord implements the [[IEvent]] interface.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const mandantoryObject: IAuditRecord = {\n   *    type: AuditRecordType.ALARM,\n   *    time: '2018-05-02T10:08:00Z',\n   *    severity: Severity.MAJOR,\n   *    source: {id: 1}\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await auditService.create(mandantoryObject);\n   *  })();\n   * ```\n   */\n  async create(entity: IAuditRecord): Promise<IResult<IAuditRecord>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Gets the list of audit records filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying audit records.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     severity: Severity.MAJOR,\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await auditService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}): Promise<IResultList<IAuditRecord>> {\n    return super.list(filter);\n  }\n}\n","/**\n * A specific audit record can have one of the following types\n */\nexport enum AuditRecordType {\n  ALARM = 'Alarm',\n  BULK_OPERATION = 'BulkOperation',\n  CEP_MODULE = 'CepModule', // FIXME: legacy type. Remains because there might be audits from before migration to apama.\n  EVENT = 'Event',\n  INVENTORY = 'Inventory',\n  INVENTORY_ROLE = 'InventoryRole',\n  OPERATION = 'Operation',\n  OPTION = 'Option',\n  GROUP = 'Group',\n  SMART_RULE = 'SmartRule',\n  SYSTEM = 'SYSTEM',\n  TENANT = 'Tenant',\n  USER = 'User'\n}\n","import { gettext } from '../gettext';\r\n\r\n/**\r\n * An audit record can have one of the following change type\r\n */\r\nexport enum ChangeType {\r\n  ADDED = gettext('ADDED'),\r\n  REPLACED = gettext('REPLACED'),\r\n  REMOVED = gettext('REMOVED')\r\n}\r\n","import { IIdentified, Service, IResult, IResultList } from '../core';\n\nexport class InventoryRoleService extends Service<IIdentified> {\n  protected baseUrl = 'user';\n  protected listUrl = 'inventoryroles';\n  protected propertyName = 'roles';\n\n  /**\n   * Gets the details of inventory role.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const inventoryRoleId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await inventoryRoleService.detail(inventoryRoleId);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IIdentified): Promise<IResult<IIdentified>> {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new inventory role.\n   *\n   * @param {IIdentified} entity\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const newRole: IIdentified = {\n   *    name: 'Custom role'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await inventoryRoleService.create(newRole);\n   *  })();\n   * ```\n   */\n  async create(entity: IIdentified): Promise<IResult<IIdentified>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates inventory role data.\n   *\n   * @param {IIdentified} entity\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const updateObject: IIdentified = {\n   *    id: 1,\n   *    name: 'changed role'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await inventoryRoleService.update(updateObject);\n   *  })();\n   * ```\n   */\n  async update(entity: IIdentified): Promise<IResult<IIdentified>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of inventory roles filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying alarms.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await inventoryRoleService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}): Promise<IResultList<IIdentified>> {\n    return super.list(filter);\n  }\n\n  /**\n   * Removes an inventory role with given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IExternalIdentity} identity Identity object with mandantory fragments.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const id: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await identityService.delete(id);\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | number | IIdentified): Promise<IResult<null>> {\n    return super.delete(entityOrId);\n  }\n}\n","import { gettext } from '../gettext';\n\n/**\n * Device registration can have one of the following states.\n */\nexport enum DeviceRegistrationStatus {\n  WAITING_FOR_CONNECTION = gettext('WAITING_FOR_CONNECTION'),\n  PENDING_ACCEPTANCE = gettext('PENDING_ACCEPTANCE'),\n  ACCEPTED = gettext('ACCEPTED'),\n  BLOCKED = gettext('BLOCKED')\n}\n","import { btoa } from 'b2a';\nimport { IIdentified, Service, IResult, IResultList } from '../core';\nimport {\n  IDeviceRegistration,\n  IDeviceRegistrationAccept,\n  IDeviceRegistrationCreate,\n  IDeviceRegistrationLimit\n} from './IDeviceRegistration';\nimport { DeviceRegistrationStatus } from './DeviceRegistrationStatus';\nimport { IDeviceCredentials } from './IDeviceCredentials';\n\n/**\n * Interface to use as options parameter\n * to bootstrap a new device.\n */\nexport interface IDeviceBootstrapOptions {\n  /**\n   * If already logged in it is accessible via\n   * client.auth.getFetchOptions, see [[BasicAuth.getFetchOptions]]\n   *\n   * **Example**\n   * ``` typescript\n   *\n   * // tenant/username:password\n   * const basicAuthToken = 'Basic dGVuYW50L3VzZXJuYW1lOnBhc3N3b3Jk';\n   * ```\n   */\n  basicAuthToken?: string;\n  /**\n   * Object to define username and password\n   * as string.\n   *\n   * **Example**\n   * ``` typescript\n   *\n   *    const basicAuth = {\n   *      user: 'username',\n   *      pass: 'password'\n   *    }\n   * ```\n   */\n  basicAuth?: {\n    user: string;\n    pass: string;\n  };\n}\n\n/**\n * This class allows registration of a new device.\n */\nexport class DeviceRegistrationService extends Service<IDeviceRegistration> {\n  protected baseUrl = 'devicecontrol';\n  protected listUrl = 'newDeviceRequests';\n  protected propertyName = 'newDeviceRequests';\n\n  /**\n   * Gets the details of device registration.\n   *\n   * @param {string|number|IIdentified} entityOrId Entity or Id of the entity.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const entityId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await deviceRegistrationService.detail(entityId);\n   *    })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IIdentified) {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new device registration.\n   *\n   * @param {IDeviceRegistrationCreate} entity Device registration object with mandantory fragments.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const mandantoryObject: IDeviceRegistrationCreate = {\n   *      id: 1,\n   *    };\n   *\n   *    (async () => {\n   *      const {data, res} = await deviceRegistrationService.create(mandantoryObject);\n   *    })();\n   * ```\n   */\n  async create(entity: IDeviceRegistrationCreate) {\n    return super.create(entity);\n  }\n\n  /**\n   * Gets the list of device registrations by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying registrations.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await deviceRegistrationService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n\n  /**\n   * Removes an registration with given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {string | number | IIdentified} entityOrId entity or id of the registration.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const id = 'abc';\n   *\n   *   (async () => {\n   *     const {data, res} = await deviceRegistrationService.delete(id);\n   *     // data will be null\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | number | IIdentified) {\n    return super.delete(entityOrId);\n  }\n\n  /**\n   * Accepts the device registration for given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {string | number | IIdentified} entityOrId entity or id of registration.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const id = 'abc';\n   *\n   *   (async () => {\n   *     const {data, res} = await deviceRegistrationService.accept(id);\n   *   })();\n   * ```\n   */\n  async accept(entityOrId: string | number | IIdentified): Promise<IResult<IDeviceRegistration>> {\n    const securityToken: string = this.getSecurityToken(entityOrId);\n    let payload: Partial<IDeviceRegistration> = {\n      id: this.getIdString(entityOrId),\n      status: DeviceRegistrationStatus.ACCEPTED\n    };\n\n    if (securityToken) {\n      payload = {\n        ...payload,\n        securityToken\n      };\n    }\n    return super.update(payload);\n  }\n\n  /**\n   * Accepts the device registration for all registrations in pending acceptance.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   (async () => {\n   *     const {data, res} = await deviceRegistrationService.acceptAll();\n   *   })();\n   * ```\n   */\n  async acceptAll(): Promise<IResultList<IDeviceRegistrationAccept>> {\n    const res = await super.fetch(`${this.listUrl}/acceptAll`, { method: 'POST' });\n    const data = (await res.json()) as IDeviceRegistrationAccept[];\n    return { res, data };\n  }\n\n  /**\n   * Gets limitation information for registering devices to the platform\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   (async () => {\n   *     const {data, res} = await deviceRegistrationService.limit();\n   *   })();\n   * ```\n   */\n  async limit(): Promise<IResult<IDeviceRegistrationLimit>> {\n    const res = await super.fetch(`${this.listUrl}/limit`);\n    const data = (await res.json()) as IDeviceRegistrationLimit;\n    return { res, data };\n  }\n\n  /**\n   * Bootstraps the device with given id.\n   *\n   * @param entityOrId entity or id of registration.\n   * @param options for details see [[IDeviceBootstrapOptions]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const id: 'abc';\n   *   const options: IDeviceBootstrapOptions = {\n   *     basicAuthToken: 'Basic dGVuYW50L3VzZXJuYW1lOnBhc3N3b3Jk',\n   *     basicAuth: {\n   *       user: 'username',\n   *       pass: 'password'\n   *     }\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res} = await deviceRegistrationService.bootstrap(id, options);\n   *   })();\n   * ```\n   */\n  async bootstrap(\n    entityOrId: string | number | IIdentified,\n    options: IDeviceBootstrapOptions\n  ): Promise<IResult<IDeviceCredentials>> {\n    const id = this.getIdString(entityOrId);\n    const securityToken = this.getSecurityToken(entityOrId);\n    const body = securityToken ? JSON.stringify({ id, securityToken }) : JSON.stringify({ id });\n    const url = `${this.baseUrl}/deviceCredentials`;\n    const { basicAuth } = options;\n    let { basicAuthToken } = options;\n    if (basicAuth) {\n      const { user, pass } = basicAuth;\n      basicAuthToken = btoa(`${user}:${pass}`);\n    }\n    const headers = {\n      Authorization: `Basic ${basicAuthToken}`,\n      accept: 'application/json',\n      'content-type': 'application/json'\n    };\n    const method = 'POST';\n    const res = await this.client.fetch(url, { body, headers, method });\n    const data = await res.json();\n    if (res.status > 400) {\n      throw { res, data };\n    }\n    return { res, data };\n  }\n\n  protected onBeforeCreate(entity: IDeviceRegistrationCreate): IDeviceRegistrationCreate {\n    return entity;\n  }\n\n  protected onBeforeUpdate(entity: IDeviceRegistrationCreate): IDeviceRegistrationCreate {\n    const noIdEntity = Object.assign({}, entity);\n    delete noIdEntity.id;\n    return noIdEntity;\n  }\n\n  protected getDetailUrl(entityOrId: string | number | IIdentified): string {\n    const id = encodeURIComponent(this.getEntityId(entityOrId));\n    return `${this.listUrl}/${id}`;\n  }\n\n  private getSecurityToken(entity: string | number | IIdentified): string {\n    let securityToken: string;\n    if (typeof entity === 'object') {\n      securityToken = entity.securityToken ? String(entity.securityToken) : undefined;\n    }\n    return securityToken;\n  }\n}\n","import FormData from 'form-data';\nimport { Stream } from 'stream';\nimport { IFetchClient, IResult } from '../core';\nimport { IDeviceRegistrationBulkResult } from './IDeviceRegistrationBulkResult';\n\n/**\n * This class allows for bulk registering devices.\n */\nexport class DeviceRegistrationBulkService {\n  protected client: IFetchClient;\n\n  /**\n   * Instantiate class and assign client\n   * @param {IFetchClient} client\n   */\n  constructor(client: IFetchClient) {\n    this.client = client;\n  }\n\n  /**\n   * A new device registration as bulk.\n   *\n   * @param {Stream | Buffer} csv\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const csvString = `\n   *  ID,CREDENTIALS,TENANT,TYPE,NAME,ICCID,IDTYPE,PATH,SHELL\n   *  e2eDeviceRegistrationId,e2epassword123!,e2edocker,c8y_e2eDevice,e2eDevice,123456789,89456,e2eDeviceGroup,1\n   *  900001,e2epassword123!,e2edocker,c8y_e2eDevice1,e2eDevice1,123456789,89456,e2eDeviceGroup,1\n   *  900002,e2epassword123!,e2edocker,c8y_e2eDevice2,e2eDevice2,123456789,89456,e2eDeviceGroup,1`.trim();\n   *\n   *  const csvBuffer = Buffer.from(csvString):\n   *\n   *  (async () => {\n   *    const {data, res} = await deviceRegistrationBulkService.create(csvBuffer);\n   *  })();\n   * ```\n   */\n  async create(\n    inputFile: Stream | Buffer | File | Blob\n  ): Promise<IResult<IDeviceRegistrationBulkResult>> {\n    let csv = inputFile;\n    const url = '/devicecontrol/bulkNewDeviceRequests';\n    const method = 'POST';\n    const body = new FormData();\n    let fileName = 'bulk-registration.csv';\n    if (typeof File !== 'undefined' && csv instanceof File) {\n      fileName = csv.name;\n      const checkPattern = /\\.csv$/;\n      if (csv.name.match(checkPattern)) {\n        csv = new File([csv], csv.name, { type: 'text/csv' });\n      }\n    }\n    body.append('file', csv, fileName);\n    const headers = {\n      accept: 'application/json'\n    };\n    const res = await this.client.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n}\n","/**\n * Device registration can have one of the following security modes.\n */\nexport enum DeviceRegistrationSecurityMode {\n  REQUIRED = 'REQUIRED',\n  OPTIONAL = 'OPTIONAL',\n  IGNORED = 'IGNORED'\n}\n","import { Service } from '../core';\nimport { IRole } from './IRole';\n\n/**\n * @description\n * This service allows for fetch user roles.\n */\nexport class UserRoleService extends Service<IRole> {\n  protected baseUrl = 'user';\n  protected listUrl = 'roles';\n  protected propertyName = 'roles';\n\n  /**\n   * Gets the details of given role.\n   *\n   * @param {string|number|IRole} entityOrId Roles's id or role object.\n   *\n   * @returns Returns promise object that is resolved with the IRole wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const roleId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await userRoleService.detail(roleId);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IRole) {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Gets the list of user roles filtered by parameters.\n   *\n   * @param {object} filter Object containing filters for querying roles.\n   *\n   * @returns Returns promise object that is resolved with the IRole wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     severity: Severity.MAJOR,\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await userRoleService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n}\n","import { Service, IIdentified, IResult, ISource, IResultList } from '../core';\nimport { IUserGroup } from './IUserGroup';\nimport { IRoleReference } from '../user-role';\nimport { IUserReference } from '../user';\n\nenum ChildType {\n  ROLES = 'roles',\n  USERS = 'users'\n}\n\n/**\n * @description\n * This service allows for managing user groups.\n */\nexport class UserGroupService extends Service<IUserGroup> {\n  protected baseUrl = 'user';\n  protected propertyName = 'groups';\n\n  protected get listUrl() {\n    return `${this.client.tenant}/groups`;\n  }\n\n  /**\n   * Gets the details of given user group.\n   *\n   * @param {string|number|IUserGroup} entityOrId Group's id or role object.\n   *\n   * @returns Returns promise object that is resolved with the IUserGroup wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const groupId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await userGroupService.detail(roleId);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | number | IUserGroup): Promise<IResult<IUserGroup>> {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Creates a new user group.\n   *\n   * @param {IUserGroup} entity User Group object.\n   *\n   * @returns {IResult<IUserGroup>} Returns promise object that is resolved with\n   * the details of newly created user group.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const userGroupObject: IUserGroup = {\n   *    name: \"new user group\"\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await userGroupService.create(userGroupObject);\n   *  })();\n   * ```\n   */\n  async create(entity: Partial<IUserGroup>): Promise<IResult<IUserGroup>> {\n    return super.create(entity);\n  }\n\n  /**\n   * Updates user group data.\n   *\n   * @param {Partial<IUserGroup>} entity User group is partially updatable.\n   *\n   * @returns {IResult<IUserGroup>} Returns promise object that is resolved with the saved user group object.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const partialUpdateObject: Partial<IUserGroup> = {\n   *     \"id\" : 1,\n   *     \"self\" : \"[URL to this resource]\",\n   *     \"name\" : \"PlatformAdministrators\",\n   *     ...\n   *   }\n   *\n   *  (async () => {\n   *    const {data, res} = await userGroupService.update(partialUpdateObject);\n   *  })();\n   * ```\n   */\n  async update(entity: Partial<IUserGroup>): Promise<IResult<IUserGroup>> {\n    return super.update(entity);\n  }\n\n  /**\n   * Gets the list of user groups filtered by parameters.\n   *\n   * @param {object} filter Object containing filters for querying User Groups.\n   *\n   * @returns Returns promise object that is resolved with the IUserGroup wrapped by IResultList.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     severity: Severity.MAJOR,\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await userGroupService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}): Promise<IResultList<IUserGroup>> {\n    return super.list(filter);\n  }\n\n  /**\n   * Removes user group.\n   *\n   * @param {number | IIdentified} entityOrId User group's id or user group object.\n   *\n   * @returns Returns promise object that is resolved with the IResult of null.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const userGroupId: number = 1;\n   *\n   *    (async () => {\n   *      const {data, res} = await userGroupService.delete(userGroupId);\n   *   })();\n   * ```\n   * When group is removed, suitable audit records are created with type 'User'\n   * and activity 'User updated' with information that user has been removed from group.\n   *\n   * Please, note that the ADMINS and DEVICES groups can not be deleted.\n   */\n  async delete(entityOrId: number | IIdentified): Promise<IResult<null>> {\n    return super.delete(entityOrId);\n  }\n\n  /**\n   * Assign role to user group.\n   *\n   * @param {string | number | Partial<IUserGroup>} entityOrId User group's id or user group object.\n   * @param {string | Partial<ISource>} childEntityOrSelf Url to role resource or IRoleReference object.\n   *\n   * @returns Returns promise object that is resolved with the IRoleReference wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const userGroupId: number = 1;\n   *    const roleResource: string = \"[URL to the Role resource]\";\n   *\n   *    (async () => {\n   *      const {data, res} = await userGroupService.addRoleToGroup(userGroupId, roleResource);\n   *   })();\n   * ```\n   * When role is assigned to user, suitable audit record is created with type 'User' and activity 'User updated'.\n   */\n  async addRoleToGroup(\n    entityOrId: string | number | Partial<IUserGroup>,\n    childEntityOrSelf: string | Partial<ISource>\n  ): Promise<IResult<IRoleReference>> {\n    return this.addChild(ChildType.ROLES, entityOrId, childEntityOrSelf) as Promise<\n      IResult<IRoleReference>\n    >;\n  }\n\n  /**\n   * Unassign role from user\n   *\n   * @param {string | number | Partial<IUserGroup>} entityOrId User group's id or user group object.\n   * @param {string | Partial<ISource>} childEntityOrSelf Url to user resource or IRoleReference object.\n   *\n   * @returns Returns promise object that is resolved with the IResult of null.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const userGroupId: number = 1;\n   *    const userResource: string = \"[URL to the Role resource]\";\n   *\n   *    (async () => {\n   *      const {data, res} = await userGroupService.removeRoleFromGroup(userGroupId, userResource);\n   *   })();\n   * ```\n   */\n  async removeRoleFromGroup(\n    entityOrId: string | number | Partial<IUserGroup>,\n    childEntityOrSelf: string | Partial<ISource>\n  ): Promise<IResult<null>> {\n    return this.removeChild(ChildType.ROLES, entityOrId, childEntityOrSelf);\n  }\n\n  /**\n   * Assign user to user group.\n   *\n   * @param {string | number | Partial<IUserGroup>} entityOrId User group's id or user group object.\n   * @param {string | Partial<ISource>} childEntityOrSelf Url to user resource or IUserReference object.\n   *\n   * @returns Returns promise object that is resolved with the IUserReference wrapped by IResult.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const userGroupId: number = 1;\n   *    const userResource: string = \"[URL to the User resource]\";\n   *\n   *    (async () => {\n   *      const {data, res} = await userGroupService.addUserToGroup(userGroupId, userResource);\n   *   })();\n   * ```\n   * When user is added to group, suitable audit record is created with type 'User' and activity 'User updated'.\n   */\n  async addUserToGroup(\n    entityOrId: string | number | Partial<IUserGroup>,\n    childEntityOrSelf: string | Partial<ISource>\n  ): Promise<IResult<IUserReference>> {\n    return this.addChild(ChildType.USERS, entityOrId, childEntityOrSelf) as Promise<\n      IResult<IUserReference>\n    >;\n  }\n\n  /**\n   * Remove user from a group\n   *\n   * @param {string | number | Partial<IUserGroup>} entityOrId User group's id or user group object.\n   * @param {string | Partial<ISource>} childEntityOrSelf Url to user resource or IUserReference object.\n   *\n   * @returns Returns promise object that is resolved with the IResult of null.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const userGroupId: number = 1;\n   *    const userResource: string = \"[URL to the User resource]\";\n   *\n   *    (async () => {\n   *      const {data, res} = await userGroupService.removeUserFromGroup(userGroupId, userResource);\n   *   })();\n   * ```\n   * When user is removed from group, suitable audit record is created with type 'User' and activity 'User updated'.\n   */\n  async removeUserFromGroup(\n    entityOrId: string | number | Partial<IUserGroup>,\n    childEntityOrSelf: string | Partial<ISource>\n  ): Promise<IResult<null>> {\n    return this.removeChild(ChildType.USERS, entityOrId, childEntityOrSelf);\n  }\n\n  protected getSelf(childReference: string | Partial<ISource>): string {\n    if (typeof childReference === 'object' && childReference.self) {\n      return childReference.self;\n    } else {\n      return childReference as string;\n    }\n  }\n\n  private getChildUrl(\n    type: ChildType,\n    userGroupOrId: string | number | Partial<IUserGroup>\n  ): string {\n    return `${this.getDetailUrl(userGroupOrId)}/${type}`;\n  }\n\n  private getChildReferenceAsBody(type: ChildType, childReference: string | Partial<ISource>) {\n    const childSelf = this.getSelf(childReference);\n    switch (type) {\n      case ChildType.ROLES:\n        return JSON.stringify({ role: { self: String(childSelf) } });\n      case ChildType.USERS:\n        return JSON.stringify({ user: { self: String(childSelf) } });\n    }\n    throw new Error('UserGroupService -> getChild -> unsupported child type');\n  }\n\n  private async addChild(\n    type: ChildType,\n    userGroupOrId: string | number | Partial<IUserGroup>,\n    childReference: string | Partial<ISource>\n  ): Promise<IResult<IUserReference | IRoleReference>> {\n    const url = this.getChildUrl(type, userGroupOrId);\n    const method = 'POST';\n    const body = this.getChildReferenceAsBody(type, childReference);\n    const headers = {\n      accept: 'application/json',\n      'content-type': 'application/json'\n    };\n    const res = await this.fetch(url, { method, body, headers });\n    let data = await res.json();\n    data = data.managedObject;\n    return { res, data };\n  }\n\n  private async removeChild(\n    type: ChildType,\n    userGroupOrId: string | number | Partial<IUserGroup>,\n    childReference: string | IIdentified\n  ): Promise<IResult<null>> {\n    const childId = this.getIdString(childReference);\n    const url = `${this.getChildUrl(type, userGroupOrId)}/${encodeURIComponent(String(childId))}`;\n    const method = 'DELETE';\n    const headers = { accept: 'application/json' };\n    const res = await this.fetch(url, { method, headers });\n    const data = null;\n    return { res, data };\n  }\n}\n","import { IResult, IResultList, IFetchClient, IFetchOptions, IFetchResponse } from '../core';\nimport { IExternalIdentity } from './IExternalIdentity';\n\n/**\n * This class allwos for managing external identifiers.\n */\nexport class IdentityService {\n  private baseUrl = 'identity';\n  private propertyName = 'externalIds';\n  private client: IFetchClient;\n\n  constructor(client: IFetchClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets the list of identities filtered by parameters.\n   *\n   * @returns Response wrapped in [[IResultList]]\n   *\n   * @param {object} filter Object containing filters for querying identity.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const filter: object = {\n   *     pageSize: 100,\n   *     withTotalPages: true\n   *   };\n   *\n   *   (async () => {\n   *     const {data, res, paging} = await identityService.list(filter);\n   *   })();\n   * ```\n   */\n  async list(managedObjectId: string): Promise<IResultList<IExternalIdentity>> {\n    const headers = { accept: 'application/json' };\n    const url = this.getExternalIdsOfGlobalIdUrl(managedObjectId);\n    const res = await this.fetch(url, { headers });\n    const json = await res.json();\n    const data = json[this.propertyName];\n    return { res, data };\n  }\n\n  /**\n   * Creates a new identity.\n   *\n   * @param {IExternalIdentity} identity Identity object with mandantory fragments.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *   const linkedManagedObjectId = '123';\n   *   const identity: IExternalIdentity = {\n   *      type: 'type',\n   *      externalId: '1',\n   *      managedObject: {\n   *        id: linkedManagedObjectId\n   *      }\n   *    };\n   *\n   *    (async () => {\n   *      const {data, res} = await identityService.create(identity);\n   *   })();\n   * ```\n   */\n  async create(identity: IExternalIdentity): Promise<IResult<IExternalIdentity>> {\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const method = 'POST';\n    const body = JSON.stringify(identity);\n    const url = this.getExternalIdsOfGlobalIdUrl(identity.managedObject.id);\n    const res = await this.fetch(url, { headers, method, body });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Gets the details of an identity.\n   *\n   * @param {IExternalIdentity} identity Identity object with mandantory fragments.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const identity: IExternalIdentity = {\n   *      type: 'type',\n   *      externalId: '1'\n   *    };\n   *\n   *    (async () => {\n   *      const {data, res} = await identityService.detail(identity);\n   *   })();\n   * ```\n   */\n  async detail(identity: IExternalIdentity): Promise<IResult<IExternalIdentity>> {\n    const headers = { accept: 'application/json' };\n    const url = this.getExternalIdUrl(identity);\n    const res = await this.fetch(url, { headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Removes an identity with given id.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param {IExternalIdentity} identity Identity object with mandantory fragments.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const identity: IExternalIdentity = {\n   *      type: 'type',\n   *      externalId: '1'\n   *    };\n   *\n   *    (async () => {\n   *      const {data, res} = await identityService.delete(identity);\n   *   })();\n   * ```\n   */\n  async delete(identity: IExternalIdentity): Promise<IResult<IExternalIdentity>> {\n    const headers = { accept: 'application/json' };\n    const method = 'DELETE';\n    const url = this.getExternalIdUrl(identity);\n    const res = await this.fetch(url, { headers, method });\n    return { res, data: null };\n  }\n\n  private async fetch(url: string, init?: IFetchOptions): Promise<IFetchResponse> {\n    const res: IFetchResponse = await this.client.fetch(url, init);\n    if (res.status >= 400) {\n      let data = null;\n      try {\n        data = await res.json();\n      } catch (ex) {\n        try {\n          data = await res.text();\n        } catch (ex) {\n          // do nothing\n        }\n      }\n      throw { res, data };\n    }\n    return res;\n  }\n\n  private getExternalIdsOfGlobalIdUrl(managedObjectId: string | number): string {\n    return `/${this.baseUrl}/globalIds/${managedObjectId}/externalIds`;\n  }\n\n  private getExternalIdUrl(identity: IExternalIdentity): string {\n    return `/${this.baseUrl}/externalIds/${identity.type}/${identity.externalId}`;\n  }\n}\n","import { IResult, Service } from '../core';\nimport { ITrustedCertificate } from './ITrustedCertificate';\n\n/**\n * This class allows for managing trusted certificates.\n */\nexport class TrustedCertificateService extends Service<ITrustedCertificate> {\n  protected get baseUrl() {\n    return `/tenant/tenants/${this.client.tenant}`;\n  }\n  protected listUrl = 'trusted-certificates';\n  protected proofOfPossessionUrl = 'trusted-certificates-pop';\n  protected propertyName = 'certificates';\n\n  /**\n   * Gets a list of trusted certificates.\n   *\n   * @returns Response wrapped in [[IResultList]].\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   (async () => {\n   *     const {data, res} = await trustedCertificateService.list();\n   *   })();\n   * ```\n   */\n  async list(filter: object = {}) {\n    return super.list(filter);\n  }\n\n  /**\n   * Gets the details of trusted certificate\n   *\n   * @param entityOrId Trusted certificate object or trusted certificate fingerprint.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const fingerprint: string = 'abc';\n   *\n   *    (async () => {\n   *      const {data, res} = await trustedCertificateService.detail(fingerprint);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: string | ITrustedCertificate) {\n    return super.detail(entityOrId);\n  }\n\n  /**\n   * Removes a trusted certificate with given fingerprint.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @param entityOrId Trusted certificate object or trusted certificate fingerprint.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *   const fingerprint: string = 'abc';\n   *\n   *    (async () => {\n   *      const {data, res} = await trustedCertificateService.delete(fingerprint);\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: string | ITrustedCertificate) {\n    return super.delete(entityOrId);\n  }\n\n  /**\n   * Updates trusted certificate data.\n   *\n   * @param entity Trusted certificate partial object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const certificate: Partial<ITrustedCertificate> = {\n   *    name: 'Name'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await trustedCertificateService.update(certificate);\n   *  })();\n   * ```\n   */\n  async update(entity: Partial<ITrustedCertificate>) {\n    return super.update(entity);\n  }\n\n  /**\n   * Creates a new trusted certificate.\n   *\n   * @param entity Trusted certificate object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  const certificate: Partial<ITrustedCertificate> = {\n   *    name: 'Name',\n   *    certInPemFormat: 'MIID+DCCAuCgAwIBAgIJAO1Q9t/M9gYlMA0GC...',\n   *    status: 'ENABLED'\n   *  };\n   *\n   *  (async () => {\n   *    const {data, res} = await trustedCertificateService.create(certificate);\n   *  })();\n   * ```\n   */\n  async create(entity: Partial<ITrustedCertificate>) {\n    return super.create(entity);\n  }\n\n  /**\n   * Regenerates unsigned verification code for trusted certificate.\n   *\n   *\n   * @param entityOrId Trusted certificate object or finger print.\n   *\n   * @returns Certificate object with new verification code (wrapped in [[IResult]])\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  (async () => {\n   *    const fingerPrint = '00a360973e3e8d61e05aedb32c72438e2442279e';\n   *    const {data, res} = await trustedCertificateService.regeneratePoPVerificationCode(fingerPrint);\n   *    const newProofOfPossessionUnsignedVerificationCode = data.proofOfPossessionUnsignedVerificationCode;\n   *  })();\n   * ```\n   */\n  async regeneratePoPVerificationCode(\n    entityOrId: string | ITrustedCertificate\n  ): Promise<IResult<ITrustedCertificate>> {\n    const method = 'POST';\n    const headers = { 'content-type': 'application/json', Accept: 'application/json' };\n    const url = `${this.proofOfPossessionUrl}/${this.getEntityId(entityOrId)}/verification-code`;\n    const res = await this.fetch(url, { headers, method });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  /**\n   * Verifies signed verification code for trusted certificate.\n   *\n   *\n   * @param entityOrId Trusted certificate object or finger print.\n   * @param proofOfPossessionSignedVerificationCode Unsigned verification code encrypted by the private key.\n   *\n   * @returns Certificate object with the result of verification (wrapped in [[IResult]]).\n   *\n   * **Example**\n   * ```typescript\n   *\n   *  (async () => {\n   *    const fingerPrint = '00a360973e3e8d61e05aedb32c72438e2442279e';\n   *    const encryptedVerificationCode ='fuvlVWLfXG3V3bJWAdEhPD0HFCrYo5';\n   *    const {data, res} = await trustedCertificateService.verifySignedVerificationCode(fingerPrint, encryptedVerificationCode);\n   *    const isCertificateVerified = data.proofOfPossessionValid;\n   *  })();\n   * ```\n   */\n  async verifySignedVerificationCode(\n    entityOrId: string | ITrustedCertificate,\n    proofOfPossessionSignedVerificationCode: string\n  ): Promise<IResult<ITrustedCertificate>> {\n    const method = 'POST';\n    const headers = { 'content-type': 'application/json', Accept: 'application/json' };\n    const url = `${this.proofOfPossessionUrl}/${this.getEntityId(entityOrId)}/pop`;\n    const body = JSON.stringify({ proofOfPossessionSignedVerificationCode });\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n    return { res, data };\n  }\n\n  protected getDetailUrl(entityOrId: string | ITrustedCertificate): string {\n    const id = this.getEntityId(entityOrId);\n    return `${this.listUrl}/${id}`;\n  }\n\n  protected getEntityId(entityOrId: string | ITrustedCertificate): string {\n    let id: string;\n    if (typeof entityOrId === 'object' && entityOrId.fingerprint) {\n      id = entityOrId.fingerprint;\n    } else {\n      id = entityOrId as string;\n    }\n    return id;\n  }\n}\n","import { ApplicationService } from '../application';\nimport { IFetchClient, IResult } from '../core';\nimport { Service } from '../core/Service';\nimport { IdReference, IManagedObject } from '../inventory';\nexport class SmartGroupsService extends Service<IManagedObject> {\n  protected baseUrl = 'inventory';\n  protected listUrl = 'managedObjects';\n  private applicationService: ApplicationService;\n  private readonly SMART_GROUP_TYPE = 'c8y_DynamicGroup';\n  private readonly SMART_GROUP_FRAGMENT_TYPE = 'c8y_IsDynamicGroup';\n  private readonly DEVICE_GROUP_FRAGMENT_TYPE = 'c8y_IsDeviceGroup';\n  private readonly DEVICE_GROUP_TYPE = 'c8y_DeviceGroup';\n  private readonly DEVICE_SUBGROUP_TYPE = 'c8y_DeviceSubgroup';\n  private readonly COLUMNS_CONFIG_FRAGMENT = 'c8y_DeviceColumnsConfig';\n  private readonly FILTER_CONFIG_FRAGMENT = 'c8y_DeviceFilterConfig';\n  private readonly QUERY_STRING_FRAGMENT = 'c8y_DeviceQueryString';\n  private readonly SMART_GROUPS_V2_MICROSERVICE_APP_NAME = 'smartgroup';\n  private readonly SMART_GROUPS_V2_MICROSERVICE_BASE_PATH = 'service/smartgroup';\n  private readonly SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH = `${this.SMART_GROUPS_V2_MICROSERVICE_BASE_PATH}/smartgroups`;\n\n  constructor(client: IFetchClient) {\n    super(client);\n    this.applicationService = new ApplicationService(client);\n  }\n\n  /**\n   * Gets the details of managed object\n   *\n   * @param {IdReference} entityOrId Entity or Id of the ManagedObject.\n   * @param {object} filter Filter object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @example\n   * ```typescript\n   *\n   *    const id: string = '1';\n   *    const filter: any = { withChildren: false };\n   *\n   *    (async () => {\n   *      const {data, res} = await smartGroupsService.detail(id, filter);\n   *   })();\n   * ```\n   */\n  async detail(entityOrId: IdReference, filter: object = {}): Promise<IResult<IManagedObject>> {\n    return super.detail(entityOrId, filter);\n  }\n\n  /**\n   * Creates a smart group managed object with columns configuration.\n   *\n   * @param {object} smartGroup Dynamic group managed object.\n   * @param {object} deviceQueryString Columns configuration query string to filter the new group.\n   * @param {object} configurableColumns Configurable columns definitions.\n   * @param {object} filterConfig Columns filter configuration for the new group.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const smartGroup = { name: 'newName', type: 'c8y_DynamicGroup', c8y_IsDynamicGroup: {} };\n   *    const deviceQueryString = 'c8y_DeviceQueryString: \"$filter=(name eq 'test*') $orderby=c8y_Hardware.model asc';\n   *    const configurableColumns = [\n   *        {headerName: 'Status', active: false, key: 'status'},\n   *        {headerName: 'Name', active: true, key: 'name', filter: { externalFilterQuery: { name: { names: ['test*'] } } }},\n   *        {headerName: 'Model', active: true, key: 'model'}\n   *    ];\n   *\n   *    (async () => {\n   *      await smartGroupsService.create({ smartGroup, deviceQueryString, configurableColumns });\n   *   })();\n   *\n   *    Note: filterConfig has been removed as a default property to the input object.\n   *    Now it is part of the configurable columns properties as it is shown above.\n   *    You can still pass it as an optional parameter.\n   *    ( const filterConfig = [{ name: { names: ['test*'] } }] )\n   * ```\n   */\n  async create(obj: Partial<IManagedObject>): Promise<IResult<IManagedObject>> {\n    const { data: isInstalled } = await this.isSmartGroupsV2MicroserviceInstalled();\n    const entity = {\n      ...obj.smartGroup,\n      [this.QUERY_STRING_FRAGMENT]: obj.deviceQueryString,\n      [this.COLUMNS_CONFIG_FRAGMENT]: obj.configurableColumns,\n      ...(obj.filterConfig && { [this.FILTER_CONFIG_FRAGMENT]: obj.filterConfig })\n    };\n\n    return isInstalled ? this.createSmartGroupV2(entity) : super.create(entity);\n  }\n\n  /**\n   * Updates smart group managed object with given id.\n   *\n   * @param {Partial<IManagedObject>} mo Partial managed object of the smart group.\n   * @param {object} filter Filter object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @example\n   * ```typescript\n   *\n   *    const smartGroup = { id: '1', name: 'newName' };\n   *\n   *    (async () => {\n   *      await smartGroupsService.update(smartGroup);\n   *   })();\n   * ```\n   */\n  async update(mo: Partial<IManagedObject>, filter: object = {}): Promise<IResult<IManagedObject>> {\n    const { id } = mo;\n\n    const { data: isInstalled } = await this.isSmartGroupsV2MicroserviceInstalled();\n    const { data: groupMo } = await this.detail(id, { withChildren: false });\n\n    return isInstalled && this.isSmartGroupV2(groupMo)\n      ? this.updateSmartGroupV2(mo, filter)\n      : super.update(mo);\n  }\n\n  /**\n   * Updates smart group v2 managed object with given id.\n   *\n   * @param {Partial<IManagedObject>} mo Partial managed object of the smart group v2.\n   * @param {object} filter Filter object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @example\n   * ```typescript\n   *\n   *    const smartGroupV2 = { id: '1', name: 'newName' };\n   *\n   *    (async () => {\n   *      await smartGroupsService.updateSmartGroupV2(smartGroupV2);\n   *   })();\n   * ```\n   */\n  async updateSmartGroupV2(\n    mo: Partial<IManagedObject>,\n    filter: object = {}\n  ): Promise<IResult<IManagedObject>> {\n    const { id, ...partialMo } = mo;\n    const method = 'PUT';\n    const body = JSON.stringify(this.onBeforeUpdate(partialMo));\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const url = `${this.SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH}/${id}`;\n    const res = await this.fetch(url, { method, body, headers, params: { ...filter } });\n\n    const data = await res.json();\n\n    return { res, data };\n  }\n\n  /**\n   * Removes managed object with given id.\n   *\n   * @param {IManagedObject} group Managed object of the group.\n   * @param {object} params Additional query params.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @example\n   * ```typescript\n   *\n   *   const group = { id: '1' } as IManagedObject;\n   *   const params: any = {\n   *     withChildren: false\n   *   }\n   *\n   *    (async () => {\n   *      await smartGroupsService.delete(group, params);\n   *   })();\n   * ```\n   */\n  async delete(entityOrId: IdReference, params: any = {}): Promise<IResult<null>> {\n    const { data: isInstalled } = await this.isSmartGroupsV2MicroserviceInstalled();\n    const data = (await this.detail(entityOrId, { withChildren: false })).data;\n\n    return isInstalled && this.isSmartGroupV2(data)\n      ? await this.removeSmartGroupV2(data)\n      : await super.delete(data, params);\n  }\n\n  /**\n   * Checks if the smart groups v2 microservice is installed.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @example\n   * ```typescript\n   *\n   *    (async () => {\n   *      const {data, res} = await smartGroupsService.isSmartGroupsV2MicroserviceInstalled();\n   *   })();\n   * ```\n   */\n  isSmartGroupsV2MicroserviceInstalled(): Promise<IResult<boolean>> {\n    return this.applicationService.isAvailable({\n      name: this.SMART_GROUPS_V2_MICROSERVICE_APP_NAME\n    });\n  }\n\n  /**\n   * Checks whether a given managed object is a smart group\n   *\n   * @param {IManagedObject} mo Managed object to check.\n   *\n   * @returns boolean\n   *\n   * @example\n   * ```typescript\n   *\n   *    const mo: IManagedObject = {id: 1, type: \"c8y_DeviceGroup\", c8y_IsDeviceGroup: {}} as IManagedObject;\n   *\n   *    (() => {\n   *      const isSmartGroup = smartGroupsService.isSmartGroup(mo);\n   *   })();\n   * ```\n   */\n  isSmartGroup(mo: Partial<IManagedObject>): boolean {\n    const hasSmartGroupFragmentType = mo.hasOwnProperty(this.SMART_GROUP_FRAGMENT_TYPE);\n    const isSmartGroupType = mo && mo.type === this.SMART_GROUP_TYPE;\n\n    return hasSmartGroupFragmentType || isSmartGroupType;\n  }\n\n  /**\n   * Checks whether a given managed object is a smart group v2\n   *\n   * @param {IManagedObject} mo Managed object to check.\n   *\n   * @returns boolean\n   *\n   * @example\n   * ```typescript\n   *\n   *    const mo: IManagedObject = {id: 1, type: \"c8y_DeviceGroup\", c8y_IsDeviceGroup: {}} as IManagedObject;\n   *\n   *    (() => {\n   *      const isSmartGroup = smartGroupsService.isSmartGroupV2(mo);\n   *   })();\n   * ```\n   */\n  isSmartGroupV2(mo: Partial<IManagedObject>): boolean {\n    const hasSmartGroupFragmentType = mo.hasOwnProperty(this.SMART_GROUP_FRAGMENT_TYPE);\n    const hasDeviceGroupFragmentType = mo.hasOwnProperty(this.DEVICE_GROUP_FRAGMENT_TYPE);\n    const isGroupOrSubgroup =\n      (mo && mo.type === this.DEVICE_GROUP_TYPE) || mo.type === this.DEVICE_SUBGROUP_TYPE;\n\n    return hasSmartGroupFragmentType && hasDeviceGroupFragmentType && isGroupOrSubgroup;\n  }\n\n  /**\n   * Removes smart group v2 managed object with given id.\n   *\n   * @param {IdReference} entityOrId entity or Id of the ManagedObject.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * @example\n   * ```typescript\n   *\n   *    const id: string = '1';\n   *\n   *    (async () => {\n   *      await smartGroupsService.removeSmartGroupV2(id);\n   *   })();\n   * ```\n   */\n  async removeSmartGroupV2(entityOrId: IdReference): Promise<IResult<null>> {\n    let id: IdReference;\n\n    if (typeof entityOrId === 'object' && entityOrId.id) {\n      id = entityOrId.id;\n    } else {\n      id = entityOrId as string | number;\n    }\n\n    const method = 'DELETE';\n    const url = `${this.SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH}/${id}`;\n    const res = await this.client.fetch(url, { method });\n\n    return { res, data: null };\n  }\n\n  protected getUrl(url = ''): string {\n    const partialUrl = url.replace(/^\\/+/, '');\n    const baseUrl = this.baseUrl.replace(/\\/+$/, '');\n\n    if (url.includes(this.SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH)) {\n      return partialUrl;\n    } else {\n      return `${baseUrl}/${partialUrl}`;\n    }\n  }\n\n  private async createSmartGroupV2(\n    entity: Partial<IManagedObject>\n  ): Promise<IResult<IManagedObject>> {\n    const method = 'POST';\n    const body = JSON.stringify(entity);\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const url = this.SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH;\n    const res = await this.fetch(url, { method, body, headers });\n\n    const data = await res.json();\n\n    return { res, data };\n  }\n}\n","import { ApplicationService } from '../application';\nimport { IResult } from '../core';\nimport { IFetchClient } from '../core/IFetchClient';\nimport { Service } from '../core/Service';\nimport { IdReference } from '../inventory';\nimport { IRule } from './IRule';\n\nexport class SmartRulesService extends Service<IRule> {\n  private static readonly microserviceName = 'smartrule';\n  protected readonly baseUrl = 'service/smartrule';\n  protected readonly listUrl;\n  private readonly rulesUrl = 'smartrules';\n  private readonly unupdatableFields = ['type', 'cepModuleId', 'creationTime', 'lastUpdated'];\n  private microserviceAvailable: boolean;\n  private applicationService: ApplicationService;\n\n  constructor(client: IFetchClient) {\n    super(client);\n    this.applicationService = new ApplicationService(client);\n  }\n\n  /**\n   * Checks if the smart rules microservice is subscribed and available to user.\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    (async () => {\n   *      const isAvailable = await smartRulesService.isMicroserviceAvailable();\n   *   })();\n   * ```\n   */\n  async isMicroserviceAvailable(): Promise<boolean> {\n    if (this.microserviceAvailable === undefined) {\n      this.microserviceAvailable = (\n        await this.applicationService.isAvailable(SmartRulesService.microserviceName)\n      ).data;\n    }\n    return this.microserviceAvailable;\n  }\n\n  /**\n   * Gets a list of smart rules for given managed object.\n   *\n   * @param {IdReference} entityOrId Entity or Id of the ManagedObject.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const id: string = '1';\n   *\n   *    (async () => {\n   *      const {data, res} = await smartRulesService.listByContext(id);\n   *   })();\n   * ```\n   */\n  async listByContext(entityOrId: IdReference): Promise<IResult<IRule[]>> {\n    const url = this.contextRulesUrl(entityOrId);\n    const res = await this.fetch(url, { method: 'GET' });\n    const rules = (await res.json()).rules;\n    return { res, data: rules };\n  }\n\n  /**\n   * Deactivates smart rule for given entities list.\n   *\n   * @param {Partial<IRule>} rule Smart rule managed object.\n   * @param {IdReference[]} entitiesOrIdsList List of entities or Id of the ManagedObjects.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const rule: IRule = {id: '1', enabledSources: ['2', '3'],...};\n   *    const entityOrIdList: IdReference[] = ['2'];\n   *    (async () => {\n   *      const {data, res} = await smartRulesService.bulkDeactivateEnabledSources(rule, entityOrIdList);\n   *   })();\n   * ```\n   */\n  bulkDeactivateEnabledSources(\n    rule: Partial<IRule>,\n    entitiesOrIdsList: IdReference[]\n  ): Promise<IResult<IRule>> {\n    if (entitiesOrIdsList.length === 0) {\n      return Promise.resolve({ res: null, data: null });\n    }\n    const { enabledSources } = rule;\n    const newEnabledSources = this.disableEnabledSources(enabledSources, entitiesOrIdsList);\n    const ruleCopy = { ...rule };\n\n    Object.assign(ruleCopy, { enabledSources: newEnabledSources });\n    return this.update(ruleCopy);\n  }\n\n  /**\n   * Updates smart rule.\n   *\n   * @param {Parial<IRule>} rule Smart rule managed object.\n   *\n   * @returns Response wrapped in [[IResult]]\n   *\n   * **Example**\n   * ```typescript\n   *\n   *    const rule: IRule = {id: '1', enabledSources: ['2', '3'],...};\n   *    (async () => {\n   *      const {data, res} = await smartRulesService.updateSmartRule(rule);\n   *   })();\n   * ```\n   */\n  async update(rule: Partial<IRule>): Promise<IResult<IRule>> {\n    const url = this.getSmartRulesUrl(rule);\n    const method = 'PUT';\n    const body = JSON.stringify(this.removeUnclonableFields(rule, this.unupdatableFields));\n    const headers = { 'content-type': 'application/json', accept: 'application/json' };\n    const res = await this.fetch(url, { method, body, headers });\n    const data = await res.json();\n\n    return { res, data };\n  }\n\n  private disableEnabledSources(\n    enabledSources: string[] = [],\n    entityOrIdList: IdReference[]\n  ): string[] {\n    return enabledSources.filter(id => !this.getListOfStringIds(entityOrIdList).includes(id));\n  }\n\n  private getListOfStringIds(entityOrIdList: IdReference[]): string[] {\n    return entityOrIdList.map(entityOrId => {\n      if (typeof entityOrId === 'object' && entityOrId.id) {\n        return entityOrId.id.toString();\n      }\n      return entityOrId.toString();\n    });\n  }\n\n  private getSmartRulesUrl(rule: Partial<IRule>): string {\n    const contextMoId = rule && rule.c8y_Context && rule.c8y_Context.id;\n    let url = !!contextMoId ? this.contextRulesUrl(contextMoId) : this.rulesUrl;\n\n    if (rule.id) {\n      url = `${url}/${rule.id}`;\n    }\n    return url;\n  }\n\n  private removeUnclonableFields(rule: Partial<IRule>, fieldsToRemove: string[]): Partial<IRule> {\n    const ruleCopy = { ...rule };\n    fieldsToRemove.forEach(f => {\n      delete ruleCopy[f];\n    });\n    return ruleCopy;\n  }\n\n  private contextRulesUrl(entityOrId: IdReference = {}): string {\n    if (typeof entityOrId === 'object' && entityOrId.id) {\n      return `managedObjects/${entityOrId.id}/smartrules`;\n    }\n    return `managedObjects/${entityOrId}/smartrules`;\n  }\n}\n","import {\n  BearerAuth,\n  CookieAuth,\n  IAuthentication,\n  ICredentials,\n  IFetchResponse,\n  IMicroserviceSubscriptionsResponse,\n  NodeJSCookieAuth\n} from './core';\nimport { Realtime } from './realtime';\nimport {\n  FetchClient,\n  BasicAuth,\n  AlarmService,\n  ApplicationService,\n  AuditService,\n  DeviceRegistrationBulkService,\n  DeviceRegistrationService,\n  EventService,\n  InventoryBinaryService,\n  InventoryRoleService,\n  InventoryService,\n  MeasurementService,\n  OperationBulkService,\n  OperationService,\n  SystemOptionsService,\n  TenantOptionsService,\n  TenantSecurityOptionsService,\n  TenantLoginOptionsService,\n  TenantService,\n  UserGroupService,\n  UserRoleService,\n  UserService,\n  IdentityService,\n  SmartGroupsService,\n  SmartRulesService\n} from './services';\n\nexport interface IBootstrapOptions {\n  deviceId: string;\n  basicAuthToken: string;\n  timeout?: number;\n  expire?: number;\n  baseUrl?: string;\n}\n\nexport class Client {\n  /**\n   * Authenticates the given user. Determines the tenant by itself via a call to tenant/currentTenant.\n   *\n   * **Example**\n   * ```typescript\n   *\n   * let client: Client;\n   * (async () => {\n   *  client = await Client.authenticate({\n   *    user: 'testuser',\n   *    password: 'password1337!'\n   *  }, 'https://acme.cumulocity.com');\n   *\n   *  //you have access to the client api now\n   *  const { data, paging, res }); =  await client.inventory.list({ pageSize: 100 });\n   * })();\n   * ```\n   */\n  static async authenticate(credentials: ICredentials, baseUrl?: string): Promise<Client> {\n    const auth = new BasicAuth(credentials);\n    const clientCore = new FetchClient(auth, baseUrl);\n    const tenantName = await this.getCurrentTenant(clientCore);\n    const client = new Client(auth, baseUrl);\n    client.core.tenant = tenantName;\n    return client;\n  }\n\n  /**\n   * Authenticates the given user via OAuth Internal. Determines the tenant by itself via a call to tenant/currentTenant.\n   * Login call goes to `/tenant/oauth/token` and the retrieved token will be added in the `Authorization` header to subsequent requests.\n   *\n   * **Example**\n   * ```typescript\n   *\n   * let client: Client;\n   * (async () => {\n   *  client = await Client.authenticateViaOAuthInternal({\n   *    user: 'testuser',\n   *    password: 'password1337!'\n   *  }, 'https://acme.cumulocity.com');\n   *\n   *  //you have access to the client api now\n   *  const { data, paging, res }); =  await client.inventory.list({ pageSize: 100 });\n   * })();\n   * ```\n   */\n  static async authenticateViaOAuthInternal(credentials: ICredentials, baseUrl?: string) {\n    const token = await this.loginViaOAuthInternal(credentials, true, baseUrl);\n    const auth = new BearerAuth(token);\n    const clientCore = new FetchClient(auth, baseUrl);\n    const tenantName = credentials.tenant || (await this.getCurrentTenant(clientCore));\n    const client = new Client(auth, baseUrl);\n    client.core.tenant = tenantName;\n    return client;\n  }\n\n  /**\n   * Authenticates the given user via OAuth Internal. Determines the tenant by itself via a call to tenant/currentTenant.\n   * Login call goes to `/tenant/oauth` and the retrieved token will be attached as a Cookie in browser environments to subsequent requests (using 'CookieAuth').\n   * In none browser environments (e.g. nodejs) the retrieved token will be added in the `Authorization` header to subsequent requests (using 'NodeJSCookieAuth').\n   *\n   * **Example**\n   * ```typescript\n   *\n   * let client: Client;\n   * (async () => {\n   *  client = await Client.authenticateViaOAuthInternalCookie({\n   *    user: 'testuser',\n   *    password: 'password1337!'\n   *  }, 'https://acme.cumulocity.com');\n   *\n   *  //you have access to the client api now\n   *  const { data, paging, res }); =  await client.inventory.list({ pageSize: 100 });\n   * })();\n   * ```\n   */\n  static async authenticateViaOAuthInternalCookie(credentials: ICredentials, baseUrl?: string) {\n    const response = await this.loginViaOAuthInternal(credentials, false, baseUrl);\n    let auth: NodeJSCookieAuth | CookieAuth;\n    if (typeof document === 'undefined') {\n      auth = new NodeJSCookieAuth(response);\n    } else {\n      auth = new CookieAuth();\n    }\n    const clientCore = new FetchClient(auth, baseUrl);\n    const tenantName = credentials.tenant || (await this.getCurrentTenant(clientCore));\n    const client = new Client(auth, baseUrl);\n    client.core.tenant = tenantName;\n    return client;\n  }\n\n  /**\n   * Allows to use http to register a device on the platform.\n   *\n   * **Deprecated** Please use MQTT to bootstrap a device.\n   */\n  static async deviceBootstrap(options: IBootstrapOptions): Promise<Client> {\n    const { deviceId, timeout, baseUrl, basicAuthToken } = options;\n    let { expire } = options;\n    if (timeout && !expire) {\n      expire = Date.now() + timeout;\n    }\n    const clientCore = new FetchClient(undefined, baseUrl);\n    const deviceRegistration = new DeviceRegistrationService(clientCore);\n    let client;\n    try {\n      const { data } = await deviceRegistration.bootstrap(deviceId, { basicAuthToken });\n      const { username, password, tenantId } = data;\n      const auth = new BasicAuth({ user: username, tenant: tenantId, password });\n      client = new Client(auth, baseUrl);\n      client.core.tenant = tenantId;\n    } catch (error) {\n      const retry = (!expire || Date.now() < expire) && error.res.status === 404;\n      if (retry) {\n        return Client.deviceBootstrap(Object.assign({ expire }, options));\n      } else {\n        throw error;\n      }\n    }\n    return client;\n  }\n\n  /**\n   * Retrieves microservice credentials for the subscribed tenants\n   * using provided bootstrap credentials\n   *\n   * **Example**\n   * ```typescript\n   *\n   * (async () => {\n   *  const subscriptions = await Client.getMicroserviceSubscriptions({\n   *    tenant: process.env.C8Y_BOOTSTRAP_TENANT,\n   *    user: process.env.C8Y_BOOTSTRAP_USER,\n   *    password: process.env.C8Y_BOOTSTRAP_PASSWORD\n   *  }, process.env.C8Y_BASEURL);\n   *\n   *  const clients = subscriptions.map(subscription => new Client(new BasicAuth(subscription), process.env.C8Y_BASEURL));\n   *  // you have access to the client api now\n   *  const promiseArray = clients.map(client => client.options.tenant.detail({\n   *    category: process.env.APPLICATION_KEY,\n   *    key: 'someSetting'\n   *  }));\n   * })();\n   * ```\n   */\n  static async getMicroserviceSubscriptions(\n    bootstrapCredentials: ICredentials,\n    baseUrl: string\n  ): Promise<ICredentials[]> {\n    const microserviceSubscriptionsEndpoint = '/application/currentApplication/subscriptions';\n    const clientCore = new FetchClient(new BasicAuth(bootstrapCredentials), baseUrl);\n    const res = await clientCore.fetch(microserviceSubscriptionsEndpoint);\n    const { users }: IMicroserviceSubscriptionsResponse = await res.json();\n    return users.map(({ tenant, name, password }) => {\n      return {\n        tenant,\n        user: name,\n        password\n      } as ICredentials;\n    });\n  }\n\n  /**\n   * Performs the OAuth Internal login.\n   *\n   * If the parameter `bearerAuth` is set to true (default), the `/tenant/oauth/token` endpoint is called and a string containing the token returned.\n   *\n   * If the parameter `bearerAuth` is set to false, the `/tenant/oauth` endpoint is called and a Cookie should be set and the response returned.\n   * The response can be used in none browser environments to extract the `set-cookie` header from it.\n   *\n   * **Example**\n   * ```typescript\n   *\n   * (async () => {\n   *  const client = await Client.loginViaOAuthInternal({\n   *    tenant: process.env.C8Y_BOOTSTRAP_TENANT,\n   *    user: process.env.C8Y_BOOTSTRAP_USER,\n   *    password: process.env.C8Y_BOOTSTRAP_PASSWORD\n   *  }, true, process.env.C8Y_BASEURL);\n   *\n   *  // you have access to the client api now\n   *  const option = client.options.tenant.detail({\n   *    category: process.env.APPLICATION_KEY,\n   *    key: 'someSetting'\n   *  });\n   * })();\n   * ```\n   */\n  static async loginViaOAuthInternal(\n    credentials: ICredentials,\n    bearerAuth?: true,\n    baseUrl?: string\n  ): Promise<string>;\n  static async loginViaOAuthInternal(\n    credentials: ICredentials,\n    bearerAuth: false,\n    baseUrl?: string\n  ): Promise<IFetchResponse>;\n  static async loginViaOAuthInternal(\n    credentials: ICredentials,\n    bearerAuth = true,\n    baseUrl?: string\n  ): Promise<string | IFetchResponse> {\n    const auth = new BasicAuth(credentials);\n    const clientCore = new FetchClient(auth, baseUrl);\n    let url = '/tenant/oauth';\n    if (bearerAuth) {\n      url += `/token`;\n    }\n    if (credentials.tenant) {\n      url += `?tenant_id=${credentials.tenant}`;\n    }\n    const params = new URLSearchParams({\n      grant_type: 'PASSWORD',\n      username: credentials.user,\n      password: credentials.password,\n      tfa_code: credentials.tfa\n    });\n    const res = await clientCore.fetch(url, {\n      method: 'POST',\n      body: params.toString(),\n      headers: {\n        'content-type': 'application/x-www-form-urlencoded;charset=UTF-8'\n      }\n    });\n    if (res.status !== 200) {\n      throw { res };\n    }\n\n    if (bearerAuth) {\n      const body = await res.json();\n\n      return body['access_token'];\n    }\n\n    return res;\n  }\n\n  private static async getCurrentTenant(fetchClient: FetchClient): Promise<string> {\n    const tenantService = new TenantService(fetchClient);\n    const { data: tenant } = await tenantService.current();\n    return tenant.name;\n  }\n\n  alarm: AlarmService;\n  application: ApplicationService;\n  audit: AuditService;\n  core: FetchClient;\n  deviceRegistration: DeviceRegistrationService;\n  deviceRegistrationBulk: DeviceRegistrationBulkService;\n  event: EventService;\n  inventory: InventoryService;\n  inventoryRole: InventoryRoleService;\n  inventoryBinary: InventoryBinaryService;\n  measurement: MeasurementService;\n  operation: OperationService;\n  operationBulk: OperationBulkService;\n  options: {\n    security: TenantSecurityOptionsService;\n    system: SystemOptionsService;\n    login: TenantLoginOptionsService;\n    tenant: TenantOptionsService;\n  };\n  realtime: Realtime;\n  role: InventoryRoleService;\n  tenant: TenantService;\n  user: UserService;\n  userGroup: UserGroupService;\n  userRole: UserRoleService;\n  identity: IdentityService;\n  smartGroups: SmartGroupsService;\n  smartRules: SmartRulesService;\n\n  /**\n   * Initializes a new Client, which allows to request data from the API. Differently\n   * to Client.authenticate([...]) it needs a tenant given and does not verify if the\n   * login is correct.\n   *\n   * **Example**\n   * ```typescript\n   *\n   * const auth = new BasicAuth({\n   *   user: 'youruser',\n   *   password: 'yourpassword',\n   *   tenant: 'acme'\n   * }); // use CookieAuth() if your platform uses oauth (only in browser!)\n   *\n   * const baseUrl = 'https://acme.cumulocity.com';\n   * const client = new Client(auth, baseUrl);\n   * (async () => {\n   *   const { data, paging, res }); =  await client.inventory.list({ pageSize: 100 });\n   * })();\n   * ```\n   *\n   * @param auth The Authentication strategy to use (e.g. new BasicAuth())\n   * @param baseUrl The URL to request (optional in browser, mandatory in node)\n   */\n  constructor(auth: IAuthentication, baseUrl?: string) {\n    const client = new FetchClient(auth, baseUrl);\n    this.realtime = new Realtime(client);\n    this.alarm = new AlarmService(client, this.realtime);\n    this.application = new ApplicationService(client, this.realtime);\n    this.audit = new AuditService(client);\n    this.core = client;\n    this.deviceRegistration = new DeviceRegistrationService(client);\n    this.deviceRegistrationBulk = new DeviceRegistrationBulkService(client);\n    this.event = new EventService(client, this.realtime);\n    this.inventory = new InventoryService(client, this.realtime);\n    this.inventoryBinary = new InventoryBinaryService(client);\n    this.inventoryRole = new InventoryRoleService(client);\n    this.measurement = new MeasurementService(client, this.realtime);\n    this.operation = new OperationService(client);\n    this.operationBulk = new OperationBulkService(client);\n    this.options = {\n      security: new TenantSecurityOptionsService(client),\n      system: new SystemOptionsService(client),\n      login: new TenantLoginOptionsService(client),\n      tenant: new TenantOptionsService(client)\n    };\n    this.role = new InventoryRoleService(client);\n    this.tenant = new TenantService(client);\n    this.user = new UserService(client);\n    this.userGroup = new UserGroupService(client);\n    this.userRole = new UserRoleService(client);\n    this.identity = new IdentityService(client);\n    this.smartGroups = new SmartGroupsService(client);\n    this.smartRules = new SmartRulesService(client);\n  }\n\n  /**\n   * Allows to change the current Authentication\n   * @param auth The new Authentication information.\n   */\n  setAuth(auth: IAuthentication) {\n    this.core.setAuth(auth);\n    this.realtime.disconnect();\n  }\n}\n"],"names":["Paging","constructor","service","statistics","filter","this","currentPage","nextPage","prevPage","pageSize","totalPages","next","list","getFilter","prev","goto","page","Object","assign","Service","client","realtime","cache","Map","prototype","getPrototypeOf","forEach","method","hasOwnProperty","defineProperty","get","url","listUrl","res","yield","fetch","changeFetchOptions","headers","accept","params","json","data","propertyName","paging","getPaging","detail","entityOrId","getDetailUrl","create","entity","body","JSON","stringify","onBeforeCreate","content-type","update","onBeforeUpdate","delete","obj","id","objWithId","options","_url","getUrl","baseUrl","replace","getEntityId","init","fullUrl","handleErrorStatusCodes","response","status","let","ex","text","mimeType","type","getIdString","reference","String","getCurrentPageFromLink","link","matches","match","parseInt","global","self","__self__","F","DOMException","viewClasses","isArrayBufferView","exports","support","Symbol","Blob","e","normalizeName","name","test","TypeError","toLowerCase","normalizeValue","value","iteratorFor","items","iterator","shift","done","undefined","Headers","map","append","Array","isArray","header","getOwnPropertyNames","consumed","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","result","onerror","error","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","buf","view","slice","Uint8Array","byteLength","set","buffer","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","toString","DataView","_bodyArrayBuffer","ArrayBuffer","call","rejected","Error","arrayBuffer","then","readAsText","chars","length","i","fromCharCode","join","formData","decode","parse","isView","indexOf","oldValue","has","callback","thisArg","keys","push","values","entries","methods","Request","input","upcased","credentials","mode","signal","toUpperCase","referrer","form","trim","split","bytes","decodeURIComponent","Response","bodyInit","ok","statusText","clone","redirectStatuses","redirect","RangeError","location","err","message","stack","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","rawHeaders","getAllResponseHeaders","line","parts","key","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","ponyfill","ctx","default","module","auths","WeakMap","FetchClient","authOrBaseUrl","tenant","defaultHeaders","setAuth","resolveServerUrl","auth","fetchFn","window","getFetchOptions","optionsWithAdjustedBody","adjustOptionsForFormData","paramPart","k","vals","encodedKey","encodeURIComponent","v","clonedOptions","UseXBasic","getCometdHandshake","config","startsWith","protocol","host","E","code","btoa$1","_btoa","p1","btoa","block","charCode","str","output","idx","charAt","charCodeAt","secrets","BasicAuth","updateCredentials","user","password","token","tfa","secret","xsrfToken","getCookieValue","Authorization","X-XSRF-TOKEN","tfatoken","KEY","ext","logout","document","cookie","pop","BearerAuth","CookieAuth","logoutUrl","MicroserviceClientRequestAuth","authTokenFromCookie","authTokenFromHeader","authorization","NodeJSCookieAuth","cookieResponse","super","setCookiesHeader","Severity","QueriesUtil","operatorFns","__not","operand","buildQueryFilter","__and","__or","__eq","contextKey","quoteString","__gt","__ge","__lt","__le","__in","stmts","op","glue","__bygroupid","__has","__useFilterQueryString","query","_a","queryString","substring","buildQuery","q","__filter","orderBy","buildQueryOrderby","__orderby","queryFilter","_queryKey","_glueType","queryKey","glueType","qFilter","_q","queryOrderbys","o","addAndFilter","addFilter","addOrFilter","operator","oldFilter","newFilter","skipEmptyObjects","prependOrderbys","orderbys","addOrderbys","appendOrderbys","how","oldOrderbys","newOrderbys","newQuery","isEmptyObject","extractAndMergeOrderBys","queries","orderByQuery","s","escapeSingleQuote","objs","MetaChannel","Scheduler","Utils","TransportRegistry","Transport","RequestTransport","LongPollingTransport","CallbackPollingTransport","WebSocketTransport","_z85EncodeTable","_z85DecodeTable","_ids","_tasks","register","funktion","unregister","setTimeout","delay","clearTimeout","isString","inArray","element","array","_types","_transports","getTransportTypes","findTransportTypes","version","crossDomain","negotiateTransport","types","j","transport","add","index","existing","splice","find","remove","clear","reset","_type","_cometd","registered","cometd","unregistered","_debug","apply","arguments","_mixin","getConfiguration","getAdvice","convertToMessages","x","getType","getURL","setURL","envelope","metaConnect","derive","baseObject","CometD","_transport","_handshakeProps","_handshakeCallback","_handleMessages","_handleFailure","_scheduler","_name","_crossDomain","_status","_messageId","_clientId","_batch","_messageQueue","_internalBatch","_listenerId","_listeners","_backoff","_scheduledSend","_extensions","_advice","_callbacks","_remoteCalls","_reestablish","_connected","_unconnectTime","_handshakeMessages","_metaConnect","_config","useWorkerScheduler","stickyReconnect","connectTimeout","maxConnections","backoffIncrement","maxBackoff","logLevel","maxNetworkDelay","requestHeaders","appendMessageTypeToURL","autoBatch","urls","maxURILength","advice","timeout","interval","reconnect","maxInterval","_fieldValue","object","_isString","_isFunction","_zeroPad","Math","pow","_log","level","args","now","console","logger","Date","getHours","getMinutes","getSeconds","getMilliseconds","_splitURL","RegExp","exec","_configure","configuration","worker","urlParts","hostAndPort","uri","afterURI","_isCrossDomain","_info","lastSegmentIndex","uriSegments","Worker","URL","onmessage","cmd","postMessage","lastIndexOf","blobURL","createObjectURL","_removeListener","subscription","subscriptions","channel","listener","_removeSubscription","_clearSubscriptions","_setStatus","newStatus","_isDisconnected","_nextMessageId","_applyExtension","scope","outgoing","handler","onExtensionException","xx","_notify","onListenerException","_notifyListeners","channelParts","last","channelPart","_cancelDelayedSend","_delayedSend","operation","time","_send","messages","extraPath","messageId","clientId","extension","sync","onSuccess","rcvdMessages","onFailure","conduit","failure","getTransport","connectionType","_queueSend","_resetBackoff","_flushBatch","_delayedConnect","bayeuxMessage","_updateAdvice","newAdvice","_disconnect","reason","_notifyTransportException","oldTransport","newTransport","onTransportException","_handshake","handshakeProps","handshakeCallback","transportTypes","minimumVersion","supportedConnectionTypes","_putCallback","_warn","_notifyCallback","onCallbackException","_handleCallback","_getCallback","_handleRemoteCall","context","_handleTransportFailure","failureInfo","action","_failHandshake","onTransportFailure","_matchMetaConnect","connect","_failConnect","_failDisconnect","_failSubscribe","_failUnsubscribe","_failMessage","_receive","incoming","_handshakeResponse","successful","cause","reestablish","_hasSubscriptions","_resolveScopedCallback","delegate","_addListener","isListener","deep","target","objects","prop","source","propName","targ","failureHandler","oldTransportType","transports","getTransportRegistry","getBackoffPeriod","newTransportType","increaseBackoffPeriod","getTime","resetBackoffPeriod","receive","failureMessage","registerTransport","unregisterTransport","unregisterTransports","findTransport","configure","handshake","disconnect","disconnectProps","disconnectCallback","startBatch","endBatch","batch","addListener","removeListener","clearListeners","subscribe","subscribeProps","subscribeCallback","unsubscribe","unsubscribeProps","unsubscribeCallback","resubscribe","clearSubscriptions","publish","content","publishProps","publishCallback","publishBinary","meta","binary","remoteCall","callProps","remoteCallBinary","getStatus","isDisconnected","setBackoffIncrement","period","getBackoffIncrement","setLogLevel","registerExtension","unregisterExtension","getExtension","getName","getClientId","WebSocket","_super","_self","_requestIds","_metaConnectRequest","_requests","_envelopes","_transportSend","maxDelay","transportSend","expired","errorMessage","httpCode","xhrStatus","abortXHR","complete","requestId","_complete","success","nextEnvelope","nextRequest","envelopeAndRequest","newEnvelope","newRequest","concat","transportSuccess","responses","transportFailure","metaConnectRequest","state","UNSENT","_supportsCrossDomain","newXMLHttpRequest","xhrSend","packet","_copyContext","headerName","onError","sameStack","received","exception","jsonp","_failTransportFn","jsonpSend","head","getElementsByTagName","script","createElement","callbackName","removeChild","src","async","appendChild","start","lengths","urlLength","encodeURI","maxLength","envelopeToSend","end","begin","_webSocketSupported","_webSocketConnected","_stickyReconnect","_context","_connecting","_successCallback","_forceClose","event","webSocketClose","onClose","_sameContext","_storeEnvelope","messageIds","envelopes","_webSocketSend","webSocket","timeouts","onclose","connectTimer","onopen","onOpen","wsMessage","onMessage","_notifySuccess","fn","_notifyFailure","close","removed","ids","websocketCode","websocketEnabled","Z85","encode","remainder","padding","isPadding","getUint8","divisor","floor","string","p","charIdx","byteIdx","setUint8","lib","Realtime","metaHandshake","msg","HANDSHAKE","checkConnection","EventService","browser","EventBinaryService","upload","file","download","InventoryBinaryService","managedObject","fileName","fileType","File","managedObjectOrId","createWithProgress","onProgress","bodyHeaders","getHeaders","xhrBody","getBuffer","getXMLHttpResponse","rej","getIdFromUrl","regexp","ChildType","InventoryService","inventoriesQueryParamName","devicesQueryParamName","queriesUtil","listQuery","listQueryDevices","childAdditionsList","parentReference","listChildren","ADDITIONS","childAdditionsCreate","createChild","childAdditionsAdd","childReference","addChild","childAdditionsRemove","childAssetsList","ASSETS","childAssetsCreate","childAssetsAdd","childAssetsBulkAdd","addChildBulk","childAssetsRemove","childDevicesList","DEVICES","childDevicesCreate","childDevicesAdd","childDevicesRemove","getSupportedMeasurements","getSupportedMeasurementDetails","getSupportedSeries","getMeasurementsAndSeries","supportedMeasurements","supportedSeries","all","sortedSupportedMeasurements","sort","a","b","fragment","m","series","assetKPIsList","listKPIs","getChildrenUrl","lastUpdated","getChildUrl","childId","references","ref","pagingFilter","childReferenceArray","c8y_SupportedMeasurements","c8y_SupportedSeries","MeasurementService","listSeries","sourceId","aggregationType","AlarmService","AlarmStatus","OperationService","OperationBulkService","operationOrId","OperationBulkStatus","OperationBulkGeneralStatus","OperationStatus","TenantService","currentTenantUrl","fetchOptions","current","enableSupportUser","disableSupportUser","currentTenantType","tenantData","customProperties","tenantType","getTfaSettings","subscribeApplication","application","applicationId","unsubscribeApplication","TenantStatus","TfaStrategy","UserInventoryRoleService","userUrl","currenUserUrl","UserService","currentUserUrl","passwordResetUrl","currentUserPhoneUrl","verifyTFACodeUrl","totpCurrentUserURL","verifyTOTPCodeUrl","activateTOTPCodeUrl","revokeTOTPSecretUrl","newsletterEmailsUrl","currentUserPasswordUrl","revokeAllTokensUrl","inventoryAssignment","Accept","currentWithEffectiveRoles","updateCurrent","sendPasswordResetMail","email","tenantId","resetPassword","newPassword","verifyTFACode","pin","verifyTotpCode","activateTotp","isActive","getActivityTotp","generateTotpSecret","totpRevokeSecret","savePhoneNumber","phoneNumber","phone","getNewsletterEmails","changeUserPassword","currentUserPassword","changeUserPasswordUrl","changeCurrentUserPassword","revokeTokens","hasRole","roleId","hasRoleInUser","hasRoleInGroups","hasAllRoles","roleIds","every","hasAnyRole","some","hasAnyGlobalRole","globalRoleIds","globalRoleId","hasGlobalRoleInUser","isDeviceUser","userName","getId","effectiveRoles","hasRoleInReferences","roles","groups","groupRef","group","role","gR","PasswordStrength","ApplicationBinaryService","applicationOrId","uploadParamsOverride","createBinaryRequestBody","uploadWithProgressXhr","binaryOrId","listPlugins","addPlugin","pluginName","pluginFile","bufferOrStream","Buffer","from","removePlugin","updateFiles","files","contents","path","downloadArchive","binaryId","uploadFileName","bodyFileProperty","requestBody","ApplicationType","ApplicationService","listVersions","applicationVersions","appDetail","listByName","listByTenant","tenantOrName","tenantService","tenantName","listByOwner","listByUser","userOrId","userService","userId","reactivateArchive","appId","getHref","EXTERNAL","externalUrl","public","contextPath","isAvailable","dropOverwrittenApps","noPaging","availableApp","isMatch","getStatusDetails","getInstanceNames","appStatusDetails","instanceNames","c8y_Status","instances","getInstanceLog","instanceName","updateApplicationConfig","app","currentConfig","newConfig","updatedConfigApp","getAppManifest","date","storeAppManifest","manifestJSON","setPackageVersionTag","tags","getManifestOfContextPath","deleteVersionPackage","updateApplicationAvailability","availability","el","includes","InstanceStatus","BillingMode","Isolation","ApplicationAvailability","SystemOptionsService","option","category","TenantOptionsService","securityOptionsCategories","securityOptionsListUrl","systemOptions","encodedCategory","TenantSecurityOptionsService","tenantSecurityOption","TenantLoginOptionsService","entityIdentityOrId","listForCurrentTenant","listForManagement","management","save","TenantLoginOptionType","GrantType","UserManagementSource","AuditService","AuditRecordType","ChangeType","InventoryRoleService","DeviceRegistrationStatus","DeviceRegistrationService","securityToken","getSecurityToken","payload","ACCEPTED","acceptAll","limit","bootstrap","basicAuth","basicAuthToken","pass","noIdEntity","DeviceRegistrationBulkService","inputFile","csv","DeviceRegistrationSecurityMode","UserRoleService","UserGroupService","addRoleToGroup","childEntityOrSelf","ROLES","removeRoleFromGroup","addUserToGroup","USERS","removeUserFromGroup","getSelf","userGroupOrId","getChildReferenceAsBody","childSelf","IdentityService","managedObjectId","getExternalIdsOfGlobalIdUrl","identity","getExternalIdUrl","externalId","TrustedCertificateService","proofOfPossessionUrl","regeneratePoPVerificationCode","verifySignedVerificationCode","proofOfPossessionSignedVerificationCode","fingerprint","SmartGroupsService","SMART_GROUP_TYPE","SMART_GROUP_FRAGMENT_TYPE","DEVICE_GROUP_FRAGMENT_TYPE","DEVICE_GROUP_TYPE","DEVICE_SUBGROUP_TYPE","COLUMNS_CONFIG_FRAGMENT","FILTER_CONFIG_FRAGMENT","QUERY_STRING_FRAGMENT","SMART_GROUPS_V2_MICROSERVICE_APP_NAME","SMART_GROUPS_V2_MICROSERVICE_BASE_PATH","SMART_GROUPS_V2_MICROSERVICE_ENDPOINT_PATH","applicationService","isInstalled","isSmartGroupsV2MicroserviceInstalled","smartGroup","deviceQueryString","configurableColumns","filterConfig","createSmartGroupV2","mo","groupMo","withChildren","isSmartGroupV2","updateSmartGroupV2","partialMo","__rest","removeSmartGroupV2","isSmartGroup","hasSmartGroupFragmentType","isSmartGroupType","hasDeviceGroupFragmentType","isGroupOrSubgroup","partialUrl","SmartRulesService","rulesUrl","unupdatableFields","isMicroserviceAvailable","microserviceAvailable","microserviceName","listByContext","contextRulesUrl","rules","bulkDeactivateEnabledSources","rule","entitiesOrIdsList","newEnabledSources","enabledSources","disableEnabledSources","ruleCopy","getSmartRulesUrl","removeUnclonableFields","entityOrIdList","getListOfStringIds","contextMoId","c8y_Context","fieldsToRemove","f","Client","authenticate","clientCore","getCurrentTenant","core","authenticateViaOAuthInternal","loginViaOAuthInternal","authenticateViaOAuthInternalCookie","deviceBootstrap","deviceId","expire","deviceRegistration","username","getMicroserviceSubscriptions","bootstrapCredentials","users","bearerAuth","grant_type","tfa_code","fetchClient","alarm","audit","deviceRegistrationBulk","inventory","inventoryBinary","inventoryRole","measurement","operationBulk","security","system","login","userGroup","userRole","smartGroups","smartRules"],"mappings":"0hBAWaA,EA4BXC,YAAYC,EAAyBC,EAAiBC,GACpDC,KAAKD,OAASA,EACdC,KAAKH,QAAUA,EACfG,KAAKC,YAAcH,EAAWG,YAC9BD,KAAKE,SAAWJ,EAAWI,SAC3BF,KAAKG,SAAWL,EAAWK,SAC3BH,KAAKI,SAAWN,EAAWM,SAC3BJ,KAAKK,WAAaP,EAAWO,UAC9B,CAMKC,KAAKP,EAAiB,4CAC1B,OAAOC,KAAKO,KAAKP,KAAKQ,UAAUT,EAAQC,KAAKE,QAAQ,CAAC,EACvD,CAAA,CAMKO,KAAKV,EAAiB,4CAC1B,OAAOC,KAAKO,KAAKP,KAAKQ,UAAUT,EAAQC,KAAKG,QAAQ,CAAC,EACvD,CAAA,CAQKI,KAAKR,EAAiB,4CAC1B,OAAOC,KAAKH,QAAQU,KAAKR,CAAM,EAChC,CAAA,CAOKW,KAAKC,EAAcZ,EAAiB,4CACxC,OAAOC,KAAKO,KAAKP,KAAKQ,UAAUT,EAAQY,CAAI,CAAC,EAC9C,CAAA,CAEOH,UAAUT,EAAgBY,GAChC,OAAOC,OAAOC,OAAOd,EAAQC,KAAKD,OAAQ,CAAEE,YAAaU,CAAI,CAAE,CAChE,CACF,0SC7EqBG,EAOpBlB,YAAsBmB,EAAgCC,GAAhChB,KAAMe,OAANA,EAAgCf,KAAQgB,SAARA,EAF9ChB,KAAAiB,MAAQ,IAAIC,IAIlB,MAAMC,EAAYP,OAAOQ,eAAepB,IAAI,EADtB,CAAC,OAAQ,SAAU,SAAU,SAAU,UAE/CqB,QAAQC,IACfH,EAAUI,eAAeD,CAAM,GAClCV,OAAOY,eAAexB,KAAMsB,EAAQ,CAClCG,OAGD,CAAA,CAEL,CAAC,CACF,CAEKlB,KAAKR,EAAiB,4CAC1B,IACM2B,EAAM1B,KAAK2B,QACXC,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK1B,KAAK+B,mBAAmB,CAAEC,QAF5C,CAAEC,OAAQ,oBAE2CC,OAAQnC,CAAM,EAAI2B,CAAG,CAAC,EACrFS,EAAON,MAAMD,EAAIO,OAGvB,MAAO,CAAEP,IAAAA,EAAKQ,KAFDpC,KAAKqC,aAAeF,EAAKnC,KAAKqC,cAAgBF,EAEvCG,OADLtC,KAAKuC,UAAUJ,EAAMpC,CAAM,GAE3C,CAAA,CAEeyC,OACdC,EACA1C,EAAiB,4CAEjB,IACM2B,EAAM1B,KAAK0C,aAAaD,CAAU,EAClCb,EAAMC,MAAM7B,KAAK8B,MACrBJ,EACA1B,KAAK+B,mBAAmB,CAAEC,QAJZ,CAAEC,OAAQ,oBAIWC,OAAatB,OAAAC,OAAA,GAAAd,CAAM,CAAI,EAAE2B,CAAG,CAAC,EAE5DU,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAEeO,OAAOC,2CACrB,IAAMlB,EAAM1B,KAAK2B,QAEXkB,EAAOC,KAAKC,UAAU/C,KAAKgD,eAAeJ,CAAM,CAAC,EAEjDhB,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK1B,KAAK+B,mBAAmB,CAAET,OAH7C,OAGqDuB,KAAAA,EAAMb,QAD1D,CAAEiB,eAAgB,mBAAoBhB,OAAQ,kBAAkB,CACC,EAAIP,CAAG,CAAC,EACnFU,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAEec,OAAON,2CACrB,IAAMlB,EAAM1B,KAAK0C,aAAaE,CAAM,EAE9BC,EAAOC,KAAKC,UAAU/C,KAAKmD,eAAeP,CAAM,CAAC,EAEjDhB,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK1B,KAAK+B,mBAAmB,CAAET,OAH7C,MAGqDuB,KAAAA,EAAMb,QAD1D,CAAEiB,eAAgB,mBAAoBhB,OAAQ,kBAAkB,CACC,EAAIP,CAAG,CAAC,EACnFU,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAEegB,OACdX,EACAP,2CAEA,IACMR,EAAM1B,KAAK0C,aAAaD,CAAU,EAExC,MAAO,CAAEb,IADGC,MAAM7B,KAAK8B,MAAMJ,EAAK1B,KAAK+B,mBAAmB,CAAET,OAF7C,SAEqDY,OAAAA,GAAUR,CAAG,CAAC,EACpEU,KAAM,MACrB,CAAA,CAESY,eAAeK,GAEvB,OADA,OAAOA,EAAIC,GACJD,CACR,CAESF,eAAeI,GACvB,OAAOA,CACR,CAESxB,mBAAmByB,EAAcC,EAAAA,GACzC,OAAOD,CACR,CAESE,OAAOhC,EAAM,IAGrB,OAFgB1B,KAAK2D,QAAQC,QAAQ,OAAQ,EAAE,EAExC,IADYlC,EAAIkC,QAAQ,OAAQ,EAAE,CAE1C,CAESC,YAAYpB,GACpB,OAAIA,MAAAA,EACK,GAGiB,UAAtB,OAAOA,EACFzC,KAAK6D,YAAYpB,EAAWa,EAAE,EAGhC,GAAGb,CACX,CAESC,aAAaD,GACfa,EAAKtD,KAAK6D,YAAYpB,CAAU,EACtC,OAAUzC,KAAK2B,QAAR,IAAmB2B,CAC3B,CAEexB,MAAMJ,EAAaoC,2CACjC,IAAMC,EAAU/D,KAAK0D,OAAOhC,CAAG,EACzBE,EAAsBC,MAAM7B,KAAKe,OAAOe,MAAMiC,EAASD,CAAI,EACjE,OAAOjC,MAAM7B,KAAKgE,uBAAuBpC,CAAG,EAC7C,CAAA,CAWeoC,uBAAuBC,2CACrC,GAAuB,KAAnBA,EAASC,OAAe,CAC1BC,IAAI/B,EAAO,KACX,IACEA,EAAOP,MAAMoC,EAAS9B,MAOvB,CANC,MAAOiC,GACP,IACEhC,EAAOP,MAAMoC,EAASI,MAGvB,CAFC,MAAOD,IAGV,CACD,KAAM,CAAExC,IAAKqC,EAAU7B,KAAAA,EACxB,CACD,OAAO6B,EACR,CAAA,CAESK,SAASC,GACjB,4CAA6CA,QAC9C,CAESC,YAAYC,GACpBN,IAAIb,EAMJ,OAJEA,EADuB,UAArB,OAAOmB,EACJA,EAAUnB,GAEVmB,EAEAC,OAAOpB,CAAE,CACjB,CAESf,UAAUJ,EAAWpC,GAC7B,OAAIoC,EAAKrC,YACDA,EAAUc,OAAAC,OAAAD,OAAAC,OAAA,GACXsB,EAAKrC,UAAU,EAAA,CAClBI,SAAUF,KAAK2E,uBAAuBxC,EAAK7B,IAAI,EAC/CH,SAAUH,KAAK2E,uBAAuBxC,EAAK1B,IAAI,CAAC,CAAA,EAE3C,IAAId,EAAcK,KAAMF,EAAYC,CAAM,GAE5C,IACR,CAES4E,uBAAuBC,EAAO,IAChCC,EAAUD,EAAKE,MAAM,yBAAyB,EACpD,OAAOD,GAAWE,SAASF,EAAQ,GAAI,EAAE,CAC1C,CACF,yOCvLD,IAAIG,EAAyB,aAAhB,OAAOC,KAAuBA,KAAOjF,EAC9CkF,GAKJC,EAAEhE,UAAY6D,EACP,IAAIG,GALX,SAASA,IACTnF,KAAK8B,MAAQ,CAAA,EACb9B,KAAKoF,aAAeJ,EAAOI,YAC3B,CAIA,IA2BQC,EAYAC,EAvCEL,EAmhBPC,EAjhByBK,EAghBzB,GA9gBGC,EACY,oBAAqBP,EADjCO,EAEQ,WAAYP,GAAQ,aAAcQ,OAF1CD,EAIA,eAAgBP,GAChB,SAAUA,GACV,WACE,IAEE,OADA,IAAIS,KACG,CAAA,CAGR,CAFC,MAAOC,GACP,MAAO,CAAA,CACR,CACF,EAAG,EAbJH,EAcQ,aAAcP,EAdtBO,EAeW,gBAAiBP,EA2BhC,SAASW,EAAcC,GAIrB,GAHoB,UAAhB,OAAOA,IACTA,EAAOnB,OAAOmB,CAAI,GAEhB,4BAA4BC,KAAKD,CAAI,EACvC,MAAM,IAAIE,UAAU,wCAAwC,EAE9D,OAAOF,EAAKG,YAAa,CAC1B,CAED,SAASC,EAAeC,GAItB,OAFEA,EADmB,UAAjB,OAAOA,EACDxB,OAAOwB,CAAK,EAEfA,CACR,CAGD,SAASC,EAAYC,GACnB,IAAIC,EAAW,CACb/F,KAAM,WACJ,IAAI4F,EAAQE,EAAME,QAClB,MAAO,CAACC,KAAgBC,KAAAA,IAAVN,EAAqBA,MAAOA,CAAK,CAChD,CACP,EAQI,OANIV,IACFa,EAASZ,OAAOY,UAAY,WAC1B,OAAOA,CACf,GAGWA,CACR,CAED,SAASI,EAAQzE,GACfhC,KAAK0G,IAAM,GAEP1E,aAAmByE,EACrBzE,EAAQX,QAAQ,SAAS6E,EAAOL,GAC9B7F,KAAK2G,OAAOd,EAAMK,CAAK,CACxB,EAAElG,IAAI,EACE4G,MAAMC,QAAQ7E,CAAO,EAC9BA,EAAQX,QAAQ,SAASyF,GACvB9G,KAAK2G,OAAOG,EAAO,GAAIA,EAAO,EAAE,CACjC,EAAE9G,IAAI,EACEgC,GACTpB,OAAOmG,oBAAoB/E,CAAO,EAAEX,QAAQ,SAASwE,GACnD7F,KAAK2G,OAAOd,EAAM7D,EAAQ6D,EAAK,CAChC,EAAE7F,IAAI,CAEV,CA8DD,SAASgH,EAASnE,GAChB,GAAIA,EAAKoE,SACP,OAAOC,QAAQC,OAAO,IAAIpB,UAAU,cAAc,CAAC,EAErDlD,EAAKoE,SAAW,CAAA,CACjB,CAED,SAASG,EAAgBC,GACvB,OAAO,IAAIH,QAAQ,SAASI,EAASH,GACnCE,EAAOE,OAAS,WACdD,EAAQD,EAAOG,MAAM,CAC7B,EACMH,EAAOI,QAAU,WACfN,EAAOE,EAAOK,KAAK,CAC3B,CACA,CAAK,CACF,CAED,SAASC,EAAsBC,GAC7B,IAAIP,EAAS,IAAIQ,WACbC,EAAUV,EAAgBC,CAAM,EAEpC,OADAA,EAAOU,kBAAkBH,CAAI,EACtBE,CACR,CAmBD,SAASE,EAAYC,GACnB,IAGMC,EAHN,OAAID,EAAIE,MACCF,EAAIE,MAAM,CAAC,IAEdD,EAAO,IAAIE,WAAWH,EAAII,UAAU,GACnCC,IAAI,IAAIF,WAAWH,CAAG,CAAC,EACrBC,EAAKK,OAEf,CAED,SAASC,IA0FP,OAzFAxI,KAAKiH,SAAW,CAAA,EAEhBjH,KAAKyI,UAAY,SAAS5F,GAhM5B,IAAoBQ,GAiMhBrD,KAAK0I,UAAY7F,GAGU,UAAhB,OAAOA,EAChB7C,KAAK2I,UAAY9F,EACR2C,GAAgBE,KAAKvE,UAAUyH,cAAc/F,CAAI,EAC1D7C,KAAK6I,UAAYhG,EACR2C,GAAoBsD,SAAS3H,UAAUyH,cAAc/F,CAAI,EAClE7C,KAAK+I,cAAgBlG,EACZ2C,GAAwBwD,gBAAgB7H,UAAUyH,cAAc/F,CAAI,EAC7E7C,KAAK2I,UAAY9F,EAAKoG,WACbzD,GAAuBA,IA5MlBnC,EA4M6CR,IA3MjDqG,SAAS/H,UAAUyH,cAAcvF,CAAG,GA4M9CrD,KAAKmJ,iBAAmBnB,EAAYnF,EAAK0F,MAAM,EAE/CvI,KAAK0I,UAAY,IAAIhD,KAAK,CAAC1F,KAAKmJ,iBAAiB,GACxC3D,IAAwB4D,YAAYjI,UAAUyH,cAAc/F,CAAI,GAAKyC,EAAkBzC,CAAI,GACpG7C,KAAKmJ,iBAAmBnB,EAAYnF,CAAI,EAExC7C,KAAK2I,UAAY9F,EAAOjC,OAAOO,UAAU8H,SAASI,KAAKxG,CAAI,EAhB3D7C,KAAK2I,UAAY,GAmBd3I,KAAKgC,QAAQP,IAAI,cAAc,IACd,UAAhB,OAAOoB,EACT7C,KAAKgC,QAAQsG,IAAI,eAAgB,0BAA0B,EAClDtI,KAAK6I,WAAa7I,KAAK6I,UAAUtE,KAC1CvE,KAAKgC,QAAQsG,IAAI,eAAgBtI,KAAK6I,UAAUtE,IAAI,EAC3CiB,GAAwBwD,gBAAgB7H,UAAUyH,cAAc/F,CAAI,GAC7E7C,KAAKgC,QAAQsG,IAAI,eAAgB,iDAAiD,EAG5F,EAEQ9C,IACFxF,KAAK4H,KAAO,WACV,IAAI0B,EAAWtC,EAAShH,IAAI,EAC5B,GAAIsJ,EACF,OAAOA,EAGT,GAAItJ,KAAK6I,UACP,OAAO3B,QAAQI,QAAQtH,KAAK6I,SAAS,EAChC,GAAI7I,KAAKmJ,iBACd,OAAOjC,QAAQI,QAAQ,IAAI5B,KAAK,CAAC1F,KAAKmJ,iBAAiB,CAAC,EACnD,GAAInJ,KAAK+I,cACd,MAAM,IAAIQ,MAAM,sCAAsC,EAEtD,OAAOrC,QAAQI,QAAQ,IAAI5B,KAAK,CAAC1F,KAAK2I,UAAU,CAAC,CAE3D,EAEM3I,KAAKwJ,YAAc,WACjB,OAAIxJ,KAAKmJ,iBACAnC,EAAShH,IAAI,GAAKkH,QAAQI,QAAQtH,KAAKmJ,gBAAgB,EAEvDnJ,KAAK4H,OAAO6B,KAAK9B,CAAqB,CAEvD,GAGI3H,KAAKqE,KAAO,WACV,IA1FEgD,EACAS,EAyFEwB,EAAWtC,EAAShH,IAAI,EAC5B,GAAIsJ,EACF,OAAOA,EAGT,GAAItJ,KAAK6I,UACP,OAjGkBjB,EAiGI5H,KAAK6I,UAhG3BxB,EAAS,IAAIQ,WACbC,EAAUV,EAAgBC,CAAM,EACpCA,EAAOqC,WAAW9B,CAAI,EACfE,EA8FE,GAAI9H,KAAKmJ,iBACd,OAAOjC,QAAQI,QA5FrB,SAA+BW,GAI7B,IAHA,IAAIC,EAAO,IAAIE,WAAWH,CAAG,EACzB0B,EAAQ,IAAI/C,MAAMsB,EAAK0B,MAAM,EAExBC,EAAI,EAAGA,EAAI3B,EAAK0B,OAAQC,CAAC,GAChCF,EAAME,GAAKnF,OAAOoF,aAAa5B,EAAK2B,EAAE,EAExC,OAAOF,EAAMI,KAAK,EAAE,CACrB,EAoFkD/J,KAAKmJ,gBAAgB,CAAC,EAC9D,GAAInJ,KAAK+I,cACd,MAAM,IAAIQ,MAAM,sCAAsC,EAEtD,OAAOrC,QAAQI,QAAQtH,KAAK2I,SAAS,CAE7C,EAEQnD,IACFxF,KAAKgK,SAAW,WACd,OAAOhK,KAAKqE,OAAOoF,KAAKQ,CAAM,CACtC,GAGIjK,KAAKmC,KAAO,WACV,OAAOnC,KAAKqE,KAAI,EAAGoF,KAAK3G,KAAKoH,KAAK,CACxC,EAEWlK,IACR,CApRGwF,IACEH,EAAc,CAChB,qBACA,sBACA,6BACA,sBACA,uBACA,sBACA,uBACA,wBACA,yBAGEC,EACF8D,YAAYe,QACZ,SAAS9G,GACP,OAAOA,GAAkE,CAAC,EAA5DgC,EAAY+E,QAAQxJ,OAAOO,UAAU8H,SAASI,KAAKhG,CAAG,CAAC,CAC7E,GAwDEoD,EAAQtF,UAAUwF,OAAS,SAASd,EAAMK,GACxCL,EAAOD,EAAcC,CAAI,EACzBK,EAAQD,EAAeC,CAAK,EAC5B,IAAImE,EAAWrK,KAAK0G,IAAIb,GACxB7F,KAAK0G,IAAIb,GAAQwE,EAAWA,EAAW,KAAOnE,EAAQA,CAC1D,EAEEO,EAAQtF,UAAkB,OAAI,SAAS0E,GACrC,OAAO7F,KAAK0G,IAAId,EAAcC,CAAI,EACtC,EAEEY,EAAQtF,UAAUM,IAAM,SAASoE,GAE/B,OADAA,EAAOD,EAAcC,CAAI,EAClB7F,KAAKsK,IAAIzE,CAAI,EAAI7F,KAAK0G,IAAIb,GAAQ,IAC7C,EAEEY,EAAQtF,UAAUmJ,IAAM,SAASzE,GAC/B,OAAO7F,KAAK0G,IAAInF,eAAeqE,EAAcC,CAAI,CAAC,CACtD,EAEEY,EAAQtF,UAAUmH,IAAM,SAASzC,EAAMK,GACrClG,KAAK0G,IAAId,EAAcC,CAAI,GAAKI,EAAeC,CAAK,CACxD,EAEEO,EAAQtF,UAAUE,QAAU,SAASkJ,EAAUC,GAC7C,IAAK,IAAI3E,KAAQ7F,KAAK0G,IAChB1G,KAAK0G,IAAInF,eAAesE,CAAI,GAC9B0E,EAASlB,KAAKmB,EAASxK,KAAK0G,IAAIb,GAAOA,EAAM7F,IAAI,CAGzD,EAEEyG,EAAQtF,UAAUsJ,KAAO,WACvB,IAAIrE,EAAQ,GAIZ,OAHApG,KAAKqB,QAAQ,SAAS6E,EAAOL,GAC3BO,EAAMsE,KAAK7E,CAAI,CACrB,CAAK,EACMM,EAAYC,CAAK,CAC5B,EAEEK,EAAQtF,UAAUwJ,OAAS,WACzB,IAAIvE,EAAQ,GAIZ,OAHApG,KAAKqB,QAAQ,SAAS6E,GACpBE,EAAMsE,KAAKxE,CAAK,CACtB,CAAK,EACMC,EAAYC,CAAK,CAC5B,EAEEK,EAAQtF,UAAUyJ,QAAU,WAC1B,IAAIxE,EAAQ,GAIZ,OAHApG,KAAKqB,QAAQ,SAAS6E,EAAOL,GAC3BO,EAAMsE,KAAK,CAAC7E,EAAMK,EAAM,CAC9B,CAAK,EACMC,EAAYC,CAAK,CAC5B,EAEMZ,IACFiB,EAAQtF,UAAUsE,OAAOY,UAAYI,EAAQtF,UAAUyJ,SAqJzD,IAAIC,EAAU,CAAC,SAAU,MAAO,OAAQ,UAAW,OAAQ,OAO3D,SAASC,EAAQC,EAAOvH,GAEtB,IANIwH,EAMAnI,GADJW,EAAUA,GAAW,IACFX,KAEnB,GAAIkI,aAAiBD,EAAS,CAC5B,GAAIC,EAAM9D,SACR,MAAM,IAAIlB,UAAU,cAAc,EAEpC/F,KAAK0B,IAAMqJ,EAAMrJ,IACjB1B,KAAKiL,YAAcF,EAAME,YACpBzH,EAAQxB,UACXhC,KAAKgC,QAAU,IAAIyE,EAAQsE,EAAM/I,OAAO,GAE1ChC,KAAKsB,OAASyJ,EAAMzJ,OACpBtB,KAAKkL,KAAOH,EAAMG,KAClBlL,KAAKmL,OAASJ,EAAMI,OACftI,GAA2B,MAAnBkI,EAAMrC,YACjB7F,EAAOkI,EAAMrC,UACbqC,EAAM9D,SAAW,CAAA,EAEzB,MACMjH,KAAK0B,IAAMgD,OAAOqG,CAAK,EAYzB,GATA/K,KAAKiL,YAAczH,EAAQyH,aAAejL,KAAKiL,aAAe,cAC1DzH,CAAAA,EAAQxB,SAAYhC,KAAKgC,UAC3BhC,KAAKgC,QAAU,IAAIyE,EAAQjD,EAAQxB,OAAO,GAE5ChC,KAAKsB,QAjCkBA,EAiCOkC,EAAQlC,QAAUtB,KAAKsB,QAAU,MAhC3D0J,EAAU1J,EAAO8J,cACa,CAAC,EAA5BP,EAAQT,QAAQY,CAAO,EAASA,EAAU1J,GAgCjDtB,KAAKkL,KAAO1H,EAAQ0H,MAAQlL,KAAKkL,MAAQ,KACzClL,KAAKmL,OAAS3H,EAAQ2H,QAAUnL,KAAKmL,OACrCnL,KAAKqL,SAAW,MAEK,QAAhBrL,KAAKsB,QAAoC,SAAhBtB,KAAKsB,SAAsBuB,EACvD,MAAM,IAAIkD,UAAU,2CAA2C,EAEjE/F,KAAKyI,UAAU5F,CAAI,CACpB,CAMD,SAASoH,EAAOpH,GACd,IAAIyI,EAAO,IAAIxC,SAYf,OAXAjG,EACG0I,KAAM,EACNC,MAAM,GAAG,EACTnK,QAAQ,SAASoK,GAChB,IAEM5F,EAFF4F,IAEE5F,GADA2F,EAAQC,EAAMD,MAAM,GAAG,GACVlF,MAAK,EAAG1C,QAAQ,MAAO,GAAG,EACvCsC,EAAQsF,EAAMzB,KAAK,GAAG,EAAEnG,QAAQ,MAAO,GAAG,EAC9C0H,EAAK3E,OAAO+E,mBAAmB7F,CAAI,EAAG6F,mBAAmBxF,CAAK,CAAC,EAEzE,CAAO,EACIoF,CACR,CAoBD,SAASK,EAASC,EAAUpI,GACrBA,EAAAA,GACO,GAGZxD,KAAKuE,KAAO,UACZvE,KAAKkE,OAA4BsC,KAAAA,IAAnBhD,EAAQU,OAAuB,IAAMV,EAAQU,OAC3DlE,KAAK6L,GAAoB,KAAf7L,KAAKkE,QAAiBlE,KAAKkE,OAAS,IAC9ClE,KAAK8L,WAAa,eAAgBtI,EAAUA,EAAQsI,WAAa,KACjE9L,KAAKgC,QAAU,IAAIyE,EAAQjD,EAAQxB,OAAO,EAC1ChC,KAAK0B,IAAM8B,EAAQ9B,KAAO,GAC1B1B,KAAKyI,UAAUmD,CAAQ,CACxB,CAlDDd,EAAQ3J,UAAU4K,MAAQ,WACxB,OAAO,IAAIjB,EAAQ9K,KAAM,CAAC6C,KAAM7C,KAAK0I,SAAS,CAAC,CACnD,EAkCEF,EAAKa,KAAKyB,EAAQ3J,SAAS,EAgB3BqH,EAAKa,KAAKsC,EAASxK,SAAS,EAE5BwK,EAASxK,UAAU4K,MAAQ,WACzB,OAAO,IAAIJ,EAAS3L,KAAK0I,UAAW,CAClCxE,OAAQlE,KAAKkE,OACb4H,WAAY9L,KAAK8L,WACjB9J,QAAS,IAAIyE,EAAQzG,KAAKgC,OAAO,EACjCN,IAAK1B,KAAK0B,GAChB,CAAK,CACL,EAEEiK,EAASjE,MAAQ,WACf,IAAIzD,EAAW,IAAI0H,EAAS,KAAM,CAACzH,OAAQ,EAAG4H,WAAY,EAAE,CAAC,EAE7D,OADA7H,EAASM,KAAO,QACTN,CACX,EAEE,IAAI+H,EAAmB,CAAC,IAAK,IAAK,IAAK,IAAK,KAE5CL,EAASM,SAAW,SAASvK,EAAKwC,GAChC,GAAyC,CAAC,IAAtC8H,EAAiB5B,QAAQlG,CAAM,EACjC,MAAM,IAAIgI,WAAW,qBAAqB,EAG5C,OAAO,IAAIP,EAAS,KAAM,CAACzH,OAAQA,EAAQlC,QAAS,CAACmK,SAAUzK,CAAG,CAAC,CAAC,CACxE,EAEE6D,EAAQH,aAAeH,EAAKG,aAC5B,IACE,IAAIG,EAAQH,YAUb,CATC,MAAOgH,GACP7G,EAAQH,aAAe,SAASiH,EAASxG,GACvC7F,KAAKqM,QAAUA,EACfrM,KAAK6F,KAAOA,EACR6B,EAAQ6B,MAAM8C,CAAO,EACzBrM,KAAKsM,MAAQ5E,EAAM4E,KACzB,EACI/G,EAAQH,aAAajE,UAAYP,OAAO+B,OAAO4G,MAAMpI,SAAS,EAC9DoE,EAAQH,aAAajE,UAAUvB,YAAc2F,EAAQH,YACtD,CAED,SAAStD,EAAMiJ,EAAOjH,GACpB,OAAO,IAAIoD,QAAQ,SAASI,EAASH,GACnC,IAAIoF,EAAU,IAAIzB,EAAQC,EAAOjH,CAAI,EAErC,GAAIyI,EAAQpB,QAAUoB,EAAQpB,OAAOqB,QACnC,OAAOrF,EAAO,IAAI5B,EAAQH,aAAa,UAAW,YAAY,CAAC,EAGjE,IAAIqH,EAAM,IAAIC,eAEd,SAASC,IACPF,EAAIG,MAAK,CACV,CAEDH,EAAIlF,OAAS,WACX,IAvFAvF,EAuFIwB,EAAU,CACZU,OAAQuI,EAAIvI,OACZ4H,WAAYW,EAAIX,WAChB9J,SA3Fc6K,EA2FQJ,EAAIK,sBAAqB,GAAM,GA1FvD9K,EAAU,IAAIyE,EAGQoG,EAAWjJ,QAAQ,eAAgB,GAAG,EAC5C4H,MAAM,OAAO,EAAEnK,QAAQ,SAAS0L,GAClD,IAAIC,EAAQD,EAAKvB,MAAM,GAAG,EACtByB,EAAMD,EAAM1G,MAAO,EAACiF,KAAI,EACxB0B,IACE/G,EAAQ8G,EAAMjD,KAAK,GAAG,EAAEwB,KAAI,EAChCvJ,EAAQ2E,OAAOsG,EAAK/G,CAAK,EAEjC,CAAK,EACMlE,EA+EX,EAEYa,GADJW,EAAQ9B,IAAM,gBAAiB+K,EAAMA,EAAIS,YAAc1J,EAAQxB,QAAQP,IAAI,eAAe,EAC/E,aAAcgL,EAAMA,EAAIxI,SAAWwI,EAAIU,cAClD7F,EAAQ,IAAIqE,EAAS9I,EAAMW,CAAO,CAAC,CAC3C,EAEMiJ,EAAIhF,QAAU,WACZN,EAAO,IAAIpB,UAAU,wBAAwB,CAAC,CACtD,EAEM0G,EAAIW,UAAY,WACdjG,EAAO,IAAIpB,UAAU,wBAAwB,CAAC,CACtD,EAEM0G,EAAIY,QAAU,WACZlG,EAAO,IAAI5B,EAAQH,aAAa,UAAW,YAAY,CAAC,CAChE,EAEMqH,EAAIa,KAAKf,EAAQjL,OAAQiL,EAAQ7K,IAAK,CAAA,CAAI,EAEd,YAAxB6K,EAAQtB,YACVwB,EAAIc,gBAAkB,CAAA,EACW,SAAxBhB,EAAQtB,cACjBwB,EAAIc,gBAAkB,CAAA,GAGpB,iBAAkBd,GAAOjH,IAC3BiH,EAAIe,aAAe,QAGrBjB,EAAQvK,QAAQX,QAAQ,SAAS6E,EAAOL,GACtC4G,EAAIgB,iBAAiB5H,EAAMK,CAAK,CACxC,CAAO,EAEGqG,EAAQpB,SACVoB,EAAQpB,OAAOuC,iBAAiB,QAASf,CAAQ,EAEjDF,EAAIkB,mBAAqB,WAEA,IAAnBlB,EAAImB,YACNrB,EAAQpB,OAAO0C,oBAAoB,QAASlB,CAAQ,CAEhE,GAGMF,EAAIqB,KAAkC,KAAA,IAAtBvB,EAAQ7D,UAA4B,KAAO6D,EAAQ7D,SAAS,CAClF,CAAK,CACF,CAED5G,EAAMiM,SAAW,CAAA,EAEZ9I,EAAKnD,QACRmD,EAAKnD,MAAQA,EACbmD,EAAKwB,QAAUA,EACfxB,EAAK6F,QAAUA,EACf7F,EAAK0G,SAAWA,GAGlBpG,EAAQkB,QAAUA,EAClBlB,EAAQuF,QAAUA,EAClBvF,EAAQoG,SAAWA,EACnBpG,EAAQzD,MAAQA,EAEhBlB,OAAOY,eAAe+D,EAAS,aAAc,CAAEW,MAAO,CAAA,CAAI,CAAE,EAM9DhB,EAASpD,MAAMkM,SAAW,CAAA,EAE1B,OAAO9I,EAASpD,MAAMiM,SAGlBE,EAAM/I,GACVK,EAAU0I,EAAInM,OACCoM,QAAGD,EAAInM,MACtByD,EAAazD,MAAGmM,EAAInM,MACpByD,EAAekB,QAAGwH,EAAIxH,QACtBlB,EAAeuF,QAAGmD,EAAInD,QACtBvF,EAAgBoG,SAAGsC,EAAItC,SACvBwC,EAAA5I,QAAiBA,iaCjiBjBpB,IAAIiK,EAAQ,IAAIC,cAEHC,EAGX1O,YAAY2O,EAAiD5K,GAAA3D,KAAO2D,QAAPA,EAF7D3D,KAAMwO,OAAG,GACTxO,KAAcyO,eAAG,GAEc,UAAzB,OAAOF,EACT5K,EAAU4K,EAEVvO,KAAK0O,QAAQH,CAAa,EAE5BvO,KAAK2D,QAAU3D,KAAK2O,iBAAiBhL,CAAO,CAC7C,CAED+K,QAAQE,GACNR,EAAM9F,IAAItI,KAAM4O,CAAI,CACrB,CAEK9M,MAAMJ,EAAaoC,2CACvBK,IAAI0K,EAAU/M,EACd,IACE+M,EAAUC,OAAOhN,OAAS+M,CAG3B,CAFC,MAAOlJ,IAGT,IAAM5B,EAAkB/D,KAAK0D,OAAOhC,EAAKoC,CAAI,EACvCN,EAAyBxD,KAAK+O,gBAAgBjL,CAAI,EAClDkL,EAA0BhP,KAAKiP,yBAAyBzL,CAAO,EACrE,OAAOqL,EAAQ9K,EAASiL,CAAuB,EAChD,CAAA,CAEDtL,OAAOhC,EAAM,GAAI8B,GACf,MAAMtB,EAASsB,GAAWA,EAAQtB,OAClCiC,IAAI+K,EAAY,GAgBhB,OAfIhN,GAAUtB,OAAO6J,KAAKvI,CAAM,EAAE0H,SAWhCsF,EAAY,KAVZA,EAAYtO,OAAO6J,KAAKvI,CAAM,EAC3BwE,IAAIyI,IACHhL,IAAIiL,EAAOlN,EAAOiN,GAClB,MAAME,EAAaC,mBAAmBH,CAAC,EAIvC,OAFEC,EADGxI,MAAMC,QAAQuI,CAAI,EAGhBA,EAFE,CAACA,IAEE1I,IAAI6I,GAAQF,EAAH,IAAiBC,mBAAmBC,CAAC,CAAG,EAAExF,KAAK,GAAG,CACzE,CAAC,EACAA,KAAK,GAAG,IAGG/J,KAAK2D,QAAQC,QAAQ,OAAQ,EAAE,EAAEA,QAAQ,OAAQ,EAAE,EAE5D,IADYlC,EAAIkC,QAAQ,OAAQ,EAAE,EAAEA,QAAQ,OAAQ,EAAE,EAC3BsL,CACnC,CAEDH,gBAAgBvL,EAAyB,IACvCW,IAAIqL,EAAa5O,OAAAC,OAAA,GAAQ2C,CAAO,EAC1BoL,EAAOR,EAAM3M,IAAIzB,IAAI,EAM3B,OALAwP,EAAcxN,QAAUpB,OAAOC,OAAO,GAAIb,KAAKyO,eAAgBe,EAAcxN,QAAS,CACpFyN,UAAW,CAAA,CACZ,CAAA,EACD,OAAOD,EAActN,OACrBsN,EAAgBZ,EAAOA,EAAKG,gBAAgBS,CAAa,EAAIA,CAE9D,CAEDE,mBAAmBC,EAAc,IAC/B,IAAMf,EAAOR,EAAM3M,IAAIzB,IAAI,EAC3B,OAAO4O,EAAOA,EAAKc,mBAAmBC,CAAM,EAAIA,CACjD,CAEOhB,iBAAiBhL,EAAU,IACjC,GAAIA,GAAWA,EAAQiM,WAAW,MAAM,EACtC,OAAOjM,EAAQC,QAAQ,OAAQ,EAAE,EAEnC,IACE,IAAMuI,EAAW2C,OAAO3C,SACxB,SAAUA,EAAS0D,aAAa1D,EAAS2D,QAAQnM,EAAQC,QAAQ,OAAQ,EAAE,CAG5E,CAFC,MAAOQ,GACP,MAAMmF,MAAM,6EAA6E,CAC1F,CACF,CAEO0F,yBAAyBzL,GAE/B,OADmB5C,OAAOC,OAAO2C,EAAS,CAAEX,KAAMW,EAAQX,IAA2B,CAAE,CAExF,CACF,CC5FkB,SAAR6E,EAAkB2E,GAC3B,SAAS0D,IACP/P,KAAKqM,QAAUA,CAChB,CAKD,OAHA0D,EAAE5O,UAAY,IAAIoI,OACN1D,KAAO,wBACnBkK,EAAE5O,UAAU6O,KAAO,EACZD,CACT,CC0Be,SAAAE,EAAWlF,GACxB,OAAOmF,EANAZ,mBAMWvE,CANa,EAAEnH,QAAQ,kBAAmB,SAAUkB,EAAOqL,GAC3E,OAAOzL,OAAOoF,aAAa,KAAOqG,CAAE,CACxC,CAAG,CAIuB,CACzB,CDrCM,ICEHJ,EAAIrI,EAAM,2DAA2D,EAC9DwI,EAAwB,aAAhB,OAAOE,KAExB,SAAUrF,GACV,OAAOqF,KAAKrF,CAAK,CACnB,EAAI,SAAUA,GAIZ,IAHA,IAIIsF,EAAOC,EAJPC,EAAM7L,OAAOqG,CAAK,EAClByF,EAAS,GAGQC,EAAM,EAAG/J,EDFb,oECKjB6J,EAAIG,OAAa,EAAND,CAAO,IAAM/J,EAAM,IAAK+J,EAAM,GACzCD,GAAU9J,EAAIgK,OAAO,GAAKL,GAAS,EAAII,EAAM,EAAI,CAAC,EAAG,CAGnD,GAAe,KAFfH,EAAWC,EAAII,WAAWF,GAAO,GAAK,GAGpC,MAAM,IAAIV,EAGZM,EAAQA,GAAS,EAAIC,CACtB,CAED,OAAOE,CACT,ECtBII,GCJIlJ,EAAM,mDAAmD,EDInD,IAAI2G,eAMLwC,EAQXjR,YAAYqL,GACVjL,KAAK8Q,kBAAkB7F,CAAW,CACnC,CAED6F,kBAAkB,CAAEtC,OAAAA,EAAQuC,KAAAA,EAAMC,SAAAA,EAAUC,MAAAA,EAAOC,IAAAA,CAAG,EAAmB,IACvE,IAAMC,EAASP,EAAQnP,IAAIzB,IAAI,GAAK,GAepC,OAXA+Q,GAFEA,EADEA,GAAQvC,EACAA,EAAH,IAAauC,EAEfA,IAAQ/Q,KAAK+Q,KACpBC,EAAWA,GAAYG,EAAOH,SAC1B,CAACC,GAASF,GAAQC,IACpBC,EAAQb,EAAQW,EAAH,IAAWC,CAAU,GAEhCD,IACF/Q,KAAK+Q,KAAOA,GAEdE,EAAQA,GAASE,EAAOF,MACxBC,EAAMA,GAAOC,EAAOD,IACpBN,EAAQtI,IAAItI,KAAM,CAAEkR,IAAAA,EAAKD,MAAAA,EAAOD,SAAAA,CAAQ,CAAE,EACnCC,CACR,CAEDlC,gBAAgBvL,GACd,GACM,CAAEyN,MAAAA,EAAOC,IAAAA,CAAK,EADLN,EAAQnP,IAAIzB,IAAI,EAEzBoR,EAAYpR,KAAKqR,eAAe,YAAY,EAC5CrP,EACJpB,OAAAC,OAAA,CAAAyQ,cAAe,UAASL,GAAS,GAAI,EACjCG,EAAY,CAAEG,eAAgBH,CAAS,EAAK5K,KAAAA,GAOlD,OAJI0K,IACFlP,EAAQwP,SAAWN,GAErB1N,EAAQxB,QAAUpB,OAAOC,OAAOmB,EAASwB,EAAQxB,OAAO,EACjDwB,CACR,CAEDkM,mBAAmBC,EAA2B,IAC5C,GACM,CAAEsB,MAAAA,EAAOC,IAAAA,CAAK,EADLN,EAAQnP,IAAIzB,IAAI,EAEzByR,EAAM,uBACNC,EAAO/B,EAAO+B,IAAM/B,EAAO+B,KAAO,GAExC,OADAA,EAAID,GAAO7Q,OAAOC,OAAO6Q,EAAID,IAAQ,GAAI,CAAER,MAAAA,EAAOC,IAAAA,CAAK,CAAA,EAChDvB,CACR,CAEDgC,SACE,OAAO3R,KAAK+Q,KACZH,EAAQtI,IAAItI,KAAM,EAAE,CACrB,CAEOqR,eAAexL,GACrB,IACE,IAAMK,EAAQ0L,SAASC,OAAO/M,MAAM,YAAce,EAAO,kBAAkB,EAC3E,OAAOK,EAAQA,EAAM4L,IAAG,EAAKtL,KAAAA,CAG9B,CAFC,MAAOpC,IAGV,CACF,CE9ED,MAAMwM,EAAU,IAAIvC,cAEP0D,EACXnS,YAAYqR,GACVL,EAAQtI,IAAItI,KAAM,CAAEiR,MAAAA,CAAO,CAAA,CAC5B,CACDlC,gBAAgBvL,GACd,IACQyN,EADOL,EAAQnP,IAAIzB,IAAI,EACvBiR,SAER,OADAzN,EAAQxB,QAAUpB,OAAOC,OAAO,CAAEyQ,cAAe,UAAUL,CAAO,EAAIzN,EAAQxB,OAAO,EAC9EwB,CACR,CAEDsN,kBAAkB,CAAEG,MAAAA,IAClBL,EAAQtI,IAAItI,KAAM,CAAEiR,MAAAA,CAAO,CAAA,CAE5B,CAEDvB,mBAAmBC,EAAwB,IACzC,GACM,CAAEsB,MAAAA,EAAOC,IAAAA,CAAK,EADLN,EAAQnP,IAAIzB,IAAI,EAEzByR,EAAM,uBACNC,EAAO/B,EAAO+B,IAAM/B,EAAO+B,KAAO,GAExC,OADAA,EAAID,GAAO7Q,OAAOC,OAAO6Q,EAAID,IAAQ,GAAI,CAAER,MAAAA,EAAOC,IAAAA,CAAK,CAAA,EAChDvB,CACR,CAEDgC,SACEf,EAAQtI,IAAItI,KAAM,EAAE,CACrB,CACF,0SCzBYgS,EAAbpS,cAEUI,KAASiS,UAAG,aAsCrB,CApCCnB,kBAAkB,CAAEC,KAAAA,CAAI,EAAmB,IACzC/Q,KAAK+Q,KAAOA,CAEb,CAEDhC,gBAAgBvL,GACd,IAAM4N,EAAYpR,KAAKqR,eAAe,YAAY,EAGlD,OADA7N,EAAQxB,QAAUpB,OAAOC,OADJ,CAAE0Q,eAAgBH,GACE5N,EAAQxB,OAAO,EACjDwB,CACR,CAEDkM,mBAAmBC,EAA2B,IAC5C,IAAM8B,EAAM,uBACNL,EAAYpR,KAAKqR,eAAe,YAAY,EAC5CK,EAAO/B,EAAO+B,IAAM/B,EAAO+B,KAAO,GAExC,OADAA,EAAID,GAAO7Q,OAAOC,OAAO6Q,EAAID,IAAQ,GAAI,CAAEL,UAAAA,CAAS,CAAE,EAC/CzB,CACR,CAEKgC,iDACA3R,KAAK+Q,MACP,OAAO/Q,KAAK+Q,KAEd,IAAMhQ,EAAS,IAAIuN,EAGbzL,GAFN9B,EAAO2N,QAAQ1O,IAAI,EAEN8C,KAAKC,UAAU,EAAE,GAE9B,OAAOhC,EAAOe,MAAM9B,KAAKiS,UAAW,CAAEjQ,QADtB,CAAEiB,eAAgB,mBAAoBhB,OAAQ,kBAAkB,EACjCY,KAAAA,EAAMvB,OAHtC,MAG4C,CAAE,EAC9D,CAAA,CAEO+P,eAAexL,GACfK,EAAQ0L,SAASC,OAAO/M,MAAM,YAAce,EAAO,kBAAkB,EAC3E,OAAOK,EAAQA,EAAM4L,IAAG,EAAK,EAC9B,CACF,OCxCYI,EAaXtS,YAAYoC,EAA6C,IACvDhC,KAAKoR,UAAYpR,KAAKqR,eAAerP,EAAS,YAAY,EAC1DhC,KAAKmS,oBAAsBnS,KAAKqR,eAAerP,EAAS,eAAe,EACvEhC,KAAKoS,oBAAsBpQ,EAAQqQ,aACpC,CAEDvB,qBAIA/B,gBAAgBvL,GACd,IAAMxB,EACJpB,OAAAC,OAAA,CAAAyQ,cAAetR,KAAKmS,oBAChB,UAAUnS,KAAKmS,oBACfnS,KAAKoS,qBACLpS,KAAKoR,UAAY,CAAEG,eAAgBvR,KAAKoR,WAAc5K,KAAAA,GAG5D,OADAhD,EAAQxB,QAAUpB,OAAOC,OAAOmB,EAASwB,EAAQxB,OAAO,EACjDwB,CACR,CAEDkM,mBAAmBC,EAA2C,IAC5D,IAAM8B,EAAM,uBACNL,EAAYpR,KAAKoR,UACvBjN,IAAI8M,EAAQjR,KAAKmS,oBACb,CAAClB,GAASjR,KAAKoS,sBACjBnB,EAAQjR,KAAKoS,oBAAoBxO,QAAQ,SAAU,EAAE,EAAEA,QAAQ,UAAW,EAAE,GAE9E,IAAM8N,EAAO/B,EAAO+B,IAAM/B,EAAO+B,KAAO,GAExC,OADAA,EAAID,GAAO7Q,OAAOC,OAAO6Q,EAAID,IAAQ,GAAE7Q,OAAAC,OAAA,CAAIoQ,MAAAA,GAAWG,EAAY,CAAEA,UAAAA,CAAW,EAAG5K,KAAAA,CAAS,GACpFmJ,CACR,CAEDgC,SACM3R,KAAKmS,qBACP,OAAOnS,KAAKmS,oBAEVnS,KAAKoS,qBACP,OAAOpS,KAAKoS,oBAEVpS,KAAKoR,WACP,OAAOpR,KAAKoR,SAEf,CAESC,eAAerP,EAA4C6D,GACnE,IACE,IAAMK,EACJlE,GAAWA,EAAQ6P,QAAU7P,EAAQ6P,OAAO/M,MAAM,YAAce,EAAO,kBAAkB,EAC3F,OAAOK,EAAQA,EAAM4L,IAAG,EAAKtL,KAAAA,CAG9B,CAFC,MAAOpC,IAGV,CACF,OClEYkO,UAAyBJ,EACpCtS,YAAY2S,GACVC,QAEMC,EAAmBF,EAAevQ,QAAQP,IAAI,YAAY,EAChE,GAAI,CAACgR,EACH,MAAMlJ,MAAM,eAAe,EAE7BvJ,KAAKmS,oBAAsBnS,KAAKqR,eAAe,CAAEQ,OAAQY,CAAgB,EAAI,eAAe,CAC7F,CACF,CCPAlN,EAAAmN,SAAA,KAAA,GALWA,EAAAA,EAAQA,WAARA,WAKX,KAJCA,EAAA,SAAmB,uBACnBA,EAAAA,EAAA,MAAgB,iBAChBA,EAAAA,EAAA,MAAgB,iBAChBA,EAAAA,EAAA,QAAkB,2BCVPC,EAAb/S,cACYI,KAAA4S,YAAc,CACtBC,MAAOC,UACS9S,KAAK+S,iBAAiBD,EAAS,IAAI,KAEnDE,MAAOF,GACE9S,KAAK+S,iBAAiBD,EAAS,KAAM,KAAK,EAEnDG,KAAMH,GACG9S,KAAK+S,iBAAiBD,EAAS,KAAM,IAAI,EAElDI,KAAM,CAACJ,EAASK,IACS,UAAnB,OAAOL,GAAoC,OAAZA,EAC1B9S,KAAK+S,iBAAiBD,EAASK,CAAU,EAExCA,EAAH,OAAoBnT,KAAKoT,YAAYN,CAAO,EAErDO,KAAM,CAACP,EAASK,IACJA,EAAH,OAAoBnT,KAAKoT,YAAYN,CAAO,EAErDQ,KAAM,CAACR,EAASK,IACJA,EAAH,OAAoBnT,KAAKoT,YAAYN,CAAO,EAErDS,KAAM,CAACT,EAASK,IACJA,EAAH,OAAoBnT,KAAKoT,YAAYN,CAAO,EAErDU,KAAM,CAACV,EAASK,IACJA,EAAH,OAAoBnT,KAAKoT,YAAYN,CAAO,EAErDW,KAAM,CAACX,EAASK,KACRO,EAAQZ,EACX/S,OAAO4T,GAAM,CAAC,CAACA,CAAE,EACjBjN,IAAIiN,GACOR,EAAH,OAAoBnT,KAAKoT,YAAYO,CAAE,CAC/C,EACH,OAAO3T,KAAK4T,KAAKF,EAAO,IAAI,CAC7B,EACDG,YAAaf,gBACSA,KAEtBgB,MAAOhB,UACSA,KAEhBiB,uBAAwB,IAEhBC,EAAQ,OAAAC,EAAAC,EAAYpP,MAAM,QAAQ,GAAC,KAAA,EAAAmP,EAAG,GAE5C,OAAOD,MAAAA,EAAA,KAAA,EAAAA,EAAOG,UAAU,EAAGH,EAAMpK,OAAS,CAAC,CAC5C,EAwMJ,CAtICwK,WAAWJ,GACT,IAAMK,EAAI,GACJtU,EAASC,KAAK+S,iBAAiBiB,EAAMM,UAAYN,CAAK,EACtDO,EAAUvU,KAAKwU,kBAAkBR,EAAMS,SAAS,EAOtD,OANI1U,GACFsU,EAAE3J,iBAAiB3K,IAAS,EAE1BwU,GACFF,EAAE3J,KAAK,YAAY6J,CAAS,EAEvBF,EAAEtK,KAAK,GAAG,CAClB,CAEDgJ,iBAAiB2B,EAAaC,EAAYC,GACxC,MAAMC,EAAWF,GAAa,KACxBG,EAAWF,GAAa,MAExBP,EAAI,GAEV,GAAIzN,MAAMC,QAAQ6N,CAAW,EAC3BA,EAAYrT,QAAQ0T,IACZC,EAAKhV,KAAK+S,iBAAiBgC,EAAS,KAAMD,CAAQ,EACpDE,GACFX,EAAE3J,KAAKsK,CAAE,CAEb,CAAC,MACI,CACL7Q,IAAI6Q,EACJpU,OAAO6J,KAAKiK,CAAW,EAAErT,QAAQ8N,IACH3I,KAAAA,IAAxBxG,KAAK4S,YAAYzD,IACnB6F,EAAKhV,KAAK4S,YAAYzD,GAAGuF,EAAYvF,GAAI0F,CAAQ,IAE/CR,EAAE3J,KAAKsK,CAAE,GAGXA,EAAKhV,KAAK4S,YAAYM,KAAKwB,EAAYvF,GAAIA,CAAC,IAE1CkF,EAAE3J,KAAKsK,CAAE,CAGf,CAAC,CACF,CAED,OAAOhV,KAAK4T,KAAKS,EAAGS,CAAQ,CAC7B,CAEDN,kBAAkBS,GAChB,MAAMC,EAAI,GAUV,OATID,GACFA,EAAc5T,QAAQgT,IACpBzT,OAAO6J,KAAK4J,CAAC,EAAEhT,QAAQ8N,IACR,IAATkF,EAAElF,IACJ+F,EAAExK,KAAQyE,EAAH,KAAe,EAAPkF,EAAElF,GAAS,MAAQ,OAAQ,CAE9C,CAAC,CACH,CAAC,EAEI+F,EAAEnL,KAAK,GAAG,CAClB,CAEDoL,aAAanB,EAAOjU,GAClB,OAAOC,KAAKoV,UAAUpB,EAAOjU,EAAQ,KAAK,CAC3C,CAEDsV,YAAYrB,EAAOjU,GACjB,OAAOC,KAAKoV,UAAUpB,EAAOjU,EAAQ,IAAI,CAC1C,CAEDqV,UAAUpB,EAAOjU,EAAQuV,GACvB,IAAMC,EAAYvB,EAAMS,UAAYT,EAAMM,UAAY,GAAKN,EAAMM,UAAYN,EACvEwB,EAAY,EAAG,KAAKF,GAAatV,KAAKyV,iBAAiB,CAACF,EAAWxV,EAAO,CAAC,EACjF,OAAKiU,EAAMM,UAAaN,EAAMS,WAG9BT,EAAMM,SAAWkB,EACVxB,GAHEwB,CAIV,CAEDE,gBAAgB1B,EAAO2B,GACrB,OAAO3V,KAAK4V,YAAY5B,EAAO2B,EAAU,SAAS,CACnD,CAEDE,eAAe7B,EAAO2B,GACpB,OAAO3V,KAAK4V,YAAY5B,EAAO2B,EAAU,QAAQ,CAClD,CAEDC,YAAY5B,EAAO2B,EAAUG,GAC3B,IAAMP,EAAYvB,EAAMS,UAAYT,EAAMM,UAAY,GAAKN,EAAMM,UAAYN,EACvE+B,EAAc/B,EAAMS,WAAa,GACjCuB,EACI,YAARF,EAAoB,CAAC,GAAGH,EAAU,GAAGI,GAAe,CAAC,GAAGA,EAAa,GAAGJ,GACpEM,EAAgB,CACpBxB,UAAWzU,KAAKyV,iBAAiBO,CAAW,GAK9C,OAHKhW,KAAKkW,cAAcX,CAAS,IAC/BU,EAAS3B,SAAWiB,GAEfU,CACR,CAEDE,wBAAwBC,GACtB,GAAsB,GAAlBA,MAAAA,EAAO,KAAA,EAAPA,EAASxM,QAKX,OAJMyM,EAAeD,EAClB1P,IAAIsN,IAAS,OAAA,SAAAA,EAAMlP,MAAM,iBAAiB,GAAC,KAAA,EAAAmP,EAAG,GAAE,EAChDlU,OAAOwU,GAAW,CAAC,CAACA,CAAO,EAC3BxK,KAAK,GAAG,GACW,YAAYsM,EAAiB,EAEtD,CAESzC,KAAKF,EAAcnP,GAC3B,OAAsB,EAAfmP,EAAM9J,WAAiB8J,EAAM3J,UAAUxF,KAAQ,KAAOmP,EAAM,EACpE,CAESN,YAAYkD,GACpB,MAAoB,UAAb,OAAOA,MAAqBtW,KAAKuW,kBAAkBD,CAAC,KAAOA,CACnE,CAESb,iBAAiBe,GACzB,OAAOA,EAAKzW,OAAOsD,GAAO,CAACrD,KAAKkW,cAAc7S,CAAG,CAAC,CACnD,CAES6S,cAAc7S,GACtB,OAAmC,IAA5BzC,OAAO6J,KAAKpH,CAAG,EAAEuG,MACzB,CAIO2M,kBAAkBD,GACxB,MAAiB,UAAb,OAAOA,EACFA,EAEFA,EAAE1S,QAAQ,MAAO,IAAI,CAC7B,CACF,KCxPW6S,oBCkBX,IAiBOC,GAuDAC,GAiCAC,GA4FAC,EAwIAC,EA0OAC,GAkIAC,GA6JAC,GAw4EAC,EAWAC,EAtuGAhJ,EAAc5I,SAcdmR,GAAY,WACZ,IAAIU,EAAO,EACPC,EAAS,GACbrX,KAAKsX,SAAW,SAASC,GACrB,IAAIjU,EAAK,EAAE8T,EAEX,OADAC,EAAO/T,GAAMiU,EACNjU,CACnB,EACQtD,KAAKwX,WAAa,SAASlU,GACvB,IAAIiU,EAAWF,EAAO/T,GAEtB,OADA,OAAO+T,EAAO/T,GACPiU,CACnB,EACQvX,KAAKyX,WAAa,SAASF,EAAUG,GACjC,OAAO5I,OAAO2I,WAAWF,EAAUG,CAAK,CACpD,EACQ1X,KAAK2X,aAAe,SAASrU,GACzBwL,OAAO6I,aAAarU,CAAE,CAClC,CACA,EAoCQqT,GAAQ,CACRiB,SAAU,SAAS1R,GACf,OAAIA,MAAAA,IAGoB,UAAjB,OAAOA,GAAsBA,aAAiBxB,OACxD,EACDmC,QAAS,SAASX,GACd,OAAIA,MAAAA,GAGGA,aAAiBU,KAC3B,EAODiR,QAAS,SAASC,EAASC,GACvB,IAAK,IAAIlO,EAAI,EAAGA,EAAIkO,EAAMnO,OAAQ,EAAEC,EAChC,GAAIiO,IAAYC,EAAMlO,GAClB,OAAOA,EAGf,MAAO,CAAC,CACX,CACT,EAMQ+M,GAAoB,WACpB,IAAIoB,EAAS,GACTC,EAAc,GAElBjY,KAAKkY,kBAAoB,WACrB,OAAOF,EAAO7P,MAAM,CAAC,CACjC,EAEQnI,KAAKmY,mBAAqB,SAASC,EAASC,EAAa3W,GAErD,IADA,IAAI8F,EAAS,GACJqC,EAAI,EAAGA,EAAImO,EAAOpO,OAAQ,EAAEC,EAAG,CACpC,IAAItF,EAAOyT,EAAOnO,GAC0C,CAAA,IAAxDoO,EAAY1T,GAAMtC,OAAOmW,EAASC,EAAa3W,CAAG,GAClD8F,EAAOkD,KAAKnG,CAAI,CAEvB,CACD,OAAOiD,CACnB,EAEQxH,KAAKsY,mBAAqB,SAASC,EAAOH,EAASC,EAAa3W,GAC5D,IAAK,IAAImI,EAAI,EAAGA,EAAImO,EAAOpO,OAAQ,EAAEC,EAEjC,IADA,IAAItF,EAAOyT,EAAOnO,GACT2O,EAAI,EAAGA,EAAID,EAAM3O,OAAQ,EAAE4O,EAChC,GAAIjU,IAASgU,EAAMC,GAAI,CACnB,IAAIC,EAAYR,EAAY1T,GAC5B,GAAoD,CAAA,IAAhDkU,EAAUxW,OAAOmW,EAASC,EAAa3W,CAAG,EAC1C,OAAO+W,CAEd,CAGT,OAAO,IACnB,EAEQzY,KAAK0Y,IAAM,SAASnU,EAAMkU,EAAWE,GAEjC,IADA,IAAIC,EAAW,CAAA,EACN/O,EAAI,EAAGA,EAAImO,EAAOpO,OAAQ,EAAEC,EACjC,GAAImO,EAAOnO,KAAOtF,EAAM,CACpBqU,EAAW,CAAA,EACX,KACH,CAYL,OATKA,IACoB,UAAjB,OAAOD,EACPX,EAAOtN,KAAKnG,CAAI,EAEhByT,EAAOa,OAAOF,EAAO,EAAGpU,CAAI,EAEhC0T,EAAY1T,GAAQkU,GAGjB,CAACG,CACpB,EAEQ5Y,KAAK8Y,KAAO,SAASvU,GACjB,IAAK,IAAIsF,EAAI,EAAGA,EAAImO,EAAOpO,OAAQ,EAAEC,EACjC,GAAImO,EAAOnO,KAAOtF,EACd,OAAO0T,EAAY1T,GAG3B,OAAO,IACnB,EAEQvE,KAAK+Y,OAAS,SAASxU,GACnB,IAAK,IAGOkU,EAHH5O,EAAI,EAAGA,EAAImO,EAAOpO,OAAQ,EAAEC,EACjC,GAAImO,EAAOnO,KAAOtF,EAId,OAHAyT,EAAOa,OAAOhP,EAAG,CAAC,EACd4O,EAAYR,EAAY1T,GAC5B,OAAO0T,EAAY1T,GACZkU,EAGf,OAAO,IACnB,EAEQzY,KAAKgZ,MAAQ,WACThB,EAAS,GACTC,EAAc,EAC1B,EAEQjY,KAAKiZ,MAAQ,SAASnV,GAClB,IAAK,IAAI+F,EAAI,EAAGA,EAAImO,EAAOpO,OAAQ,EAAEC,EACjCoO,EAAYD,EAAOnO,IAAIoP,MAAMnV,CAAI,CAEjD,CACA,GAMQ+S,EAAY,WACZ,IAAIqC,EACAC,EACA1V,EAQJzD,KAAKoZ,WAAa,SAAS7U,EAAM8U,GAC7BH,EAAQ3U,EACR4U,EAAUE,CACtB,EAMQrZ,KAAKsZ,aAAe,WAEhBH,EADAD,EAAQ,IAEpB,EAEQlZ,KAAKuZ,OAAS,WACVJ,EAAQI,OAAOC,MAAML,EAASM,SAAS,CACnD,EAEQzZ,KAAK0Z,OAAS,WACV,OAAOP,EAAQO,OAAOF,MAAML,EAASM,SAAS,CAC1D,EAEQzZ,KAAK2Z,iBAAmB,WACpB,OAAOR,EAAQQ,kBAC3B,EAEQ3Z,KAAK4Z,UAAY,WACb,OAAOT,EAAQS,WAC3B,EAEQ5Z,KAAKyX,WAAa,SAASF,EAAUG,GACjC,OAAOyB,EAAQ1B,WAAWF,EAAUG,CAAK,CACrD,EAEQ1X,KAAK2X,aAAe,SAASrU,GACzB6V,EAAQxB,aAAarU,CAAE,CACnC,EAOQtD,KAAK6Z,kBAAoB,SAAS5V,GAC9B,GAAI0S,GAAMiB,SAAS3T,CAAQ,EACvB,IACI,OAAOnB,KAAKoH,MAAMjG,CAAQ,CAI7B,CAHC,MAAO6V,GAEL,MADA9Z,KAAKuZ,OAAO,iDAAkD,IAAMtV,EAAW,GAAG,EAC5E6V,CACT,CAEL,GAAInD,GAAM9P,QAAQ5C,CAAQ,EACtB,OAAOA,EAEX,GAAIA,MAAAA,EACA,MAAO,GAEX,GAAIA,aAAoBrD,OACpB,MAAO,CAACqD,GAEZ,KAAM,oBAAsBA,EAAW,YAAe,OAAOA,CACzE,EAUQjE,KAAKiC,OAAS,SAASmW,EAASC,EAAa3W,GACzC,KAAM,UAClB,EAMQ1B,KAAK+Z,QAAU,WACX,OAAOb,CACnB,EAEQlZ,KAAKga,OAAS,WACV,OAAOvW,CACnB,EAEQzD,KAAKia,OAAS,SAASvY,GACnB+B,EAAO/B,CACnB,EAEQ1B,KAAK8N,KAAO,SAASoM,EAAUC,GAC3B,KAAM,UAClB,EAEQna,KAAKiZ,MAAQ,SAASnV,GAClB9D,KAAKuZ,OAAO,YAAaL,EAAO,QAASpV,EAAO,UAAY,OAAO,CAC/E,EAEQ9D,KAAK4M,MAAQ,WACT5M,KAAKuZ,OAAO,YAAaL,EAAO,SAAS,CACrD,EAEQlZ,KAAKiJ,SAAW,WACZ,OAAOjJ,KAAK+Z,SACxB,CACA,GAEcK,OAAS,SAASC,GACxB,SAASlV,KAIT,OADAA,EAAEhE,UAAYkZ,EACP,IAAIlV,CACnB,EA25FQ+R,EAAkB,CAClB,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7C,IAAK,IAAK,IAAK,IAAK,KAEpBC,EAAkB,CAClB,EAAM,GAAM,EAAM,GAAM,GAAM,GAAM,GAAM,EAC1C,GAAM,GAAM,GAAM,GAAM,EAAM,GAAM,GAAM,GAC1C,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC1C,EAAM,EAAM,GAAM,EAAM,GAAM,GAAM,GAAM,GAC1C,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1C,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1C,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1C,GAAM,GAAM,GAAM,GAAM,EAAM,GAAM,GAAM,EAC1C,EAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1C,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1C,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1C,GAAM,GAAM,GAAM,GAAM,EAAM,GAAM,EAAM,GAwEvC,CACHmD,OAvnES,SAASzU,GAClB,IAKI0U,EAaAC,EACAC,EA4ZAC,EACAC,EAhbAC,EAAa,IAAIlE,GACjByC,EAAUnZ,KACV6a,EAAQhV,GAAQ,UAChBiV,EAAe,CAAA,EACf7C,EAAc,IAAIrB,GAElBmE,EAAU,eACVC,EAAa,EACbC,EAAY,KACZC,EAAS,EACTC,EAAgB,GAChBC,EAAiB,CAAA,EACjBC,EAAc,EACdC,EAAa,GACbC,EAAW,EACXC,EAAiB,KACjBC,EAAc,GACdC,EAAU,GAGVC,EAAa,GACbC,EAAe,GACfC,EAAe,CAAA,EACfC,EAAa,CAAA,EACbC,EAAiB,EACjBC,EAAqB,EACrBC,EAAe,KACfC,EAAU,CACVC,mBAAoB,CAAA,EACpBtM,SAAU,KACVuM,gBAAiB,CAAA,EACjBC,eAAgB,EAChBC,eAAgB,EAChBC,iBAAkB,IAClBC,WAAY,IACZC,SAAU,OACVC,gBAAiB,IACjBC,eAAgB,GAChBC,uBAAwB,CAAA,EACxBC,UAAW,CAAA,EACXC,KAAM,GACNC,aAAc,IACdC,OAAQ,CACJC,QAAS,IACTC,SAAU,EACVC,UAAW3W,KAAAA,EACX4W,YAAa,CAChB,CACb,EAEQ,SAASC,EAAYC,EAAQzX,GACzB,IACI,OAAOyX,EAAOzX,EAGjB,CAFC,MAAOiU,IAGZ,CAkDD,SAASyD,EAAUrX,GACf,OAAOyQ,GAAMiB,SAAS1R,CAAK,CAC9B,CAED,SAASsX,EAAYtX,GACjB,OAAIA,MAAAA,GAGoB,YAAjB,OAAOA,CACjB,CAED,SAASuX,EAASvX,EAAO0D,GAErB,IADA,IAAIpC,EAAS,GACK,EAAX,EAAEoC,GACD1D,EAAAA,GAASwX,KAAKC,IAAI,GAAI/T,CAAM,IAGhCpC,GAAU,IAGd,OADAA,GAAUtB,CAEb,CAED,SAAS0X,EAAKC,EAAOC,GACjB,IAGYC,EAHRjP,OAAOkP,SAEHR,EADAS,EAASnP,OAAOkP,QAAQH,EACN,IACdE,EAAM,IAAIG,KACd,GAAGrF,OAAOxP,KAAKyU,EAAM,EAAG,EAAGL,EAASM,EAAII,SAAU,EAAE,CAAC,EAAI,IAAMV,EAASM,EAAIK,WAAY,EAAE,CAAC,EAAI,IAC3FX,EAASM,EAAIM,WAAY,EAAE,CAAC,EAAI,IAAMZ,EAASM,EAAIO,kBAAmB,CAAC,CAAC,EAC5EL,EAAOzE,MAAM1K,OAAOkP,QAASF,CAAI,EAG5C,CAkBD,SAASS,EAAU7c,GAUf,OAAO,IAAI8c,OAAO,mEAAmE,EAAEC,KAAK/c,CAAG,CAClG,CAoBD,SAASgd,EAAWC,GAChBxF,EAAQI,OAAO,iCAAkCoF,CAAa,EAE1DpB,EAAUoB,CAAa,IACvBA,EAAgB,CACZjd,IAAKid,CACzB,GAMYzC,EAAU/C,EAAQO,OAAO,CAAA,EAAOwC,EAJ3ByC,EAAAA,GACe,EAGkC,EAElDjd,EAAMyX,EAAQa,SAClB,GAAI,CAACtY,EACD,KAAM,kFAIV,IAkCQkd,EAlCJC,EAAWN,EAAU7c,CAAG,EACxBod,EAAcD,EAAS,GACvBE,EAAMF,EAAS,GACfG,EAAWH,EAAS,GACxB/D,EAAe3B,EAAQ8F,eAAeH,CAAW,EAG7C5C,EAAQU,yBACSpW,KAAAA,IAAbwY,GAA4C,EAAlBA,EAASpV,QACnCuP,EAAQ+F,MAAM,iCAAmCH,EAAMC,EAAW,qEAAuE,EACzI9C,EAAQU,uBAAyB,CAAA,IAG7BuC,GADAC,EAAcL,EAAIvT,MAAM,GAAG,GACI5B,OAAS,EACxCmV,EAAIja,MAAM,KAAK,GACfqa,EAAAA,EAE8C,GAA9CC,EAAYD,GAAkB/U,QAAQ,GAAG,IAGzC+O,EAAQ+F,MAAM,iCAAmCH,EAAM,qEAAuE,EAC9H7C,EAAQU,uBAAyB,CAAA,KAKzC9N,OAAOuQ,QAAUvQ,OAAOpJ,MAAQoJ,OAAOwQ,KAAOpD,EAAQC,qBAGtDnM,GAAOA,EA34CnB,WACI,IAAIqH,EAAS,GACbpS,KAAKsa,UAAY,SAAS5Z,GACtB,IAAI6Z,EAAM7Z,EAAEvD,KACRkB,EAAK+T,EAAOmI,EAAIlc,IACpB,OAAQkc,EAAIjb,MACR,IAAK,aACD8S,EAAOmI,EAAIlc,IAAM2B,KAAKwS,WAAW,WAC7B,OAAOJ,EAAOmI,EAAIlc,IAClB2B,KAAKwa,YAAY,CACbnc,GAAIkc,EAAIlc,EACpC,CAAyB,CACzB,EAAuBkc,EAAI9H,KAAK,EACZ,MACJ,IAAK,eACD,OAAOL,EAAOmI,EAAIlc,IACdA,GACA2B,KAAK0S,aAAarU,CAAE,EAExB,MACJ,QACI,KAAM,mBAAqBkc,EAAIjb,IACtC,CACb,CACK,EAi3CsC0E,YAEfkL,UAAUnE,EAAK5F,QAAQ,GAAG,EAAI,EAAG4F,EAAK0P,YAAY,GAAG,CAAC,EAC9D9X,EAAO,IAAIkH,OAAOpJ,KAAK,CAACsK,GAAO,CAC/BzL,KAAM,kBAC1B,CAAiB,EACGob,EAAU7Q,OAAOwQ,IAAIM,gBAAgBhY,CAAI,EACzCgX,EAAS,IAAI9P,OAAOuQ,OAAOM,CAAO,EACtC/E,EAAWnD,WAAa,SAASF,EAAUG,GACnCpU,EAAKsX,EAAWtD,SAASC,CAAQ,EAMrC,OALAqH,EAAOa,YAAY,CACfnc,GAAIA,EACJiB,KAAM,aACNmT,MAAOA,CAC/B,CAAqB,EACMpU,CAC3B,EACgBsX,EAAWjD,aAAe,SAASrU,GAC/BsX,EAAWpD,WAAWlU,CAAE,EACxBsb,EAAOa,YAAY,CACfnc,GAAIA,EACJiB,KAAM,cAC9B,CAAqB,CACrB,EACgBqa,EAAOW,UAAY,SAAS5Z,GACpBrC,EAAKqC,EAAEvD,KAAKkB,GACZiU,EAAWqD,EAAWpD,WAAWlU,CAAE,EACnCiU,GACAA,GAExB,EAES,CAED,SAASsI,EAAgBC,GACrB,IACQC,EADJD,IACIC,EAAgBzE,EAAWwE,EAAaE,WACvBD,EAAcD,EAAaxc,MAC5C,OAAOyc,EAAcD,EAAaxc,IAClC6V,EAAQI,OAAO,UAAWuG,EAAaG,SAAW,WAAa,eAAgBH,CAAY,EAGtG,CAED,SAASI,EAAoBJ,GACrBA,GAAgB,CAACA,EAAaG,UAC9BJ,EAAgBC,CAAY,CAEnC,CAED,SAASK,IACL,IAAK,IAAIH,KAAW1E,EAChB,GAAIA,EAAW/Z,eAAeye,CAAO,EAAG,CACpC,IAAID,EAAgBzE,EAAW0E,GAC/B,GAAID,EACA,IAAK,IAAIzc,KAAMyc,EACPA,EAAcxe,eAAe+B,CAAE,GAC/B4c,EAAoBH,EAAczc,EAAG,CAIpD,CAER,CAED,SAAS8c,EAAWC,GACZtF,IAAYsF,IACZlH,EAAQI,OAAO,SAAUwB,EAAS,KAAMsF,CAAS,EACjDtF,EAAUsF,EAEjB,CAED,SAASC,IACL,MAAmB,kBAAZvF,GAA2C,iBAAZA,CACzC,CAED,SAASwF,IAEL,MAAO,IADM,EAAEvF,CAElB,CAED,SAASwF,EAAgBC,EAAOlW,EAAU1E,EAAMwG,EAASqU,GACrD,IACI,OAAOnW,EAASlB,KAAKoX,EAAOpU,CAAO,CActC,CAbC,MAAOyN,GACD6G,EAAUxH,EAAQyH,qBACtB,GAAIpD,EAAYmD,CAAO,EAAG,CACtBxH,EAAQI,OAAO,uCAAwC1T,EAAMiU,CAAC,EAC9D,IACI6G,EAAQtX,KAAK8P,EAASW,EAAGjU,EAAM6a,EAAUrU,CAAO,CAGnD,CAFC,MAAOwU,GACL1H,EAAQ+F,MAAM,4DAA6DrZ,EAAMgb,CAAE,CACtF,CACrB,MACoB1H,EAAQ+F,MAAM,0CAA2CrZ,EAAMiU,CAAC,EAEpE,OAAOzN,CACV,CACJ,CAkCD,SAASyU,EAAQd,EAAS3T,GACtB,IAAI0T,EAAgBzE,EAAW0E,GAC/B,GAAID,EACA,IAAK,IAAIzc,KAAMyc,EACX,GAAIA,EAAcxe,eAAe+B,CAAE,EAAG,CAC9Bwc,EAAeC,EAAczc,GAEjC,GAAIwc,EACA,IACIA,EAAavV,SAASlB,KAAKyW,EAAaW,MAAOpU,CAAO,CAazD,CAZC,MAAOyN,GACL,IAAI6G,EAAUxH,EAAQ4H,oBACtB,GAAIvD,EAAYmD,CAAO,EAAG,CACtBxH,EAAQI,OAAO,sCAAuCuG,EAAchG,CAAC,EACrE,IACI6G,EAAQtX,KAAK8P,EAASW,EAAGgG,EAAcA,EAAaG,SAAU5T,CAAO,CAGxE,CAFC,MAAOwU,GACL1H,EAAQ+F,MAAM,2DAA4DY,EAAce,CAAE,CAC7F,CACrC,MACoC1H,EAAQ+F,MAAM,yCAA0CY,EAAczT,EAASyN,CAAC,CAEvF,CAER,CAGZ,CAED,SAASkH,EAAiBhB,EAAS3T,GAE/ByU,EAAQd,EAAS3T,CAAO,EAKxB,IAFA,IAAI4U,EAAejB,EAAQxU,MAAM,GAAG,EAChC0V,EAAOD,EAAarX,OAAS,EACxBC,EAAIqX,EAAU,EAAJrX,EAAO,EAAEA,EAAG,CAC3B,IAAIsX,EAAcF,EAAa9Y,MAAM,EAAG0B,CAAC,EAAEE,KAAK,GAAG,EAAI,KAGnDF,IAAMqX,GACNJ,EAAQK,EAAa9U,CAAO,EAIhCyU,EADAK,GAAe,IACM9U,CAAO,CAC/B,CACJ,CAED,SAAS+U,IACkB,OAAnB5F,GACArC,EAAQxB,aAAa6D,CAAc,EAEvCA,EAAiB,IACpB,CAED,SAAS6F,GAAaC,EAAW5J,GAC7B0J,IACIG,EAAO7F,EAAQwB,SAAWxF,EAC9ByB,EAAQI,OAAO,wBAAyBgI,EAAM,iBAAkB7F,EAAQwB,SAAU,YAAa3B,EAAU+F,CAAS,EAClH9F,EAAiBrC,EAAQ1B,WAAW6J,EAAWC,CAAI,CACtD,CAYD,SAASC,EAAMC,EAAUtH,EAAauH,GAKlC,IAAK,IA2BDhgB,EA3BKmI,EAAI,EAAGA,EAAI4X,EAAS7X,OAAQ,EAAEC,EAAG,CACtC,IAAIwC,EAAUoV,EAAS5X,GACnB8X,EAAYtV,EAAQ/I,GAEpB2X,IACA5O,EAAQuV,SAAW3G,GAInB5O,OADJA,EAtGR,SAAkCA,GAC9B,IAAK,IAAIxC,EAAI4R,EAAY7R,OAAS,EAAQ,GAALC,GAC7BwC,MAAAA,EADqC,EAAExC,EAAG,CAK9C,IAAIgY,EAAYpG,EAAY5R,GACxBU,EAAWsX,EAAUA,UAAUnB,SAC/BlD,EAAYjT,CAAQ,IAEpB8B,EAAqB7F,KAAAA,KADjBgB,EAASgZ,EAAgBqB,EAAUA,UAAWtX,EAAUsX,EAAUhc,KAAMwG,EAAS,CAAA,CAAI,GACxDA,EAAU7E,EAElD,CACD,OAAO6E,CACV,EAwF0CA,CAAO,IAGtCA,EAAQ/I,GAAKqe,EACbF,EAAS5X,GAAKwC,IAEd,OAAOsP,EAAWgG,GAClBF,EAAS5I,OAAOhP,CAAC,GAAI,CAAC,EAE7B,CAEuB,IAApB4X,EAAS7X,SAITuQ,IACA8B,EAAewF,EAAS,IAGxB/f,EAAMyX,EAAQa,SACdkC,EAAQU,yBAEHlb,EAAIoD,MAAM,KAAK,IAChBpD,GAAY,KAEZggB,KACAhgB,GAAYggB,GAyBpBvI,EAAQI,OAAO,OArBXW,EAAW,CACXxY,IAAKA,EACLogB,KAAM,CAAA,EACNL,SAAUA,EACVM,UAAW,SAASC,GAChB,IACItH,EAAgBrR,KAAK8P,EAAS6I,CAAY,CAG7C,CAFC,MAAOlI,GACLX,EAAQ+F,MAAM,wCAAyCpF,CAAC,CAC3D,CACJ,EACDmI,UAAW,SAASC,EAAST,EAAUU,GACnC,IACI,IAAI1J,EAAYU,EAAQiJ,eACxBD,EAAQE,eAAiB5J,EAAYA,EAAUsB,QAAO,EAAK,UAC3DY,EAAetR,KAAK8P,EAAS+I,EAAST,EAAUU,CAAO,CAG1D,CAFC,MAAOrI,GACLX,EAAQ+F,MAAM,uCAAwCpF,CAAC,CAC1D,CACJ,CACjB,CAC2C,EAC/BS,EAAWzM,KAAKoM,EAAUC,CAAW,EACxC,CAED,SAASmI,EAAWjW,GACH,EAAT6O,GAAiC,CAAA,IAAnBE,EACdD,EAAczQ,KAAK2B,CAAO,EAE1BmV,EAAM,CAACnV,GAAU,CAAA,CAAK,CAE7B,CAWD,SAASkW,IACLhH,EAAW,CACd,CAkBD,SAASiH,KACL,IAAIf,EAAWtG,EACfA,EAAgB,GACM,EAAlBsG,EAAS7X,QACT4X,EAAMC,EAAU,CAAA,CAAK,CAE5B,CAgDD,SAASgB,EAAgB/K,GACrB0I,EAAW,YAAY,EACvBiB,GAAa,WA3BjB,IAEYqB,EADHpC,EAAe,IACZoC,EAAgB,CAChBpf,GAAIid,EAAgB,EACpBP,QAAS,gBACTqC,eAAgB9H,EAAWR,QAAS,CACxD,EAMqB+B,IACD4G,EAAc1F,OAAS,CACnBC,QAAS,CACjC,GAGgBmD,EAAW,YAAY,EACvBjH,EAAQI,OAAO,eAAgBmJ,CAAa,EAC5ClB,EAAM,CAACkB,GAAgB,CAAA,EAAM,SAAS,EACtCtC,EAAW,WAAW,EAQzB,EAAE1I,CAAK,CACX,CAED,SAASiL,GAAcC,GACfA,IACAlH,EAAUvC,EAAQO,OAAO,CAAA,EAAO,GAAIwC,EAAQc,OAAQ4F,CAAS,EAC7DzJ,EAAQI,OAAO,aAAcmC,CAAO,EAE3C,CAED,SAASmH,EAAYjW,GACjBwU,IACIxU,GAAS2N,GACTA,EAAW3N,MAAK,EAEpBkO,EAAe,CAAA,EACfP,EAAa,KACb6F,EAAW,cAAc,EAGzBmC,IAEAzG,EADAD,EAAe,CAAA,EAGfI,EANAhB,EAAY,MAKZc,EAJAb,EAAS,GAQLC,EAAcvR,SACV6X,EAAWtG,EACfA,EAAgB,GAChBR,EAAetR,KAAK8P,EAAS3S,KAAAA,EAAWib,EAAU,CAC9CqB,OAAQ,cAC5B,CAAiB,EAER,CAED,SAASC,GAA0BC,EAAcC,EAAcd,GAC3D,IAAIxB,EAAUxH,EAAQ+J,qBACtB,GAAI1F,EAAYmD,CAAO,EAAG,CACtBxH,EAAQI,OAAO,uCAAwCyJ,EAAcC,EAAcd,CAAO,EAC1F,IACIxB,EAAQtX,KAAK8P,EAASgJ,EAASa,EAAcC,CAAY,CAG5D,CAFC,MAAOnJ,GACLX,EAAQ+F,MAAM,4DAA6DpF,CAAC,CAC/E,CACJ,CACJ,CAKD,SAASqJ,GAAWC,EAAgBC,GAC5B7F,EAAY4F,CAAc,IAC1BC,EAAoBD,EACpBA,EAAiB5c,KAAAA,GAGrByU,EAAY,KAEZkF,IAGIG,EAAe,GACfrI,EAAYgB,MAAM,CAAA,CAAI,EAI1B0J,GAAc,EAAE,EAWhBvH,EAAiB,EATjBF,EAAS,GAaTV,EAAkB4I,EAClB3I,EAAqB4I,EAErB,IAAIjL,EAAU,MAGV1W,EAAMyX,EAAQa,SACdsJ,EAAiBrL,EAAYE,mBAAmBC,EAAS0C,EAAcpZ,CAAG,EAE1EghB,EAAgB,CAChBpf,GAAIid,EAAgB,EACpBnI,QAASA,EACTmL,eAAgBnL,EAChB4H,QAAS,kBACTwD,yBAA0BF,EAC1BtG,OAAQ,CACJC,QAASvB,EAAQuB,QACjBC,SAAUxB,EAAQwB,QACrB,CACjB,EAEgB7Q,EAAU8M,EAAQO,OAAO,CAAA,EAAO,GAAIc,EAAiBkI,CAAa,EAOtE,IAJAvJ,EAAQsK,aAAapX,EAAQ/I,GAAI+f,CAAiB,EAI9C,CAAC9I,IAEG,EADJA,EAAatC,EAAYK,mBAAmBgL,EAAgBlL,EAAS0C,EAAcpZ,CAAG,GAIlF,MAFIygB,EAAU,2CAA6ClK,EAAYC,kBAAiB,EACxFiB,EAAQuK,MAAMvB,CAAO,EACfA,EAIdhJ,EAAQI,OAAO,uBAAwBgB,EAAWR,QAAS,CAAA,EAI3DqG,EAAW,aAAa,EACxBjH,EAAQI,OAAO,iBAAkBlN,CAAO,EACxCmV,EAAM,CAACnV,GAAU,CAAA,EAAO,WAAW,CACtC,CAeD,SAASsX,GAAgBpZ,EAAU8B,GAC/B,IACI9B,EAASlB,KAAK8P,EAAS9M,CAAO,CAajC,CAZC,MAAOyN,GACD6G,EAAUxH,EAAQyK,oBACtB,GAAIpG,EAAYmD,CAAO,EAAG,CACtBxH,EAAQI,OAAO,sCAAuCO,CAAC,EACvD,IACI6G,EAAQtX,KAAK8P,EAASW,EAAGzN,CAAO,CAGnC,CAFC,MAAOwU,GACL1H,EAAQ+F,MAAM,2DAA4D2B,CAAE,CAC/E,CACrB,MACoB1H,EAAQ+F,MAAM,iDAAkDpF,CAAC,CAExE,CACJ,CAcD,SAAS+J,EAAgBxX,GACrB,IAAI9B,EAAW4O,EAAQ2K,aAAa,CAACzX,EAAQ/I,GAAG,EAC5Cka,EAAYjT,CAAQ,IACpB,OAAOoR,EAAWtP,EAAQ/I,IAC1BqgB,GAAgBpZ,EAAU8B,CAAO,EAExC,CAED,SAAS0X,GAAkB1X,GACvB,IAAI2X,EAAUpI,EAAavP,EAAQ/I,IAEnC,GADA,OAAOsY,EAAavP,EAAQ/I,IACxB0gB,EAAS,CACT7K,EAAQI,OAAO,oCAAqClN,EAAS,eAAgB2X,CAAO,EAGpF,IAAI/G,EAAU+G,EAAQ/G,QAKlB1S,GAJA0S,GACA9D,EAAQxB,aAAasF,CAAO,EAGjB+G,EAAQzZ,UACvB,GAAIiT,EAAYjT,CAAQ,EAEpB,OADAoZ,GAAgBpZ,EAAU8B,CAAO,EAC1B,CAEd,CAEJ,CA8ED,SAAS4X,GAAwBC,GAC7B/K,EAAQI,OAAO,6BAA8B2K,CAAW,EAEpDA,EAAYzL,YACZ8B,EAAa2J,EAAYzL,WAGzByL,EAAYxiB,KACZ6Y,EAAWN,OAAOiK,EAAYxiB,GAAG,EAGrC,IA/JuBgW,EA+JnByM,EAASD,EAAYC,OACrBzM,EAAQwM,EAAYxM,OAAS,EACjC,OAAQyM,GACJ,IAAK,YAlKczM,EAmKGA,EAlK1B0I,EAAW,aAAa,EAKxBhF,EAAiB,CAAA,EAEjBiG,GAAa,WACT8B,GAAW3I,EAAiBC,CAAkB,CACjD,EAAE/C,CAAK,EA0JA,MACJ,IAAK,QACD+K,EAAgB/K,CAAK,EACrB,MACJ,IAAK,OACDmL,EAAY,CAAA,CAAI,EAChB,MACJ,QACI,KAAM,kBAAoBsB,CACjC,CACJ,CAED,SAASC,GAAe/X,EAAS6X,GAC7BL,EAAgBxX,CAAO,EACvB2U,EAAiB,kBAAmB3U,CAAO,EAC3C2U,EAAiB,qBAAsB3U,CAAO,EAG1CiU,EAAe,IACf4D,EAAYC,OAAS,QAGzBhL,EAAQkL,mBAAmBhb,KAAK8P,EAAS9M,EAAS6X,EAAaD,EAAuB,CACzF,CAuED,SAASK,GAAkBC,GACvB,MAAgB,iBAAZxJ,GAGAkB,GAAgBA,EAAa3Y,KAAOihB,EAAQjhB,KAC5C2Y,EAAe,KACR,EAGd,CAED,SAASuI,GAAanY,EAAS6X,GAE3BlD,EAAiB,gBAAiB3U,CAAO,EACzC2U,EAAiB,qBAAsB3U,CAAO,EAG1CiU,EAAe,IACf4D,EAAYC,OAAS,QAGzBhL,EAAQkL,mBAAmBhb,KAAK8P,EAAS9M,EAAS6X,EAAaD,EAAuB,CACzF,CAiDD,SAASQ,GAAgBpY,GACrBwW,EAAY,CAAA,CAAI,EAChBgB,EAAgBxX,CAAO,EACvB2U,EAAiB,mBAAoB3U,CAAO,EAC5C2U,EAAiB,qBAAsB3U,CAAO,CACjD,CAiBD,SAASqY,GAAerY,GACpB,IAIgByT,EAJZC,EAAgBzE,EAAWjP,EAAQyT,cACvC,GAAIC,EACA,IAAK,IAAIzc,KAAMyc,EACPA,EAAcxe,eAAe+B,CAAE,IAC3Bwc,EAAeC,EAAczc,KACb,CAACwc,EAAaG,WAC9B,OAAOF,EAAczc,GACrB6V,EAAQI,OAAO,8BAA+BuG,CAAY,GAK1E+D,EAAgBxX,CAAO,EACvB2U,EAAiB,kBAAmB3U,CAAO,EAC3C2U,EAAiB,qBAAsB3U,CAAO,CACjD,CAeD,SAASsY,GAAiBtY,GACtBwX,EAAgBxX,CAAO,EACvB2U,EAAiB,oBAAqB3U,CAAO,EAC7C2U,EAAiB,qBAAsB3U,CAAO,CACjD,CAeD,SAASuY,GAAavY,GACb0X,GAAkB1X,CAAO,IAC1BwX,EAAgBxX,CAAO,EACvB2U,EAAiB,gBAAiB3U,CAAO,EACzC2U,EAAiB,qBAAsB3U,CAAO,EAErD,CAgCD,SAASwY,GAASxY,GAUd,IA7D0BA,EAuD1B,GAHA0P,EAAiB,EAGb1P,OADJA,EAt0BJ,SAAkCA,GAC9B,IAAK,IAAIxC,EAAI,EAAGA,EAAI4R,EAAY7R,QACxByC,MAAAA,EADgC,EAAExC,EAAG,CAKzC,IAAIgY,EAAYpG,EAAY5R,GACxBU,EAAWsX,EAAUA,UAAUiD,SAC/BtH,EAAYjT,CAAQ,IAEpB8B,EAAqB7F,KAAAA,KADjBgB,EAASgZ,EAAgBqB,EAAUA,UAAWtX,EAAUsX,EAAUhc,KAAMwG,EAAS,CAAA,CAAK,GACzDA,EAAU7E,EAElD,CACD,OAAO6E,CACV,EAwzBsCA,CAAO,GAQ1C,OAHAsW,GAActW,EAAQ2Q,MAAM,EAEd3Q,EAAQ2T,SAElB,IAAK,kBACD+E,IAvQgB1Y,EAuQGA,EAtQvB3K,EAAMyX,EAAQa,SAClB,GAAI3N,EAAQ2Y,WAAY,CACpB,IAAI3M,EAAcc,EAAQ8F,eAAeV,EAAU7c,CAAG,EAAE,EAAE,EACtDuhB,EAAehL,EAAYK,mBAAmBjM,EAAQmX,yBAA0BnX,EAAQ+L,QAASC,EAAa3W,CAAG,EACrH,GAAqB,OAAjBuhB,EACA5W,EAAQ2Y,WAAa,CAAA,EACrBZ,GAAe/X,EAAS,CACpB4Y,MAAO,cACPd,OAAQ,OACR1L,UAAW,IACnC,CAAqB,MANL,CAQW8B,IAAe0I,IACtB9J,EAAQI,OAAO,YAAagB,EAAWR,QAAS,EAAE,KAAMkJ,EAAalJ,QAAO,CAAE,EAC9EQ,EAAa0I,GAGjBhI,EAAY5O,EAAQuV,SAIpBxG,EAAiB,CAAA,EACjBoH,KAKAnW,EAAQ6Y,YAAcrJ,EACtBA,EAAe,CAAA,EAEfgI,EAAgBxX,CAAO,EACvB2U,EAAiB,kBAAmB3U,CAAO,EAE3C2P,EAAqB3P,EAAQ,eAAiB,EAE9C,IAAI8X,EAAS7D,EAAiB,EAAG,OAAS5E,EAAQyB,WAAa,QAC/D,OAAQgH,GACJ,IAAK,QACD5B,IAC2B,IAAvBvG,EACAyG,EAAgB,CAAC,EAEjBtJ,EAAQI,OAAO,aAAcyC,EAAoB,8BAA8B,EAEnF,MACJ,IAAK,OACD6G,EAAY,CAAA,CAAI,EAChB,MACJ,QACI,KAAM,8BAAgCsB,CAC7C,CAnCA,CAoCjB,MACgBC,GAAe/X,EAAS,CACpB4Y,MAAO,eACPd,OAAQzI,EAAQyB,WAAa,YAC7B1E,UAAW8B,CAC/B,CAAiB,EA+MG,MACJ,IAAK,gBA5KalO,EA6KGA,EA5KzB,GAAIiY,GAAkBjY,CAAO,EAEzB,GADAyP,EAAazP,EAAQ2Y,WACL,CACZhE,EAAiB,gBAAiB3U,CAAO,EAMzC,IAAI8X,EAAS7D,EAAiB,EAAG,OAAS5E,EAAQyB,WAAa,QAC/D,OAAQgH,GACJ,IAAK,QACD5B,IACAE,EAAgBlH,CAAQ,EACxB,MACJ,IAAK,OACDsH,EAAY,CAAA,CAAK,EACjB,MACJ,QACI,KAAM,8BAAgCsB,CAC7C,CACrB,MACoBK,GAAanY,EAAS,CAClB4Y,MAAO,eACPd,OAAQzI,EAAQyB,WAAa,QAC7B1E,UAAW8B,CACnC,CAAqB,OAGLpB,EAAQI,OAAO,iCAAkClN,CAAO,EAgJpD,MACJ,IAAK,oBAzHgBA,EA0HGA,GAzHhB2Y,YAERnC,EAAY,CAAA,CAAK,EACjBgB,EAAgBxX,CAAO,EACvB2U,EAAiB,mBAAoB3U,CAAO,GAE5CoY,GAAgBpY,CAAO,EAoHnB,MACJ,IAAK,mBA3FeA,EA4FGA,GA3Ff2Y,YACRnB,EAAgBxX,CAAO,EACvB2U,EAAiB,kBAAmB3U,CAAO,GAE3CqY,GAAerY,CAAO,EAwFlB,MACJ,IAAK,qBA3EiBA,EA4EGA,GA3EjB2Y,YACRnB,EAAgBxX,CAAO,EACvB2U,EAAiB,oBAAqB3U,CAAO,GAE7CsY,GAAiBtY,CAAO,EAwEpB,MACJ,QAxDiB7F,KAAAA,KADC6F,EA0DGA,GAzDbjK,KACH2hB,GAAkB1X,CAAO,IAC1B2U,EAAiB3U,EAAQ2T,QAAS3T,CAAO,EAChB,EAArB2P,GAE2B,IAD3B,EAAEA,IAEE7C,EAAQI,OAAO,4CAA4C,EAC3DkJ,EAAgB,CAAC,IAKFjc,KAAAA,IAAvB6F,EAAQ2Y,WACR7L,EAAQuK,MAAM,yBAA0BrX,CAAO,EAE3CA,EAAQ2Y,YACRnB,EAAgBxX,CAAO,EACvB2U,EAAiB,gBAAiB3U,CAAO,GAEzCuY,GAAavY,CAAO,CAwC/B,CACJ,CAwDD,SAAS8Y,GAAkBnF,GACvB,IAAID,EAAgBzE,EAAW0E,GAC/B,GAAID,EACA,IAAK,IAAIzc,KAAMyc,EACX,GAAIA,EAAcxe,eAAe+B,CAAE,GAC3Byc,EAAczc,GACd,OAAO,CAM1B,CAED,SAAS8hB,GAAuB3E,EAAOlW,GACnC,IAAI8a,EAAW,CACX5E,MAAOA,EACPnf,OAAQiJ,CACxB,EACY,GAAIiT,EAAYiD,CAAK,EACjB4E,EAAS5E,MAAQja,KAAAA,EACjB6e,EAAS/jB,OAASmf,OAElB,GAAIlD,EAAUhT,CAAQ,EAAG,CACrB,GAAI,CAACkW,EACD,KAAM,iBAAmBA,EAG7B,GADA4E,EAAS/jB,OAASmf,EAAMlW,GACpB,CAACiT,EAAY6H,EAAS/jB,MAAM,EAC5B,KAAM,oBAAsBiJ,EAAW,cAAgBkW,CAE/E,MAAuB,GAAI,CAACjD,EAAYjT,CAAQ,EAC5B,KAAM,oBAAsBA,EAGpC,OAAO8a,CACV,CAED,SAASC,GAAatF,EAASS,EAAOlW,EAAUgb,GAI5C,IAAIF,EAAWD,GAAuB3E,EAAOlW,CAAQ,EAGjDjH,GAFJ6V,EAAQI,OAAO,SAAUgM,EAAa,WAAa,eAAgB,KAAMvF,EAAS,aAAcqF,EAAS5E,MAAO,eAAgB4E,EAAS/jB,MAAM,EAEtI,EAAE+Z,GACPyE,EAAe,CACfxc,GAAIA,EACJ0c,QAASA,EACTS,MAAO4E,EAAS5E,MAChBlW,SAAU8a,EAAS/jB,OACnB2e,SAAUsF,CAC1B,EAEgBxF,EAAgBzE,EAAW0E,GAU/B,OATKD,IAEDzE,EAAW0E,GADXD,EAAgB,IAIpBA,EAAczc,GAAMwc,EAEpB3G,EAAQI,OAAO,QAASgM,EAAa,WAAa,eAAgBzF,CAAY,EAEvEA,CACV,CA1uCD9f,KAAK0Z,OAAS,SAAS8L,EAAMC,EAAQC,GAIjC,IAHA,IAAIle,EAASie,GAAU,GAGd5b,EAAI,EAAGA,EAAI4P,UAAU7P,OAAQ,EAAEC,EAAG,CACvC,IAQY8b,EAgBQC,EAxBhBtI,EAAS7D,UAAU5P,GAEvB,GAAIyT,MAAAA,EAIJ,IAAK,IAAIuI,KAAYvI,EACbA,EAAO/b,eAAeskB,CAAQ,IAC1BF,EAAOtI,EAAYC,EAAQuI,CAAQ,EACnCC,EAAOzI,EAAY7V,EAAQqe,CAAQ,EAGnCF,IAASF,IAIAjf,KAAAA,IAATmf,IAIAH,GAAwB,UAAhB,OAAOG,GAA8B,OAATA,EAChCA,aAAgB/e,MAChBY,EAAOqe,GAAY7lB,KAAK0Z,OAAO8L,EAAMM,aAAgBlf,MAAQkf,EAAO,GAAIH,CAAI,GAExEC,EAAyB,UAAhB,OAAOE,GAAuBA,aAAgBlf,MAAgB,GAAPkf,EACpEte,EAAOqe,GAAY7lB,KAAK0Z,OAAO8L,EAAMI,EAAQD,CAAI,GAGrDne,EAAOqe,GAAYF,EAIlC,CAED,OAAOne,CACnB,EAqCQxH,KAAK0jB,MAAQ,WACT9F,EAAK,OAAQnE,SAAS,CAClC,EAEQzZ,KAAKkf,MAAQ,WACgB,SAArBhD,EAAQO,UACRmB,EAAK,OAAQnE,SAAS,CAEtC,EAEQzZ,KAAKuZ,OAAS,WACe,UAArB2C,EAAQO,UACRmB,EAAK,QAASnE,SAAS,CAEvC,EAwBQzZ,KAAKif,eAAiB,SAASH,GAC3B,MAAIhQ,CAAAA,EAAAA,OAAO3C,UAAY2C,OAAO3C,SAAS2D,MAC/BgP,IACOA,IAAgBhQ,OAAO3C,SAAS2D,IAI3D,EAiVQ9P,KAAK8N,KAAOwU,EA+OZtiB,KAAK8jB,aAAe,SAASnC,GACzB,OAAOhG,EAAWgG,EAC9B,EAEQ3hB,KAAKyjB,aAAe,SAAS9B,EAAWpX,GACpC,IAAI/C,EAASxH,KAAK8jB,aAAanC,CAAS,EAIxC,OAHInE,EAAYjT,CAAQ,IACpBoR,EAAWgG,GAAapX,GAErB/C,CACnB,EA+BQxH,KAAKqkB,mBAAqB,SAAShY,EAAS6X,EAAa6B,GACrD/lB,KAAKuZ,OAAO,oBAAqB2K,EAAa,MAAO7X,CAAO,EAE5D,IAwBgB2Z,EAxBZC,EAAajmB,KAAKkmB,uBAClBxkB,EAAM1B,KAAKga,SACX3B,EAAcrY,KAAKif,eAAeV,EAAU7c,CAAG,EAAE,EAAE,EAEnD4hB,EAAiB2C,EAAW9N,mBADlB,MAC8CE,EAAa3W,CAAG,EAEjD,SAAvBwiB,EAAYC,OACY,oBAApB9X,EAAQ2T,SACHkE,EAAYzL,YACT0J,EAAU,0CAA4CmB,EAAiB,cAAgBjX,EAAQmX,yBAA2B,IAC9HxjB,KAAK0jB,MAAMvB,CAAO,EAClBY,GAA0BxI,EAAWR,QAAS,EAAE,KAAM,CAClD+I,OAAQX,EACRE,eAAgB9H,EAAWR,QAAS,EACpCtB,UAAW8B,CACvC,CAAyB,IAIT2J,EAAYxM,MAAQ1X,KAAKmmB,mBAED,oBAApB9Z,EAAQ2T,SACHkE,EAAYzL,YAETuN,EAAmBzL,EAAaA,EAAWR,QAAO,EAAK,MACvDkJ,EAAegD,EAAW3N,mBAAmBgL,EAtB/C,MAsBwEjL,EAAa3W,CAAG,IAMlF0kB,EAAmBnD,EAAalJ,UACpC/Z,KAAKuZ,OAAO,YAAayM,EAAkB,KAAMI,CAAgB,EACjErD,GAA0BiD,EAAkBI,EAAkB/Z,EAAQ8V,OAAO,EAC7E+B,EAAYC,OAAS,YACrBD,EAAYzL,UAAYwK,IARxBjjB,KAAK0jB,MAAM,0CAA4CJ,EAAiB,GAAG,EAC3EP,GAA0BiD,EAAkB,KAAM3Z,EAAQ8V,OAAO,EACjE+B,EAAYC,OAAS,SAUF,SAAvBD,EAAYC,QACZnkB,KAAKqmB,sBAAqB,IAG1BtI,GAAM,IAAIG,MAAOoI,QAAO,EAEL,IAAnBvK,IACAA,EAAiBgC,GAGM,UAAvBmG,EAAYC,SACZD,EAAYxM,MAAQ1X,KAAKqmB,wBAGP,GADdjJ,EAAc1B,EAAQ0B,eAEL1B,EAAQuB,QAAUvB,EAAQwB,SAAWE,EACpCW,EAAMhC,EACNR,IACd2I,EAAYC,OAAS,aAKN,cAAvBD,EAAYC,SACZD,EAAYxM,MAAQ,EACpBuO,EAAWhN,MAAM,CAAA,CAAK,EACtBjZ,KAAKumB,mBAAkB,KAKnCR,EAAe1c,KAAK8P,EAAS+K,CAAW,CACpD,EA2UQlkB,KAAKwmB,QAAU3B,GAEfnK,EAAkB,SAASsH,GACvB7I,EAAQI,OAAO,WAAYyI,CAAY,EAEvC,IAAK,IAAInY,EAAI,EAAGA,EAAImY,EAAapY,OAAQ,EAAEC,EAEvCgb,GADc7C,EAAanY,EACX,CAEhC,EAEQ8Q,EAAiB,SAASuH,EAAST,EAAUU,GACzChJ,EAAQI,OAAO,gBAAiB2I,EAAST,EAAUU,CAAO,EAE1DA,EAAQ1J,UAAYyJ,EACpB,IAAK,IAhLgB7V,EAgLZxC,EAAI,EAAGA,EAAI4X,EAAS7X,OAAQ,EAAEC,EAAG,CACtC,IAAIwC,EAAUoV,EAAS5X,GACnB4c,EAAiB,CACjBnjB,GAAI+I,EAAQ/I,GACZ0hB,WAAY,CAAA,EACZhF,QAAS3T,EAAQ2T,QACjBmC,QAASA,CAC7B,EAEgB,QADAA,EAAQ9V,QAAUA,GACF2T,SACZ,IAAK,kBA3PboE,GA4P8BqC,EA5PN,CACpBxB,MAAO,UACPd,OAAQ,YACR1L,UAAW,IAC3B,CAAa,EAyPW,MACJ,IAAK,gBA5LT6L,GADiBjY,EA8LOoa,CA7LC,GACzB3K,EAAa,CAAA,EACb0I,GAAanY,EAAS,CAClB4Y,MAAO,UACPd,OAAQ,QACR1L,UAAW,IAC/B,CAAiB,GAEDU,EAAQI,OAAO,mCAAoClN,CAAO,EAsLlD,MACJ,IAAK,mBAhKboY,GAiK+BgC,CAjKR,EAkKX,MACJ,IAAK,kBACDA,EAAe3G,aAAezT,EAAQyT,aArIlD4E,GAsI8B+B,CAtIR,EAuIV,MACJ,IAAK,oBACDA,EAAe3G,aAAezT,EAAQyT,aAtHlD6E,GAuHgC8B,CAvHR,EAwHZ,MACJ,QAnFR7B,GAoF4B6B,CApFR,CAsFf,CACJ,CACb,EAqFQzmB,KAAK0mB,kBAAoB,SAASniB,EAAMkU,EAAWE,GAC3CnR,EAASyQ,EAAYS,IAAInU,EAAMkU,EAAWE,CAAK,EAQnD,OAPInR,IACAxH,KAAKuZ,OAAO,uBAAwBhV,CAAI,EAEpCiZ,EAAY/E,EAAUW,UAAU,IAChCX,EAAUW,WAAW7U,EAAMvE,IAAI,EAGhCwH,CACnB,EAQQxH,KAAK2mB,oBAAsB,SAASpiB,GAChC,IAAIkU,EAAYR,EAAYc,OAAOxU,CAAI,EAQvC,OAPkB,OAAdkU,IACAzY,KAAKuZ,OAAO,yBAA0BhV,CAAI,EAEtCiZ,EAAY/E,EAAUa,YAAY,IAClCb,EAAUa,aAAY,EAGvBb,CACnB,EAEQzY,KAAK4mB,qBAAuB,WACxB3O,EAAYe,MAAK,CAC7B,EAKQhZ,KAAKkY,kBAAoB,WACrB,OAAOD,EAAYC,mBAC/B,EAEQlY,KAAK6mB,cAAgB,SAAShhB,GAC1B,OAAOoS,EAAYa,KAAKjT,CAAI,CACxC,EAKQ7F,KAAKkmB,qBAAuB,WACxB,OAAOjO,CACnB,EAQQjY,KAAK8mB,UAAY,SAASnI,GACtBD,EAAWrV,KAAKrJ,KAAM2e,CAAa,CAC/C,EAUQ3e,KAAK8D,KAAO,SAAS6a,EAAeyE,GAChCpjB,KAAK8mB,UAAUnI,CAAa,EAC5B3e,KAAK+mB,UAAU3D,CAAc,CACzC,EAQQpjB,KAAK+mB,UAAY,SAAS3D,EAAgBC,GACtC,GAAgB,iBAAZtI,EACA,KAAM,4BAEVoI,GAAWC,EAAgBC,CAAiB,CACxD,EAOQrjB,KAAKgnB,WAAa,SAASC,EAAiBC,GACxC,IASIxE,EATApC,EAAe,IAIf9C,EAAYyJ,CAAe,IAC3BC,EAAqBD,EACrBA,EAAkBzgB,KAAAA,GAGlBkc,EAAgB,CAChBpf,GAAIid,EAAgB,EACpBP,QAAS,kBACzB,EAEgB3T,EAAUrM,KAAK0Z,OAAO,CAAA,EAAO,GAAIuN,EAAiBvE,CAAa,EAGnEvJ,EAAQsK,aAAapX,EAAQ/I,GAAI4jB,CAAkB,EAEnD9G,EAAW,eAAe,EAC1BoB,EAAM,CAACnV,GAAU,CAAA,EAAO,YAAY,EAChD,EAWQrM,KAAKmnB,WAAa,WA75Bd,EAAEjM,EACF/B,EAAQI,OAAO,wBAAyB2B,CAAM,CA85B1D,EAOQlb,KAAKonB,SAAW,WAj5BZ,GAFA,EAAElM,EACF/B,EAAQI,OAAO,sBAAuB2B,CAAM,EACxCA,EAAS,EACT,KAAM,sDAGK,IAAXA,GAAiBoF,EAAiB,GAAKlF,GACvCoH,IA84BhB,EAQQxiB,KAAKqnB,MAAQ,SAAS5G,EAAOlW,GACrB8a,EAAWD,GAAuB3E,EAAOlW,CAAQ,EACrDvK,KAAKmnB,WAAU,EACf,IACI9B,EAAS/jB,OAAO+H,KAAKgc,EAAS5E,KAAK,EACnCzgB,KAAKonB,SAAQ,CAKhB,CAJC,MAAOtN,GAGL,MAFA9Z,KAAKkf,MAAM,sCAAuCpF,CAAC,EACnD9Z,KAAKonB,SAAQ,EACPtN,CACT,CACb,EAWQ9Z,KAAKsnB,YAAc,SAAStH,EAASS,EAAOlW,GACxC,GAAIkP,UAAU7P,OAAS,EACnB,KAAM,6CAA+C6P,UAAU7P,OAEnE,GAAK2T,EAAUyC,CAAO,EAItB,OAAOsF,GAAatF,EAASS,EAAOlW,EAAU,CAAA,CAAI,EAH9C,KAAM,iDAItB,EAOQvK,KAAKunB,eAAiB,SAASzH,GAE3B,GAAI,EAACA,GAAiBA,EAAaE,SAAa,OAAQF,GACpD,KAAM,gDAAkDA,EAG5DD,EAAgBC,CAAY,CACxC,EAMQ9f,KAAKwnB,eAAiB,WAClBlM,EAAa,EACzB,EAYQtb,KAAKynB,UAAY,SAASzH,EAASS,EAAOlW,EAAUmd,EAAgBC,GAChE,GAAIlO,UAAU7P,OAAS,EACnB,KAAM,6CAA+C6P,UAAU7P,OAEnE,GAAI,CAAC2T,EAAUyC,CAAO,EAClB,KAAM,kDAEV,GAAIM,EAAe,EACf,KAAM,8BAIN9C,EAAYiD,CAAK,IACjBkH,EAAoBD,EACpBA,EAAiBnd,EACjBA,EAAWkW,EACXA,EAAQja,KAAAA,GAERgX,EAAYkK,CAAc,IAC1BC,EAAoBD,EACpBA,EAAiBlhB,KAAAA,GAIrB,IAAIsH,EAAO,CAACqX,GAAkBnF,CAAO,EAEjCF,EAAewF,GAAatF,EAASS,EAAOlW,EAAU,CAAA,CAAK,EAoB/D,OAlBIuD,IAII4U,EAAgB,CAChBpf,GAAIid,EAAgB,EACpBP,QAAS,kBACTF,aAAcE,CAClC,EAEoB3T,EAAUrM,KAAK0Z,OAAO,CAAA,EAAO,GAAIgO,EAAgBhF,CAAa,EAGlEvJ,EAAQsK,aAAapX,EAAQ/I,GAAIqkB,CAAiB,EAElDrF,EAAWjW,CAAO,GAGfyT,CACnB,EAQQ9f,KAAK4nB,YAAc,SAAS9H,EAAc+H,EAAkBC,GACxD,GAAIrO,UAAU7P,OAAS,EACnB,KAAM,6CAA+C6P,UAAU7P,OAEnE,GAAI0W,EAAe,EACf,KAAM,8BAGN9C,EAAYqK,CAAgB,IAC5BC,EAAsBD,EACtBA,EAAmBrhB,KAAAA,GAKvBxG,KAAKunB,eAAezH,CAAY,EAEhC,IAAIE,EAAUF,EAAaE,QAEtBmF,GAAkBnF,CAAO,IACtB0C,EAAgB,CAChBpf,GAAIid,EAAgB,EACpBP,QAAS,oBACTF,aAAcE,CAClC,EAEoB3T,EAAUrM,KAAK0Z,OAAO,CAAA,EAAO,GAAImO,EAAkBnF,CAAa,EAGpEvJ,EAAQsK,aAAapX,EAAQ/I,GAAIwkB,CAAmB,EAEpDxF,EAAWjW,CAAO,EAElC,EAEQrM,KAAK+nB,YAAc,SAASjI,EAAc4H,GAEtC,GADAxH,EAAoBJ,CAAY,EAC5BA,EACA,OAAO9f,KAAKynB,UAAU3H,EAAaE,QAASF,EAAaW,MAAOX,EAAavV,SAAUmd,CAAc,CAGrH,EAMQ1nB,KAAKgoB,mBAAqB,WACtB7H,GACZ,EASQngB,KAAKioB,QAAU,SAASjI,EAASkI,EAASC,EAAcC,GACpD,GAAI3O,UAAU7P,OAAS,EACnB,KAAM,6CAA+C6P,UAAU7P,OAEnE,GAAI,CAAC2T,EAAUyC,CAAO,EAClB,KAAM,kDAEV,GAAI,YAAYla,KAAKka,CAAO,EACxB,KAAM,oDAEV,GAAIM,EAAe,EACf,KAAM,8BAGN9C,EAAY0K,CAAO,GACnBE,EAAkBF,EAClBA,EAAU,GACVC,EAAe3hB,KAAAA,GACRgX,EAAY2K,CAAY,IAC/BC,EAAkBD,EAClBA,EAAe3hB,KAAAA,GAGfkc,EAAgB,CAChBpf,GAAIid,EAAgB,EACpBP,QAASA,EACT5d,KAAM8lB,CACtB,EAEgB7b,EAAUrM,KAAK0Z,OAAO,CAAA,EAAO,GAAIyO,EAAczF,CAAa,EAGhEvJ,EAAQsK,aAAapX,EAAQ/I,GAAI8kB,CAAe,EAEhD9F,EAAWjW,CAAO,CAC9B,EAcQrM,KAAKqoB,cAAgB,SAASrI,EAAS5d,EAAM8e,EAAMoH,EAAM/d,GACjDiT,EAAYpb,CAAI,GAChBmI,EAAWnI,EACXA,EAAO,IAAIgH,YAAY,CAAC,EACxB8X,EAAO,CAAA,EACPoH,EAAO9hB,KAAAA,GACAgX,EAAY0D,CAAI,GACvB3W,EAAW2W,EACXA,EAAO,CAAA,EACPoH,EAAO9hB,KAAAA,GACAgX,EAAY8K,CAAI,IACvB/d,EAAW+d,EACXA,EAAO9hB,KAAAA,GAYXxG,KAAKioB,QAAQjI,EAVC,CACVsI,KAAMA,EACNlmB,KAAMA,EACN8e,KAAMA,CACtB,EACsB,CACNxP,IAAK,CACD6W,OAAQ,EACX,CACjB,EACgDhe,CAAQ,CACxD,EAEQvK,KAAKwoB,WAAa,SAAS/C,EAAQyC,EAASjL,EAASwL,EAAWle,GAC5D,GAAIkP,UAAU7P,OAAS,EACnB,KAAM,6CAA+C6P,UAAU7P,OAEnE,GAAI,CAAC2T,EAAUkI,CAAM,EACjB,KAAM,iDAEV,GAAInF,EAAe,EACf,KAAM,8BAiBV,GAdI9C,EAAY0K,CAAO,GACnB3d,EAAW2d,EACXA,EAAU,GACVjL,EAAUf,EAAQQ,gBAClB+L,EAAYjiB,KAAAA,GACLgX,EAAYP,CAAO,GAC1B1S,EAAW0S,EACXA,EAAUf,EAAQQ,gBAClB+L,EAAYjiB,KAAAA,GACLgX,EAAYiL,CAAS,IAC5Ble,EAAWke,EACXA,EAAYjiB,KAAAA,GAGO,UAAnB,OAAOyW,EACP,KAAM,kDAGLwI,EAAO3gB,MAAM,KAAK,IACnB2gB,EAAS,IAAMA,GAEnB,IAEI/C,EAAgB,CAChBpf,GAAIid,EAAgB,EACpBP,QAJU,WAAayF,EAKvBrjB,KAAM8lB,CACtB,EACgB7b,EAAUrM,KAAK0Z,OAAO,CAAA,EAAO,GAAI+O,EAAW/F,CAAa,EAEzDsB,EAAU,CACVzZ,SAAUA,CAC1B,EAC0B,EAAV0S,IACA+G,EAAQ/G,QAAU9D,EAAQ1B,WAAW,WACjC0B,EAAQI,OAAO,yBAA0BlN,EAAS,QAAS4Q,EAAS,IAAI,EACxE2H,GAAa,CACTthB,GAAI+I,EAAQ/I,GACZoE,MAAO,eACPsd,WAAY,CAAA,EACZ7C,QAAS,CACL9V,QAASA,EACTyW,OAAQ,qBACX,CACzB,CAAqB,CACJ,EAAE7F,CAAO,EACV9D,EAAQI,OAAO,gCAAiClN,EAAS,KAAM4Q,EAAS,IAAI,GAEhFrB,EAAavP,EAAQ/I,IAAM0gB,EAE3B1B,EAAWjW,CAAO,CAC9B,EAEQrM,KAAK0oB,iBAAmB,SAASjD,EAAQrjB,EAAM8e,EAAMoH,EAAMrL,EAAS1S,GAC5DiT,EAAYpb,CAAI,GAChBmI,EAAWnI,EACXA,EAAO,IAAIgH,YAAY,CAAC,EACxB8X,EAAO,CAAA,EACPoH,EAAO9hB,KAAAA,EACPyW,EAAUf,EAAQQ,iBACXc,EAAY0D,CAAI,GACvB3W,EAAW2W,EACXA,EAAO,CAAA,EACPoH,EAAO9hB,KAAAA,EACPyW,EAAUf,EAAQQ,iBACXc,EAAY8K,CAAI,GACvB/d,EAAW+d,EACXA,EAAO9hB,KAAAA,EACPyW,EAAUf,EAAQQ,iBACXc,EAAYP,CAAO,IAC1B1S,EAAW0S,EACXA,EAAUf,EAAQQ,iBActB1c,KAAKwoB,WAAW/C,EAXF,CACV6C,KAAMA,EACNlmB,KAAMA,EACN8e,KAAMA,CACtB,EAO6CjE,EANvB,CACNvL,IAAK,CACD6W,OAAQ,EACX,CACjB,EAE2Dhe,CAAQ,CACnE,EAKQvK,KAAK2oB,UAAY,WACb,OAAO5N,CACnB,EAKQ/a,KAAK4oB,eAAiBtI,EAUtBtgB,KAAK6oB,oBAAsB,SAASC,GAChC5M,EAAQK,iBAAmBuM,CACvC,EAMQ9oB,KAAK+oB,oBAAsB,WACvB,OAAO7M,EAAQK,gBAC3B,EAKQvc,KAAKmmB,iBAAmB,WACpB,OAAO5K,CACnB,EAOQvb,KAAKqmB,sBAAwB,WACzB,OAz0CI9K,EAAWW,EAAQM,aACnBjB,GAAYW,EAAQK,kBAEjBhB,CAu0CnB,EAKQvb,KAAKumB,mBAAqB,WACtBhE,GACZ,EAQQviB,KAAKgpB,YAAc,SAASnL,GACxB3B,EAAQO,SAAWoB,CAC/B,EAqBQ7d,KAAKipB,kBAAoB,SAASpjB,EAAMgc,GACpC,GAAIpI,UAAU7P,OAAS,EACnB,KAAM,6CAA+C6P,UAAU7P,OAEnE,GAAI,CAAC2T,EAAU1X,CAAI,EACf,KAAM,yDAIV,IADA,IAAI+S,EAAW,CAAA,EACN/O,EAAI,EAAGA,EAAI4R,EAAY7R,OAAQ,EAAEC,EAEtC,GADwB4R,EAAY5R,GACdhE,OAASA,EAAM,CACjC+S,EAAW,CAAA,EACX,KACH,CAEL,OAAKA,GAcD5Y,KAAKkf,MAAM,yCAA0CrZ,EAAM,2DAA2D,EAC/G,CAAA,IAdP4V,EAAY/Q,KAAK,CACb7E,KAAMA,EACNgc,UAAWA,CAC/B,CAAiB,EACD7hB,KAAKuZ,OAAO,uBAAwB1T,CAAI,EAGpC2X,EAAYqE,EAAUzI,UAAU,GAChCyI,EAAUzI,WAAWvT,EAAM7F,IAAI,EAG5B,CAAA,EAKvB,EAQQA,KAAKkpB,oBAAsB,SAASrjB,GAChC,GAAI,CAAC0X,EAAU1X,CAAI,EACf,KAAM,yDAIV,IADA,IAAIyT,EAAe,CAAA,EACVzP,EAAI,EAAGA,EAAI4R,EAAY7R,OAAQ,EAAEC,EAAG,CACzC,IAAIgY,EAAYpG,EAAY5R,GAC5B,GAAIgY,EAAUhc,OAASA,EAAM,CACzB4V,EAAY5C,OAAOhP,EAAG,CAAC,EACvByP,EAAe,CAAA,EACftZ,KAAKuZ,OAAO,yBAA0B1T,CAAI,EAGtC6L,EAAMmQ,EAAUA,UAChBrE,EAAY9L,EAAI4H,YAAY,GAC5B5H,EAAI4H,aAAY,EAGpB,KACH,CACJ,CACD,OAAOA,CACnB,EAOQtZ,KAAKmpB,aAAe,SAAStjB,GACzB,IAAK,IAAIgE,EAAI,EAAGA,EAAI4R,EAAY7R,OAAQ,EAAEC,EAAG,CACzC,IAAIgY,EAAYpG,EAAY5R,GAC5B,GAAIgY,EAAUhc,OAASA,EACnB,OAAOgc,EAAUA,SAExB,CACD,OAAO,IACnB,EAMQ7hB,KAAKopB,QAAU,WACX,OAAOvO,CACnB,EAKQ7a,KAAKqpB,YAAc,WACf,OAAOpO,CACnB,EAKQjb,KAAKga,OAAS,WACV,GAAIO,EAAY,CACZ,IAAI7Y,EAAM6Y,EAAWP,SACrB,GAAItY,EACA,OAAOA,EAGX,GADAA,EAAMwa,EAAQY,KAAKvC,EAAWR,QAAS,GAEnC,OAAOrY,CAEd,CACD,OAAOwa,EAAQxa,GAC3B,EAEQ1B,KAAKoiB,aAAe,WAChB,OAAO7H,CACnB,EAEQva,KAAK2Z,iBAAmB,WACpB,OAAO3Z,KAAK0Z,OAAO,CAAA,EAAM,GAAIwC,CAAO,CAChD,EAEQlc,KAAK4Z,UAAY,WACb,OAAO5Z,KAAK0Z,OAAO,CAAA,EAAM,GAAIgC,CAAO,CAChD,EAEQ1b,KAAKyX,WAAa,SAASF,EAAUG,GACjC,OAAOkD,EAAWnD,WAAW,WACzB,IACI0B,EAAQI,OAAO,0BAA2BhC,CAAQ,EAClDA,GAGH,CAFC,MAAOuC,GACLX,EAAQI,OAAO,oCAAqChC,EAAUuC,CAAC,CAClE,CACJ,EAAEpC,CAAK,CACpB,EAEQ1X,KAAK2X,aAAe,SAASrU,GACzBsX,EAAWjD,aAAarU,CAAE,CACtC,EAGYwL,OAAOwa,WACPtpB,KAAK0mB,kBAAkB,YAAa,IAAIzP,EAAoB,EAEhEjX,KAAK0mB,kBAAkB,eAAgB,IAAI3P,EAAsB,EACjE/W,KAAK0mB,kBAAkB,mBAAoB,IAAI1P,EAA0B,CACjF,EAmGQH,UAAWA,EACXC,iBAn/FAA,EAAmB,WACnB,IAAIyS,EAAS,IAAI1S,EACb2S,EAAQ3S,EAAUuD,OAAOmP,CAAM,EAC/BE,EAAc,EACdC,EAAsB,KACtBC,EAAY,GACZC,EAAa,GAkBjB,SAASC,EAAe3P,EAAU3N,GAI9B,IACQud,EACApS,EAOAzS,EAZRjF,KAAK+pB,cAAc7P,EAAU3N,CAAO,EACpCA,EAAQyd,QAAU,CAAA,EAEb9P,EAAS4H,OACNgI,EAAW9pB,KAAK2Z,iBAAgB,EAAG+C,gBACnChF,EAAQoS,EACgB,CAAA,IAAxBvd,EAAQ4N,cACRzC,GAAS1X,KAAK4Z,UAAW,EAACqD,SAG9Bjd,KAAKuZ,OAAO,YAAavZ,KAAK+Z,UAAW,kBAAmBrC,EAAO,uCAAwCoS,CAAQ,EAGnHvd,EAAQ0Q,SADJhY,EAAOjF,MACYyX,WAAW,WAC9BlL,EAAQyd,QAAU,CAAA,EAClB,IAAIC,EAAe,WAAa1d,EAAQjJ,GAAK,iBAAmB2B,EAAK8U,QAAS,EAAG,aAAerC,EAAQ,wBACpGyK,EAAU,CACVW,OAAQmH,CAChC,EACwBxd,EAAMF,EAAQE,IAClB0V,EAAQ+H,SAAWjlB,EAAKklB,UAAU1d,CAAG,EACrCxH,EAAKmlB,SAAS3d,CAAG,EACjBxH,EAAKsU,OAAO0Q,CAAY,EACxBhlB,EAAKolB,SAAS9d,EAAS,CAAA,EAAOA,EAAQ4N,WAAW,EACjDD,EAAS+H,UAAUxV,EAAKyN,EAASuH,SAAUU,CAAO,CACrD,EAAEzK,CAAK,EAEf,CAED,SAAS4K,EAAWpI,GAChB,IAAIoQ,EAAY,EAAEb,EACdld,EAAU,CACVjJ,GAAIgnB,EACJnQ,YAAa,CAAA,EACbD,SAAUA,CAC1B,EAGgByP,EAAU/f,OAAS5J,KAAK2Z,iBAAkB,EAAC2C,eAAiB,GAC5DqN,EAAUjf,KAAK6B,CAAO,EACtBsd,EAAexgB,KAAKrJ,KAAMka,EAAU3N,CAAO,IAE3CvM,KAAKuZ,OAAO,YAAavZ,KAAK+Z,UAAW,mBAAoBuQ,EAAW,WAAYpQ,CAAQ,EAC5F0P,EAAWlf,KAAK,CAACwP,EAAU3N,EAAQ,EAE1C,CAWD,SAASge,EAAUhe,EAASie,GACxB,IAQQC,EACAC,EAUIzlB,EAnBR0T,EAAQhC,GAAMkB,QAAQtL,EAASod,CAAS,EAE/B,GAAThR,GACAgR,EAAU9Q,OAAOF,EAAO,CAAC,EAGL,EAApBiR,EAAWhgB,SACP+gB,EAAqBf,EAAWtjB,QAChCmkB,EAAeE,EAAmB,GAClCD,EAAcC,EAAmB,GACrC3qB,KAAKuZ,OAAO,6BAA8BmR,EAAYpnB,EAAE,EACpDknB,GACIxqB,KAAK2Z,iBAAkB,EAACkD,WAtFxC,SAA4B3C,GACxB,KAA2B,EAApB0P,EAAWhgB,QAAY,CAC1B,IAAI+gB,EAAqBf,EAAW,GAChCgB,EAAcD,EAAmB,GACjCE,EAAaF,EAAmB,GACpC,GAAIC,EAAYlpB,MAAQwY,EAASxY,KAC7BkpB,EAAY9I,OAAS5H,EAAS4H,KAMlC,MALI8H,EAAWtjB,MAAK,EAChB4T,EAASuH,SAAWvH,EAASuH,SAASqJ,OAAOF,EAAYnJ,QAAQ,EACjEzhB,KAAKuZ,OAAO,YAAaqR,EAAYnJ,SAAS7X,OAAQ,wBAAyBihB,EAAWvnB,EAAE,CAInG,CACJ,EAyEkC+F,KAAKrJ,KAAMyqB,CAAY,EAE9CnI,EAAWjZ,KAAKrJ,KAAMyqB,CAAY,EAClCzqB,KAAKuZ,OAAO,8BAA+BhN,EAAQjJ,GAAImnB,CAAY,IAG/DxlB,EAAOjF,MACNyX,WAAW,WACZxS,EAAKolB,SAASK,EAAa,CAAA,EAAOA,EAAYvQ,WAAW,EACzD,IAAIgI,EAAU,CACVW,OAAQ,yBACpC,EAC4BrW,EAAMie,EAAYje,IACtB0V,EAAQ+H,SAAWjlB,EAAKklB,UAAU1d,CAAG,EACrCge,EAAaxI,UAAUxV,EAAKge,EAAahJ,SAAUU,CAAO,CAC7D,EAAE,CAAC,EAGf,CAqHD,OAnHAqH,EAAMa,SAAW,SAAS9d,EAASie,EAASrQ,GACpCA,EA5CR,SAA8B5N,GAG1B,GAFI+d,EAAY/d,EAAQjJ,GACxBtD,KAAKuZ,OAAO,YAAavZ,KAAK+Z,UAAW,kCAAmCuQ,CAAS,EACzD,OAAxBZ,GAAgCA,EAAoBpmB,KAAOgnB,EAC3D,KAAM,sDAAwDA,EAElEZ,EAAsB,IACzB,EAsC4BrgB,KAAKrJ,KAAMuM,CAAO,EAEvCge,EAAUlhB,KAAKrJ,KAAMuM,EAASie,CAAO,CAErD,EAOQhB,EAAMO,cAAgB,SAAS7P,EAAU3N,GACrC,KAAM,UAClB,EAEQid,EAAMuB,iBAAmB,SAAS7Q,EAAU3N,EAASye,GAC5Cze,EAAQyd,UACThqB,KAAK2X,aAAapL,EAAQ0Q,OAAO,EACjCjd,KAAKqqB,SAAS9d,EAAS,CAAA,EAAMA,EAAQ4N,WAAW,EAC5C6Q,GAAgC,EAAnBA,EAAUphB,OACvBsQ,EAAS6H,UAAUiJ,CAAS,EAE5B9Q,EAAS+H,UAAU1V,EAAQE,IAAKyN,EAASuH,SAAU,CAC/CyI,SAAU,GAClC,CAAqB,EAGrB,EAEQV,EAAMyB,iBAAmB,SAAS/Q,EAAU3N,EAAS4V,GAC5C5V,EAAQyd,UACThqB,KAAK2X,aAAapL,EAAQ0Q,OAAO,EACjCjd,KAAKqqB,SAAS9d,EAAS,CAAA,EAAOA,EAAQ4N,WAAW,EACjDD,EAAS+H,UAAU1V,EAAQE,IAAKyN,EAASuH,SAAUU,CAAO,EAE1E,EAkBQqH,EAAM1b,KAAO,SAASoM,EAAUC,IACxBA,EAjBR,SAA0BD,GACtB,GAA4B,OAAxBwP,EACA,KAAM,6DAA+DA,EAAoBpmB,GAAK,qBAGlG,IAAIgnB,EAAY,EAAEb,EAEdld,GADJvM,KAAKuZ,OAAO,YAAavZ,KAAK+Z,UAAW,8BAA+BuQ,EAAW,WAAYpQ,CAAQ,EACzF,CACV5W,GAAIgnB,EACJnQ,YAAa,CAAA,EACbD,SAAUA,CAC1B,GACY2P,EAAexgB,KAAKrJ,KAAMka,EAAU3N,CAAO,EAC3Cmd,EAAsBnd,CACzB,EAMO+V,GAFiBjZ,KAAKrJ,KAAMka,CAAQ,CAIpD,EAEQsP,EAAM5c,MAAQ,WACV2c,EAAO3c,MAAK,EACZ,IAAK,IAAI/C,EAAI,EAAGA,EAAI8f,EAAU/f,OAAQ,EAAEC,EAAG,CACvC,IAAI0C,EAAUod,EAAU9f,GACpB0C,IACAvM,KAAKuZ,OAAO,mBAAoBhN,CAAO,EAClCvM,KAAKoqB,SAAS7d,EAAQE,GAAG,GAC1BzM,KAAKirB,iBAAiB1e,EAAQ2N,SAAU3N,EAAS,CAACuW,OAAQ,OAAO,CAAC,EAG7E,CACD,IAAIoI,EAAqBxB,EACrBwB,IACAlrB,KAAKuZ,OAAO,iCAAkC2R,CAAkB,EAC3DlrB,KAAKoqB,SAASc,EAAmBze,GAAG,GACrCzM,KAAKirB,iBAAiBC,EAAmBhR,SAAUgR,EAAoB,CAACpI,OAAQ,OAAO,CAAC,GAGhG9iB,KAAKiZ,MAAM,CAAA,CAAI,CAC3B,EAEQuQ,EAAMvQ,MAAQ,SAASnV,GACnBylB,EAAOtQ,MAAMnV,CAAI,EACjB4lB,EAAsB,KACtBC,EAAY,GACZC,EAAa,EACzB,EAEQJ,EAAMY,SAAW,SAAS3d,GACtB,GAAIA,EACA,IACI,IAAI0e,EAAQ1e,EAAImB,WAEhB,OADAnB,EAAIG,MAAK,EACFue,IAAUrc,OAAOpC,eAAe0e,MAG1C,CAFC,MAAOtR,GACL9Z,KAAKuZ,OAAOO,CAAC,CAChB,CAEL,MAAO,CAAA,CACnB,EAEQ0P,EAAMW,UAAY,SAAS1d,GACvB,GAAIA,EACA,IACI,OAAOA,EAAIvI,MAGd,CAFC,MAAO4V,GACL9Z,KAAKuZ,OAAOO,CAAC,CAChB,CAEL,MAAO,CAAC,CACpB,EAEe0P,CACf,EA6wFQzS,qBA1wFAA,GAAuB,WACvB,IAAIwS,EAAS,IAAIzS,EACb0S,EAAQ3S,EAAUuD,OAAOmP,CAAM,EAE/B8B,EAAuB,CAAA,EA0H3B,OAxHA7B,EAAMvnB,OAAS,SAASmW,EAASC,EAAa3W,GAC1C,OAAO2pB,GAAwB,CAAChT,CAC5C,EAEQmR,EAAM8B,kBAAoB,WACtB,OAAO,IAAIxc,OAAOpC,cAC9B,EAaQ8c,EAAM+B,QAAU,SAASC,GACrB,IAAI/e,EAAM+c,EAAM8B,oBAIZtpB,GAHJypB,CAbJ,SAAsBhf,GAClB,IAEIA,EAAIuX,QAAUwF,EAAMxF,OAKvB,CAJC,MAAOre,GAGL3F,KAAKuZ,OAAO,4CAA6C5T,CAAC,CAC7D,CACJ,EAIgB8G,CAAG,EAChBA,EAAIc,gBAAkB,CAAA,EACtBd,EAAIa,KAAK,OAAQke,EAAO9pB,IAAqB,CAAA,IAAhB8pB,EAAO1J,IAAa,EACnC0J,EAAOxpB,SACrB,GAAIA,EACA,IAAK,IAAI0pB,KAAc1pB,EACfA,EAAQT,eAAemqB,CAAU,GACjCjf,EAAIgB,iBAAiBie,EAAY1pB,EAAQ0pB,EAAW,EAgBhE,OAZAjf,EAAIgB,iBAAiB,eAAgB,gCAAgC,EACrEhB,EAAIlF,OAAS,WACU,MAAfkF,EAAIvI,OACJsnB,EAAOzJ,UAAUtV,EAAIU,YAAY,EAEjCqe,EAAOG,QAAQlf,EAAIX,UAAU,CAEjD,EACYW,EAAIY,QAAUZ,EAAIhF,QAAU,WACxB+jB,EAAOG,QAAQlf,EAAIX,UAAU,CAC7C,EACYW,EAAIqB,KAAK0d,EAAO3oB,IAAI,EACb4J,CACnB,EAEQ+c,EAAMO,cAAgB,SAAS7P,EAAU3N,GACrCvM,KAAKuZ,OAAO,YAAavZ,KAAK+Z,QAAO,EAAI,kBAAmBxN,EAAQjJ,GAAI,WAAY4W,CAAQ,EAE5F,IAAIjV,EAAOjF,KACX,IACI,IAAI4rB,EAAY,CAAA,EAChBrf,EAAQE,IAAMzM,KAAKurB,QAAQ,CACvB9S,UAAWzY,KACX0B,IAAKwY,EAASxY,IACdogB,KAAM5H,EAAS4H,KACf9f,QAAShC,KAAK2Z,iBAAgB,EAAGgD,eACjC9Z,KAAMC,KAAKC,UAAUmX,EAASuH,QAAQ,EACtCM,UAAW,SAAS9d,GAChBgB,EAAKsU,OAAO,YAAatU,EAAK8U,UAAW,oBAAqB9V,CAAQ,EACtE,IAAIumB,EAAU,CAAA,EACd,IACI,IAAIqB,EAAW5mB,EAAK4U,kBAAkB5V,CAAQ,EACtB,IAApB4nB,EAASjiB,QACTyhB,EAAuB,CAAA,EACvBpmB,EAAKgmB,iBAAiB/Q,EAAU3N,EAAS,CACrC2d,SAAU,GAC9C,CAAiC,IAEDM,EAAU,CAAA,EACVvlB,EAAK8lB,iBAAiB7Q,EAAU3N,EAASsf,CAAQ,EAYxD,CAVC,MAAO/R,GACL7U,EAAKsU,OAAOO,CAAC,EACR0Q,IACDa,EAAuB,CAAA,GACnBlJ,EAAU,CACV2J,UAAWhS,CAC/C,GACwCoQ,SAAWjlB,EAAKklB,UAAU5d,EAAQE,GAAG,EAC7CxH,EAAKgmB,iBAAiB/Q,EAAU3N,EAAS4V,CAAO,EAEvD,CACJ,EACDwJ,QAAS,SAAS7I,EAAQgJ,GACtB7mB,EAAKsU,OAAO,YAAatU,EAAK8U,QAAO,EAAI,iBAAkB+I,EAAQgJ,CAAS,EAC5ET,EAAuB,CAAA,EACvB,IAAIlJ,EAAU,CACVW,OAAQA,EACRgJ,UAAWA,CACvC,EACwB3J,EAAQ+H,SAAWjlB,EAAKklB,UAAU5d,EAAQE,GAAG,EACzCmf,EAEA3mB,EAAKwS,WAAW,WACZxS,EAAKgmB,iBAAiB/Q,EAAU3N,EAAS4V,CAAO,CACnD,EAAE,CAAC,EAEJld,EAAKgmB,iBAAiB/Q,EAAU3N,EAAS4V,CAAO,CAEvD,CACrB,CAAiB,EACDyJ,EAAY,CAAA,CASf,CARC,MAAO9R,GACLuR,EAAuB,CAAA,EAEvBrrB,KAAKyX,WAAW,WACZxS,EAAKgmB,iBAAiB/Q,EAAU3N,EAAS,CACrCuf,UAAWhS,CACnC,CAAqB,CACJ,EAAE,CAAC,CACP,CACb,EAEQ0P,EAAMvQ,MAAQ,SAASnV,GACnBylB,EAAOtQ,MAAMnV,CAAI,EACjBunB,EAAuB,CAAA,CACnC,EAEe7B,CACf,EA4oFQxS,yBAzoFAA,GAA2B,WAC3B,IAAIuS,EAAS,IAAIzS,EACb0S,EAAQ3S,EAAUuD,OAAOmP,CAAM,EAC/BwC,EAAQ,EA8BZ,SAASC,EAAiB9R,EAAU3N,EAASuN,GACzC,IAAI7U,EAAOjF,KACX,OAAO,WACHiF,EAAKgmB,iBAAiB/Q,EAAU3N,EAAS,QAASuN,CAAC,CACnE,CACS,CAmHD,OApJA0P,EAAMvnB,OAAS,SAASmW,EAASC,EAAa3W,GAC1C,MAAO,CAAA,CACnB,EAEQ8nB,EAAMyC,UAAY,SAAST,GACvB,IAAIU,EAAOta,SAASua,qBAAqB,MAAM,EAAE,GAC7CC,EAASxa,SAASya,cAAc,QAAQ,EAExCC,EAAe,iBAAmBP,CAAK,GAOvCrqB,GANJoN,OAAOwd,GAAgB,SAASnf,GAC5B+e,EAAKK,YAAYH,CAAM,EACvB,OAAOtd,OAAOwd,GACdd,EAAOzJ,UAAU5U,CAAY,CAC7C,EAEsBqe,EAAO9pB,KAGjBA,GADAA,GADAA,GAAOA,EAAI0I,QAAQ,GAAG,EAAI,EAAI,IAAM,MAC7B,SAAWkiB,KACX,YAAchd,mBAAmBkc,EAAO3oB,IAAI,GACnDupB,EAAOI,IAAM9qB,EACb0qB,EAAOK,MAAwB,CAAA,IAAhBjB,EAAO1J,KACtBsK,EAAO7nB,KAAO,yBACd6nB,EAAO3kB,QAAU,SAAS9B,GACtB6lB,EAAOG,QAAQ,SAAWhmB,EAAEpB,IAAI,CAChD,EACY2nB,EAAKQ,YAAYN,CAAM,CACnC,EASQ5C,EAAMO,cAAgB,SAAS7P,EAAU3N,GAQrC,IAPA,IAAItH,EAAOjF,KAIP2sB,EAAQ,EACR/iB,EAASsQ,EAASuH,SAAS7X,OAC3BgjB,EAAU,GACE,EAAThjB,GAAY,CAGf,IAAIzH,EAAOW,KAAKC,UAAUmX,EAASuH,SAAStZ,MAAMwkB,EAAOA,EAAQ/iB,CAAM,CAAC,EACpEijB,EAAY3S,EAASxY,IAAIkI,OAASkjB,UAAU3qB,CAAI,EAAEyH,OAElDmjB,EAAY/sB,KAAK2Z,iBAAgB,EAAGoD,aACxC,GAAgBgQ,EAAZF,EAAJ,CACI,GAAe,IAAXjjB,EAKA,OAJIkQ,EAAI,2BAA6B+S,EAAY,kBAAoBE,EACjE,mBAAmB/sB,KAAK+Z,UAE5B/Z,KAAAA,KAAKyX,WAAWuU,EAAiB3iB,KAAKrJ,KAAMka,EAAU3N,EAASuN,CAAC,EAAG,CAAC,EAIxE,EAAElQ,CAEL,MAEDgjB,EAAQliB,KAAKd,CAAM,EACnB+iB,GAAS/iB,EACTA,EAASsQ,EAASuH,SAAS7X,OAAS+iB,CACvC,CAID,IAAIK,EAAiB9S,EACrB,GAAqB,EAAjB0S,EAAQhjB,OAAY,CACpB,IACIqjB,EAAML,EAAQ,GAClB5sB,KAAKuZ,OAAO,YAAavZ,KAAK+Z,QAAO,EAAI,QAASG,EAASuH,SAAS7X,OAAQ,gBAAiBgjB,EAAQ7iB,KAAK,KAAK,CAAC,GAChHijB,EAAiBhtB,KAAK0Z,OAAO,CAAA,EAAO,GAAIQ,CAAQ,GACjCuH,SAAWvH,EAASuH,SAAStZ,MAJhC,EAI6C8kB,CAAG,EAC5DD,EAAejL,UAAY7H,EAAS6H,UACpCiL,EAAe/K,UAAY/H,EAAS+H,UAEpC,IAAK,IAAIpY,EAAI,EAAGA,EAAI+iB,EAAQhjB,OAAQ,EAAEC,EAAG,CACrC,IAAI4gB,EAAezqB,KAAK0Z,OAAO,CAAA,EAAO,GAAIQ,CAAQ,EAClDgT,EAAQD,EACRA,GAAOL,EAAQ/iB,GACf4gB,EAAahJ,SAAWvH,EAASuH,SAAStZ,MAAM+kB,EAAOD,CAAG,EAC1DxC,EAAa1I,UAAY7H,EAAS6H,UAClC0I,EAAaxI,UAAY/H,EAAS+H,UAClCjiB,KAAK8N,KAAK2c,EAAcle,EAAQ4N,WAAW,CAC9C,CACJ,CAEDna,KAAKuZ,OAAO,YAAavZ,KAAK+Z,QAAO,EAAI,kBAAmBxN,EAAQjJ,GAAI,WAAY0pB,CAAc,EAElG,IACI,IAAIpB,EAAY,CAAA,EAChB5rB,KAAKisB,UAAU,CACXxT,UAAWzY,KACX0B,IAAKsrB,EAAetrB,IACpBogB,KAAMkL,EAAelL,KACrB9f,QAAShC,KAAK2Z,iBAAgB,EAAGgD,eACjC9Z,KAAMC,KAAKC,UAAUiqB,EAAevL,QAAQ,EAC5CM,UAAW,SAASiJ,GAChB,IAAIR,EAAU,CAAA,EACd,IACI,IAAIqB,EAAW5mB,EAAK4U,kBAAkBmR,CAAS,EACvB,IAApBa,EAASjiB,OACT3E,EAAKgmB,iBAAiB+B,EAAgBzgB,EAAS,CAC3C2d,SAAU,GAC9C,CAAiC,GAEDM,EAAU,CAAA,EACVvlB,EAAK8lB,iBAAiBiC,EAAgBzgB,EAASsf,CAAQ,EAS9D,CAPC,MAAO/R,GACL7U,EAAKsU,OAAOO,CAAC,EACR0Q,GACDvlB,EAAKgmB,iBAAiB+B,EAAgBzgB,EAAS,CAC3Cuf,UAAWhS,CAC/C,CAAiC,CAER,CACJ,EACD6R,QAAS,SAAS7I,EAAQgJ,GACtB,IAAI3J,EAAU,CACVW,OAAQA,EACRgJ,UAAWA,CACvC,EAC4BF,EAEA3mB,EAAKwS,WAAW,WACZxS,EAAKgmB,iBAAiB+B,EAAgBzgB,EAAS4V,CAAO,CACzD,EAAE,CAAC,EAEJld,EAAKgmB,iBAAiB+B,EAAgBzgB,EAAS4V,CAAO,CAE7D,CACrB,CAAiB,EACDyJ,EAAY,CAAA,CAQf,CAPC,MAAO/K,GAEL7gB,KAAKyX,WAAW,WACZxS,EAAKgmB,iBAAiB+B,EAAgBzgB,EAAS,CAC3Cuf,UAAWjL,CACnC,CAAqB,CACJ,EAAE,CAAC,CACP,CACb,EAEe2I,CACf,EAg/EQvS,mBA7+EAA,GAAqB,WACrB,IAEIkC,EAFAoQ,EAAS,IAAI1S,EACb2S,EAAQ3S,EAAUuD,OAAOmP,CAAM,EAG/B4D,EAAsB,CAAA,EAEtBC,EAAsB,CAAA,EACtBC,EAAmB,CAAA,EAGnBC,EAAW,KACXC,EAAc,KACdzR,EAAa,CAAA,EACb0R,EAAmB,KAcvB,SAASC,EAAYzJ,EAAS0J,GACtB1J,IACAhkB,KAAK2tB,eAAe3J,EAAS0J,EAAM1d,KAAM0d,EAAM5K,MAAM,EAIrD9iB,KAAK4tB,QAAQ5J,EAAS0J,CAAK,EAElC,CAED,SAASG,EAAa7J,GAClB,OAAOA,IAAYuJ,GAAevJ,IAAYsJ,CACjD,CAED,SAASQ,EAAe9J,EAAS9J,EAAUC,GAEvC,IADA,IAAI4T,EAAa,GACRlkB,EAAI,EAAGA,EAAIqQ,EAASuH,SAAS7X,OAAQ,EAAEC,EAAG,CAC/C,IAAIwC,EAAU6N,EAASuH,SAAS5X,GAC5BwC,EAAQ/I,IACRyqB,EAAWrjB,KAAK2B,EAAQ/I,EAAE,CAEjC,CACD0gB,EAAQgK,UAAUD,EAAWhkB,KAAK,GAAG,GAAK,CAACmQ,EAAUC,GACrDna,KAAKuZ,OAAO,YAAavZ,KAAK+Z,QAAO,EAAI,6BAA8BiK,EAAQgK,SAAS,CAC3F,CAuFD,SAASC,EAAejK,EAAS9J,EAAUC,GAevC,IAdA,IAAIhY,EAAOW,KAAKC,UAAUmX,EAASuH,QAAQ,EAKvCqI,GAJJ9F,EAAQkK,UAAUpgB,KAAK3L,CAAI,EAC3BnC,KAAKuZ,OAAO,YAAavZ,KAAK+Z,UAAW,OAAQG,EAAU,kBAAmBC,CAAW,EAG1Ena,KAAK2Z,iBAAgB,EAAG+C,iBACnChF,EAAQoS,EAMR7kB,GALAkV,IACAzC,GAAS1X,KAAK4Z,UAAW,EAACqD,QAC1BnB,EAAa,CAAA,GAGN9b,MACP+tB,EAAa,GACRlkB,EAAI,EAAGA,EAAIqQ,EAASuH,SAAS7X,OAAQ,EAAEC,EAC5C,CAAA,WACI,IAAIwC,EAAU6N,EAASuH,SAAS5X,GAC5BwC,EAAQ/I,KACRyqB,EAAWrjB,KAAK2B,EAAQ/I,EAAE,EAC1B0gB,EAAQmK,SAAS9hB,EAAQ/I,IAAM2B,EAAKwS,WAAW,WAC3C0B,EAAQI,OAAO,YAAatU,EAAK8U,QAAO,EAAI,qBAAsB1N,EAAQ/I,GAAI,QAASoU,EAAO,KAAMsM,CAAO,EAC3GyJ,EAAYpkB,KAAKpE,EAAM+e,EAAS,CAAChU,KAAM,IAAM8S,OAAQ,iBAAiB,CAAC,CAC1E,EAAEpL,CAAK,EAEf,IAGL1X,KAAKuZ,OAAO,YAAavZ,KAAK+Z,QAAO,EAAI,kBAAmBrC,EAAO,kBAAmBqW,EAAY,kBAAmBjE,EAAU,cAAe9F,EAAQmK,QAAQ,CACjK,CAUD,SAAS3M,EAAMwC,EAAS9J,EAAUC,GAC9B,IACoB,OAAZ6J,GACAA,EAAUuJ,GAAe,CACrBS,UAAW,GACXG,SAAU,EAClC,EACoBL,EAAezkB,KAAKrJ,KAAMgkB,EAAS9J,EAAUC,CAAW,EAnIpE,SAA2B6J,GAKvB,GAAIuJ,CAAAA,EAAJ,CAKA,IAAI7rB,EAAMyX,EAAQa,OAAM,EAAGpW,QAAQ,QAAS,IAAI,EAChD5D,KAAKuZ,OAAO,YAAavZ,KAAK+Z,UAAW,oBAAqBrY,CAAG,EAEjE,IACI,IAAImO,EAAWsJ,EAAQQ,iBAAgB,EAAG9J,SAC1CmU,EAAQkK,UAAYre,EAAW,IAAIf,OAAOwa,UAAU5nB,EAAKmO,CAAQ,EAAI,IAAIf,OAAOwa,UAAU5nB,CAAG,EAC7F6rB,EAAcvJ,CAKjB,CAJC,MAAOlK,GAGL,MAFAqT,EAAsB,CAAA,EACtBntB,KAAKuZ,OAAO,4CAA6CO,CAAC,EACpDA,CACT,CAGDuT,EAAkE,CAAA,IAA/ClU,EAAQQ,mBAAmByC,gBAE9C,IAAInX,EAAOjF,KACPqc,EAAiBlD,EAAQQ,iBAAgB,EAAG0C,eA+B5C+R,GA9BiB,EAAjB/R,IACA2H,EAAQqK,aAAeruB,KAAKyX,WAAW,WACnC0B,EAAQI,OAAO,YAAatU,EAAK8U,QAAO,EAAI,oCAAqCrY,EAAK,IAAK2a,EAAgB,IAAI,EAE/GoR,EAAYpkB,KAAKpE,EAAM+e,EAAS,CAAChU,KAAM,IAAM8S,OAAQ,iBAAiB,CAAC,CAC1E,EAAEzG,CAAc,GAyBP,SAASqR,GAEnBvU,EAAQI,OAAO,oBAAqByK,EADpC0J,EAAQA,GAAS,CAAC1d,KAAM,GAAI,EACwB,aAAcud,EAAa,UAAWD,CAAQ,EAE9FtJ,EAAQqK,cACRppB,EAAK0S,aAAaqM,EAAQqK,YAAY,EAG1CppB,EAAK2oB,QAAQ5J,EAAS0J,CAAK,CAC3C,GAOY1J,EAAQkK,UAAUI,OAtCL,WACTnV,EAAQI,OAAO,mBAAoByK,CAAO,EACtCA,EAAQqK,cACRppB,EAAK0S,aAAaqM,EAAQqK,YAAY,EAGtCR,EAAa7J,CAAO,GAEpBsJ,EAAWtJ,EACXoJ,EAAsB,EAFtBG,EAAc,MAGdtoB,EAAKspB,OAAOvK,CAAO,IAGnB7K,EAAQuK,MAAM,qCAAsC1jB,KAAM,oBAAqBstB,CAAQ,EACvFG,EAAYpkB,KAAKpE,EAAM+e,EAAS,CAAChU,KAAM,IAAM8S,OAAQ,kBAAkB,CAAC,EAE5F,EAuBYkB,EAAQkK,UAAUE,QAAUA,EAC5BpK,EAAQkK,UAAUzmB,QAAU,WAExB2mB,EAAQ,CAACpe,KAAM,IAAM8S,OAAQ,OAAO,CAAC,CACrD,EACYkB,EAAQkK,UAAU3O,UAXF,SAASiP,GACrBrV,EAAQI,OAAO,sBAAuBiV,EAAWxK,CAAO,EACxD/e,EAAKwpB,UAAUzK,EAASwK,CAAS,CACjD,EAUYxuB,KAAKuZ,OAAO,YAAavZ,KAAK+Z,UAAW,0BAA2BiK,CAAO,CA3E1E,CA4EJ,EAiD6B3a,KAAKrJ,KAAMgkB,CAAO,IAEpC8J,EAAezkB,KAAKrJ,KAAMgkB,EAAS9J,EAAUC,CAAW,EACxD8T,EAAe5kB,KAAKrJ,KAAMgkB,EAAS9J,EAAUC,CAAW,EAY/D,CAVC,MAAOL,GAEL,IAAI7U,EAAOjF,KACXA,KAAKyX,WAAW,WACZgW,EAAYpkB,KAAKpE,EAAM+e,EAAS,CAC5BhU,KAAM,IACN8S,OAAQ,YACRgJ,UAAWhS,CACnC,CAAqB,CACJ,EAAE,CAAC,CACP,CACJ,CA8JD,OAxVA0P,EAAMvQ,MAAQ,SAASnV,GACnBylB,EAAOtQ,MAAMnV,CAAI,EAEbA,IACAspB,EAAsB,CAAA,GAI1BG,EADAD,EAAW,KAEXxR,EAAa,EAHbuR,EAJAF,EAAsB,CAAA,EAQlC,EAgJQ3D,EAAMkF,eAAiB,SAASC,EAAIlN,GAChCkN,EAAGtlB,KAAKrJ,KAAMyhB,CAAQ,CAClC,EAEQ+H,EAAMoF,eAAiB,SAASD,EAAI3K,EAASvC,EAAUU,GACnDwM,EAAGtlB,KAAKrJ,KAAMgkB,EAASvC,EAAUU,CAAO,CACpD,EA4BQqH,EAAM+E,OAAS,SAASvK,GACpB,IAES/W,EAGGiN,EACAC,EANR6T,EAAYhK,EAAQgK,UAExB,IAAS/gB,KADTjN,KAAKuZ,OAAO,YAAavZ,KAAK+Z,UAAW,SAAUiK,EAAS,mBAAoBgK,CAAS,EACzEA,EACRA,EAAUzsB,eAAe0L,CAAG,IAExBiN,GADApC,EAAUkW,EAAU/gB,IACD,GACnBkN,EAAcrC,EAAQ,GAG1B0V,EAAmBtT,EAAS6H,UAC5BkM,EAAe5kB,KAAKrJ,KAAMgkB,EAAS9J,EAAUC,CAAW,EAG5E,EAEQqP,EAAMiF,UAAY,SAASzK,EAASwK,GAChCxuB,KAAKuZ,OAAO,YAAavZ,KAAK+Z,QAAO,EAAI,6BAA8ByU,EAAWxK,CAAO,EAKzF,IAHA,IAAI6K,EAAQ,CAAA,EACRpN,EAAWzhB,KAAK6Z,kBAAkB2U,EAAUpsB,IAAI,EAChD2rB,EAAa,GACRlkB,EAAI,EAAGA,EAAI4X,EAAS7X,OAAQ,EAAEC,EAAG,CACtC,IASYoT,EATR5Q,EAAUoV,EAAS5X,IAKnB,YAAY/D,KAAKuG,EAAQ2T,OAAO,GAAsBxZ,KAAAA,IAAjB6F,EAAQjK,OACzCiK,EAAQ/I,KACRyqB,EAAWrjB,KAAK2B,EAAQ/I,EAAE,EAEtB2Z,EAAU+G,EAAQmK,SAAS9hB,EAAQ/I,OAEnCtD,KAAK2X,aAAasF,CAAO,EACzB,OAAO+G,EAAQmK,SAAS9hB,EAAQ/I,IAChCtD,KAAKuZ,OAAO,YAAavZ,KAAK+Z,QAAS,EAAE,8BAA+B1N,EAAQ/I,GAAI,aAAc0gB,EAAQmK,QAAQ,GAK1H,kBAAoB9hB,EAAQ2T,UAC5BlE,EAAa,CAAA,GAEb,qBAAuBzP,EAAQ2T,SAAYlE,IAC3C+S,EAAQ,CAAA,EAEf,CAKD,IAFA,IAAIC,EAAU,CAAA,EACVd,EAAYhK,EAAQgK,UACfxV,EAAI,EAAGA,EAAIuV,EAAWnkB,OAAQ,EAAE4O,EAAG,CACxC,IACSvL,EADL3J,EAAKyqB,EAAWvV,GACpB,IAASvL,KAAO+gB,EACZ,GAAIA,EAAUzsB,eAAe0L,CAAG,EAAG,CAC/B,IAAI8hB,EAAM9hB,EAAIzB,MAAM,GAAG,EACnBmN,EAAQhC,GAAMkB,QAAQvU,EAAIyrB,CAAG,EACjC,GAAa,GAATpW,EAAY,CACZmW,EAAU,CAAA,EACVC,EAAIlW,OAAOF,EAAO,CAAC,EACnB,IAAIuB,EAAW8T,EAAU/gB,GAAK,GAC1BkN,EAAc6T,EAAU/gB,GAAK,GACjC,OAAO+gB,EAAU/gB,GACA,EAAb8hB,EAAInlB,SACJokB,EAAUe,EAAIhlB,KAAK,GAAG,GAAK,CAACmQ,EAAUC,IAE1C,KACH,CACJ,CAER,CACG2U,GACA9uB,KAAKuZ,OAAO,YAAavZ,KAAK+Z,UAAW,8BAA+BiU,CAAS,EAGrFhuB,KAAK0uB,eAAelB,EAAkB/L,CAAQ,EAE1CoN,GACA7uB,KAAK2tB,eAAe3J,EAAS,IAAM,YAAY,CAE/D,EAEQwF,EAAMoE,QAAU,SAAS5J,EAAS0J,GAC9B1tB,KAAKuZ,OAAO,YAAavZ,KAAK+Z,QAAO,EAAI,SAAUiK,EAAS0J,CAAK,EAE7DG,EAAa7J,CAAO,IAIpBmJ,EAAsBE,GAAoBD,EAE1CE,EADAC,EAAc,MAIlB,IAESjqB,EAFL6qB,EAAWnK,EAAQmK,SAEvB,IAAS7qB,KADT0gB,EAAQmK,SAAW,GACJA,EACPA,EAAS5sB,eAAe+B,CAAE,GAC1BtD,KAAK2X,aAAawW,EAAS7qB,EAAG,EAItC,IAES2J,EAEGiN,EAKAiI,EATR6L,EAAYhK,EAAQgK,UAExB,IAAS/gB,KADT+W,EAAQgK,UAAY,GACJA,EACRA,EAAUzsB,eAAe0L,CAAG,IACxBiN,EAAW8T,EAAU/gB,GAAK,GACZ+gB,EAAU/gB,GAAK,KAE7B6O,EAAa,CAAA,GAEbqG,EAAU,CACV6M,cAAetB,EAAM1d,KACrB8S,OAAQ4K,EAAM5K,MACtC,EACwB4K,EAAM5B,YACN3J,EAAQ2J,UAAY4B,EAAM5B,WAE9B9rB,KAAK4uB,eAAe1U,EAAS+H,UAAW+B,EAAS9J,EAASuH,SAAUU,CAAO,EAG/F,EAEQqH,EAAMpQ,WAAa,SAAS7U,EAAM8U,GAC9BkQ,EAAOnQ,WAAW7U,EAAM8U,CAAM,EAC9BF,EAAUE,CACtB,EAEQmQ,EAAMvnB,OAAS,SAASmW,EAASC,EAAa3W,GAG1C,OAFA1B,KAAKuZ,OAAO,YAAavZ,KAAK+Z,UAAW,qBAAsBoT,CAAmB,EAE3EA,GAAuB,CAAC,CAACre,OAAOwa,WAA0C,CAAA,IAA7BnQ,EAAQ8V,gBACxE,EAEQzF,EAAM1b,KAAO,SAASoM,EAAUC,GAC5Bna,KAAKuZ,OAAO,YAAavZ,KAAK+Z,UAAW,UAAWG,EAAU,kBAAmBC,CAAW,EAC5FqH,EAAMnY,KAAKrJ,KAAMstB,EAAUpT,EAAUC,CAAW,CAC5D,EAEQqP,EAAMmE,eAAiB,SAAS3J,EAAShU,EAAM8S,GAC3C,IACQkB,EAAQkK,WACRlK,EAAQkK,UAAUW,MAAM7e,EAAM8S,CAAM,CAI3C,CAFC,MAAOhJ,GACL9Z,KAAKuZ,OAAOO,CAAC,CAChB,CACb,EAEQ0P,EAAM5c,MAAQ,WACV2c,EAAO3c,MAAK,EACZ6gB,EAAYpkB,KAAKrJ,KAAMstB,EAAU,CAACtd,KAAM,IAAM8S,OAAQ,OAAO,CAAC,EAC9D9iB,KAAKiZ,MAAM,CAAA,CAAI,CAC3B,EAEeuQ,CACf,EAqoEQ7S,MAAOA,GACPuY,IA9EM,CACNC,OAAQ,SAAS1jB,GACb,IAAIlD,EAAS,KAQb,GAPIkD,aAAiBrC,YACjBb,EAASkD,EACFA,EAAMlD,kBAAkBa,YAC/Bb,EAASkD,EAAMlD,OACR3B,MAAMC,QAAQ4E,CAAK,IAC1BlD,EAAS,IAAIH,WAAWqD,CAAK,EAAElD,QAErB,MAAVA,EACA,KAAM,qBAAuBkD,EASjC,IANA,IAAI7B,EAASrB,EAAOF,WAChB+mB,EAAYxlB,EAAS,EACrBylB,EAAU,GAAmB,GAAdD,EAAkB,EAAIA,GACrClnB,EAAO,IAAIgB,SAASX,CAAM,EAC1Bf,EAAS,GACTtB,EAAQ,EACH2D,EAAI,EAAGA,EAAID,EAASylB,EAAS,EAAExlB,EAAG,CACvC,IAAIylB,EAAiB1lB,GAALC,EAChB3D,EAAgB,IAARA,GAAeopB,EAAY,EAAIpnB,EAAKqnB,SAAS1lB,CAAC,GACtD,IAAKA,EAAI,GAAK,GAAM,EAAG,CAEnB,IADA,IAGYmG,EAHRwf,EAAU,SACLhX,EAAI,EAAO,EAAJA,EAAO,EAAEA,GACjB,CAAC8W,GAAiBD,EAAJ7W,KACVxI,EAAO0N,KAAK+R,MAAMvpB,EAAQspB,CAAO,EAAI,GACzChoB,GAAU0P,EAAgBlH,IAE9Bwf,GAAW,GAEftpB,EAAQ,CACX,CACJ,CAED,OAAOsB,CACV,EACDyC,OAAQ,SAASylB,GAGb,IAFA,IAAIN,EAAYM,EAAO9lB,OAAS,EAC5BylB,EAAU,GAAmB,GAAdD,EAAkB,EAAIA,GAChCO,EAAI,EAAGA,EAAIN,EAAS,EAAEM,EAC3BD,GAAUxY,EAAgBA,EAAgBtN,OAAS,GASvD,IAPA,IAAIA,EAAS8lB,EAAO9lB,OAEhBrB,EAAS,IAAIa,YAAsB,EAATQ,EAAa,EAAKylB,CAAO,EACnDnnB,EAAO,IAAIgB,SAASX,CAAM,EAC1BrC,EAAQ,EACR0pB,EAAU,EACVC,EAAU,EACLhmB,EAAI,EAAGA,EAAID,EAAQ,EAAEC,EAAG,CAC7B,IAAImG,EAAO0f,EAAO/e,WAAWif,CAAO,EAAE,EAAI,GAC1C1pB,EAAgB,GAARA,EAAaiR,EAAgBnH,GACrC,GAAI4f,EAAU,GAAM,EAAG,CAEnB,IADA,IAAIJ,EAAU,SACI,GAAXA,GACCK,EAAU3nB,EAAKG,YACfH,EAAK4nB,SAASD,CAAO,GAAInS,KAAK+R,MAAMvpB,EAAQspB,CAAO,EAAI,GAAG,EAE9DA,GAAW,IAEftpB,EAAQ,CACX,CACJ,CAED,OAAOqC,CACV,CACT,CAWA,OCv1GiB,CACf+R,OAAQyV,EAAIzV,OACZpM,QAAS6hB,CACX,UFJYtZ,EAAAA,EAAAA,GAKX,IAJC,UAAA,kBACAA,EAAA,QAAA,gBACAA,EAAA,UAAA,kBACAA,EAAA,YAAA,0BGQWuZ,GASXpwB,YACUmB,EACAW,EAAc,yBACtB2hB,GAFQrjB,KAAMe,OAANA,EACAf,KAAG0B,IAAHA,EAVF1B,KAAAqZ,OAAiB,IAAIiB,EA2DrBta,KAAaiwB,cAAGC,IACtB,GAAI,CAACA,EAAIlL,WACP,MAAM,IAAIzb,MAAM,kBAAkB,CAEtC,EAlDEvJ,KAAKqZ,OAAO4V,iBAAmB,CAAA,EAC/BjvB,KAAKqZ,OAAOiO,YAAY7Q,EAAY0Z,UAAW9M,GAAqBrjB,KAAKiwB,aAAa,CACvF,CAODxI,UAAUzH,EAAiBzV,GAEzB,OADAvK,KAAKowB,gBAAe,EACbpwB,KAAKqZ,OAAOoO,UAAUzH,EAASzV,CAAQ,CAC/C,CAMDqd,YAAY9H,GACV,OAAO9f,KAAKqZ,OAAOuO,YAAY9H,CAAY,CAC5C,CAKDkH,aACEhnB,KAAKqZ,OAAO2N,YACb,CAEOoJ,kBACN,IAEUpuB,EAFJ,CAAEqX,OAAAA,EAAQtY,OAAAA,EAAQW,IAAAA,CAAG,EAAK1B,KAC5BqZ,EAAOuP,mBACD5mB,EAAYjB,EAAOgO,gBAAe,EAAlC/M,WACF2N,EAAS,CACbjO,IAAKX,EAAO2C,OAAOhC,CAAG,EACtBib,eAAgB3a,GAElBqX,EAAOyN,UAAUnX,CAAM,EACvB3P,KAAK+mB,UAAUhmB,EAAO2O,mBAAoB,CAAA,EAE7C,CAEOqX,UAAUpX,GAChB3P,KAAKqZ,OAAO0N,UAAUpX,CAAM,CAC7B,CAOF,0SCvEY0gB,WAAqBvvB,EAAlClB,kCACYI,KAAO2D,QAAG,QACV3D,KAAO2B,QAAG,SACV3B,KAAYqC,aAAG,SACfrC,KAAOggB,QAAG,WAsHrB,CAnGOxd,OAAOC,uGACX,OAAO8mB,EAAM/mB,OAAO6G,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAwBKE,OAAOC,uGACX,OAAO2mB,EAAM5mB,OAAO0G,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAsBKM,OAAON,uGACX,OAAO2mB,EAAMrmB,OAAOmG,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAsBKrC,KAAKR,EAAiB,oGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CAoBKqD,OAAOX,uGACX,OAAO8mB,EAAMnmB,OAAOiG,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CACF,CC/HD,IAAA6tB,GAAgC,UAAf,OAAOrrB,KAAmBA,KAAgB6J,QAAXhG,+SCKnCynB,WAA2BzvB,EAAxClB,kCACYI,KAAO2D,QAAG,QACV3D,KAAO2B,QAAG,QAsFrB,CAlEO6uB,OACJC,EACAhuB,4CAEA,IACMf,EAAM1B,KAAK0C,aAAaD,CAAU,EAClCI,EAAO,IAAIiG,EAMXlH,GAJNiB,EAAK8D,OAAO,OAAQ8pB,CAAI,EAIZ5uB,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OARrB,OAQ6BuB,KAAAA,EAAMb,QAHlC,CACdC,OAAQ,mBAE+C,CAAE,GACrDG,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAiBKsuB,SAASjuB,4CACb,IAAMf,EAAM1B,KAAK0C,aAAaD,CAAU,EACxC,OAAOZ,MAAM7B,KAAK8B,MAAMJ,CAAG,EAC5B,CAAA,CAkBK0B,OAAOX,wGACX,OAAO8mB,EAAMnmB,OAAOiG,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAESC,aAAaD,GACrB0B,IAAIb,EAMJ,OAJEA,EADwB,UAAtB,OAAOb,GAA2BA,EAAWa,GAC1Cb,EAAWa,GAEXb,KAEGzC,KAAK2B,WAAW2B,YAC3B,CACF,0SCxFYqtB,WAA+B7vB,EAA5ClB,kCACYI,KAAO2D,QAAG,YACV3D,KAAO2B,QAAG,WACV3B,KAAYqC,aAAG,gBAyK1B,CAhKOM,OACJ8tB,EACAG,EAAyC,4CAEzC,IACMlvB,EAAM1B,KAAK2B,QACXkB,EAAO,IAAIiG,EACjB3E,IAAI0sB,EACAC,EACAF,EAAcC,WAChBA,EAAWD,EAAcC,SACzB,OAAOD,EAAcC,UAEnBD,EAAcE,WAChBA,EAAWF,EAAcE,SACzB,OAAOF,EAAcE,UAElBD,EAAAA,GACQ,MAEO,aAAhB,OAAOE,MAAwBN,aAAgBM,OACjDF,EAAWJ,EAAK5qB,KAChBirB,EAAWL,EAAKlsB,MAEbqsB,EAAc/qB,OACjB+qB,EAAc/qB,KAAOgrB,GAElBD,EAAcrsB,OACjBqsB,EAAcrsB,KAAOusB,GAAY,cAEnCjuB,EAAK8D,OAAO,OAAQ8pB,EAAMI,CAAQ,EAClChuB,EAAK8D,OAAO,SAAU7D,KAAKC,UAAU6tB,CAAa,CAAC,EAI7ChvB,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OA/BrB,OA+B6BuB,KAAAA,EAAMb,QAHlC,CACdC,OAAQ,mBAE+C,CAAE,EACrDG,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAEK7B,KAAKR,EAAiB,oGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CAEKqD,OAAO4tB,uGACX,OAAOzH,EAAMnmB,OAAOiG,KAAArJ,KAAAgxB,CAAiB,EACtC,CAAA,CAEKN,SAASM,EAAgCltB,2CAC7C,IAAMpC,EAAM1B,KAAK0C,aAAasuB,CAAiB,EAC/C,OAAOnvB,MAAM7B,KAAK8B,MAAMJ,EAAKoC,CAAI,EAClC,CAAA,CAQDmtB,mBACER,EACAS,EACAN,EAAyC,IAEzC,IAAMlvB,MAAU1B,KAAK2D,WAAW3D,KAAK2B,QAE/BkB,EAAO,IAAIiG,EACjB3E,IAAI0sB,EACAC,EACAF,EAAcC,WAChBA,EAAWD,EAAcC,SACzB,OAAOD,EAAcC,UAEnBD,EAAcE,WAChBA,EAAWF,EAAcE,SACzB,OAAOF,EAAcE,UAElBD,EAAAA,GACQ,MAEO,aAAhB,OAAOE,MAAwBN,aAAgBM,OACjDF,EAAWJ,EAAK5qB,KAChBirB,EAAWL,EAAKlsB,MAEbqsB,EAAc/qB,OACjB+qB,EAAc/qB,KAAOgrB,GAElBD,EAAcrsB,OACjBqsB,EAAcrsB,KAAOusB,GAAY,cAEnCjuB,EAAK8D,OAAO,OAAQ8pB,EAAMI,CAAQ,EAClChuB,EAAK8D,OAAO,SAAU7D,KAAKC,UAAU6tB,CAAa,CAAC,EACnDzsB,IAAIgtB,EAE2B,YAA3B,OAAOtuB,EAAKuuB,aACdD,EAActuB,EAAKuuB,cAErB,IAAMpvB,EAAUhC,KAAKe,OAAOgO,gBAAe,EAAG/M,QASxCyK,GARN7L,OAAOC,OACLmB,EACA,CACEC,OAAQ,kBACT,EACDkvB,CAAW,EAGD,IAAIzkB,gBAChBD,EAAIa,KA1CW,OA0CE5L,EAAK,CAAA,CAAI,EAC1B,IAAK,MAAMuL,KAAOjL,EACZA,EAAQT,eAAe0L,CAAG,GAC5BR,EAAIgB,iBAAiBR,EAAKjL,EAAQiL,EAAI,EAG1CR,EAAI+jB,OAAO9iB,iBAAiB,WAAYwjB,CAAU,EAElD/sB,IAAIktB,EAQJ,OANEA,EAD4B,YAA1B,OAAOxuB,EAAKyuB,UACJzuB,EAAKyuB,YAELzuB,EAEZ4J,EAAIqB,KAAKujB,CAAO,EAET5kB,CACR,CAED8kB,mBAAmB9kB,GACjB,OAAO,IAAIvF,QAAQ,CAACtF,EAAK4vB,KACvB/kB,EAAIiB,iBAAiB,UAAW,KACX,IAAnBjB,EAAImB,YAAoC,MAAfnB,EAAIvI,QAAiC,MAAfuI,EAAIvI,OAE/CstB,EACE/kB,EAAIU,aAAe,CAAE/K,KAAMU,KAAKoH,MAAMuC,EAAIU,YAAY,CAAG,EAAG,wBAAwB,EAFtFvL,EAAIkB,KAAKoH,MAAMuC,EAAIU,YAAY,CAAC,CAItC,CAAC,CACH,CAAC,CACF,CAeDskB,aAAa/vB,GACX,IACQgwB,EADR,GAAMhwB,EAKJ,OAJMgwB,EAAS,IAAIlT,OACjB,yEAAyE,GAErE3Z,EAAUnD,EAAIoD,MAAM4sB,CAAM,KACb7sB,EAAQ,IAAMA,EAAQ,GAE5C,CACF,oSCrKAU,EAAAosB,UAAA,KAAA,GAJWA,EAAAA,cAAAA,EAAAA,UAIX,KAHC,OAAA,cACAA,EAAA,QAAA,eACAA,EAAA,UAAA,uBAWWC,WAAyB9wB,EAUpClB,YAAYmB,EAAsBC,GAChCwR,MAAMzR,EAAQC,CAAQ,EARdhB,KAAO2D,QAAG,YACV3D,KAAO2B,QAAG,iBACV3B,KAAYqC,aAAG,iBACfrC,KAAOggB,QAAG,oBACVhgB,KAAyB6xB,0BAAG,QAC5B7xB,KAAqB8xB,sBAAG,IAIhC9xB,KAAK+xB,YAAc,IAAIpf,EACvB3S,KAAKuoB,OAAS,IAAIoI,GAAuB5vB,CAAM,CAChD,CAqBKyB,OAAOwuB,EAAgCjxB,EAAiB,wGAC5D,OAAOwpB,EAAM/mB,OAAM6G,KAAArJ,KAACgxB,EAAmBjxB,CAAM,EAC9C,CAAA,CAqBK4C,OAAOiuB,uGACX,OAAOrH,EAAM5mB,OAAO0G,KAAArJ,KAAA4wB,CAAa,EAClC,CAAA,CAsBK1tB,OAAO0tB,uGACX,OAAOrH,EAAMrmB,OAAOmG,KAAArJ,KAAA4wB,CAAa,EAClC,CAAA,CAsBKrwB,KAAKR,EAAiB,oGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CA0BKiyB,UAAUhe,EAAOjU,EAAiB,oGAEtC,OADAA,EAAOC,KAAK6xB,2BAA6B7xB,KAAK+xB,YAAY3d,WAAWJ,CAAK,EACnEuV,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CA0BKkyB,iBAAiBje,EAAOjU,EAAiB,oGAE7C,OADAA,EAAOC,KAAK8xB,uBAAyB9xB,KAAK+xB,YAAY3d,WAAWJ,CAAK,EAC/DuV,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CAuBKqD,OAAO4tB,EAAgC9uB,EAAc,wGACzD,OAAOqnB,EAAMnmB,OAAMiG,KAAArJ,KAACgxB,EAAmB9uB,CAAM,EAC9C,CAAA,CAwBKgwB,mBAAmBC,EAA8BpyB,EAAiB,4CACtE,OAAOC,KAAKoyB,aAAaT,EAAAA,UAAUU,UAAWF,EAAiBpyB,CAAM,EACtE,CAAA,CA4BKuyB,qBAAqB1B,EAAwCuB,2CACjE,OAAOnyB,KAAKuyB,YAAYZ,EAAAA,UAAUU,UAAWzB,EAAeuB,CAAe,EAC5E,CAAA,CAqBKK,kBAAkBC,EAA6BN,2CACnD,OAAOnyB,KAAK0yB,SAASf,EAAAA,UAAUU,UAAWI,EAAgBN,CAAe,EAC1E,CAAA,CAqBKQ,qBAAqBF,EAA6BN,2CACtD,OAAOnyB,KAAKusB,YAAYoF,EAAAA,UAAUU,UAAWI,EAAgBN,CAAe,EAC7E,CAAA,CAyBKS,gBAAgBT,EAA8BpyB,EAAiB,4CACnE,OAAOC,KAAKoyB,aAAaT,EAAAA,UAAUkB,OAAQV,EAAiBpyB,CAAM,EACnE,CAAA,CA4BK+yB,kBAAkBlC,EAAwCuB,2CAC9D,OAAOnyB,KAAKuyB,YAAYZ,EAAAA,UAAUkB,OAAQjC,EAAeuB,CAAe,EACzE,CAAA,CAqBKY,eAAeN,EAA6BN,2CAChD,OAAOnyB,KAAK0yB,SAASf,EAAAA,UAAUkB,OAAQJ,EAAgBN,CAAe,EACvE,CAAA,CAoBKa,mBAAmBP,EAA+BN,2CACtD,OAAOnyB,KAAKizB,aAAatB,EAAAA,UAAUkB,OAAQJ,EAAgBN,CAAe,EAC3E,CAAA,CAqBKe,kBAAkBT,EAA6BN,2CACnD,OAAOnyB,KAAKusB,YAAYoF,EAAAA,UAAUkB,OAAQJ,EAAgBN,CAAe,EAC1E,CAAA,CAyBKgB,iBAAiBhB,EAA8BpyB,EAAiB,4CACpE,OAAOC,KAAKoyB,aAAaT,EAAAA,UAAUyB,QAASjB,EAAiBpyB,CAAM,EACpE,CAAA,CA4BKszB,mBAAmBzC,EAAwCuB,2CAC/D,OAAOnyB,KAAKuyB,YAAYZ,EAAAA,UAAUyB,QAASxC,EAAeuB,CAAe,EAC1E,CAAA,CAqBKmB,gBAAgBb,EAA6BN,2CACjD,OAAOnyB,KAAK0yB,SAASf,EAAAA,UAAUyB,QAASX,EAAgBN,CAAe,EACxE,CAAA,CAqBKoB,mBAAmBd,EAA6BN,2CACpD,OAAOnyB,KAAKusB,YAAYoF,EAAAA,UAAUyB,QAASX,EAAgBN,CAAe,EAC3E,CAAA,CAUKqB,yBAAyBxC,2CAC7B,OAAOhxB,KAAKyzB,+BAA+BzC,EAAmB,uBAAuB,EACtF,CAAA,CAUK0C,mBAAmB1C,2CACvB,OAAOhxB,KAAKyzB,+BAA+BzC,EAAmB,iBAAiB,EAChF,CAAA,CASK2C,yBAAyB3C,2CAM7B,GAAM,CAAC4C,EAAuBC,GAAmBhyB,MAAMqF,QAAQ4sB,IAAI,CACjE9zB,KAAKwzB,yBAAyBxC,CAAiB,EAC/ChxB,KAAK0zB,mBAAmB1C,CAAiB,EAC1C,EAGD,MAAM+C,EAA8BH,EAAsBI,KAAK,CAACC,EAAGC,IAAMA,EAAEtqB,OAASqqB,EAAErqB,MAAM,EAE5F,OAAOiqB,EACJntB,IAAI4P,IACH,IAAM6d,EAAWJ,EAA4Bjb,KAAKsb,GAA4B,IAAvB9d,EAAElM,QAAWgqB,EAAH,GAAO,CAAO,EAE/E,MAAO,CACLD,SAAAA,EACAE,OAHa/d,EAAE1S,QAAWuwB,EAAH,IAAgB,EAAE,EAK7C,CAAC,EACAp0B,OAAOsD,GAAO,CAAC,CAACA,EAAI8wB,QAAQ,EAChC,CAAA,CAUKG,cAAcnC,EAA8BpyB,EAAiB,4CACjE,OAAOC,KAAKu0B,SAASpC,EAAiBpyB,CAAM,EAC7C,CAAA,CAEew0B,SACdpC,EACApyB,EAAiB,4CAEjB,IACM2B,EAAM1B,KAAKw0B,eAAe,OAAQrC,CAAe,EACjDvwB,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK1B,KAAK+B,mBAAmB,CAAEC,QAF5C,CAAEC,OAAQ,oBAE2CC,OAAQnC,CAAM,EAAI2B,CAAG,CAAC,EACrFS,EAAON,MAAMD,EAAIO,OAGvB,MAAO,CAAEP,IAAAA,EAAKQ,KAFDD,EAAKnC,KAAKqC,cAEHC,OADLtC,KAAKuC,UAAUJ,EAAMpC,CAAM,GAE3C,CAAA,CAESoD,eAAeI,GAEvB,OADA,OAAOA,EAAUkxB,YACVlxB,CACR,CAESP,eAAe4tB,GAGvB,OAFA,OAAOA,EAActtB,GACrB,OAAOstB,EAAc6D,YACd7D,CACR,CAEO4D,eAAejwB,EAA0B4tB,GAC/C,OAAUnyB,KAAK0C,aAAayvB,CAAe,EAApC,IAAyC5tB,CACjD,CAEOmwB,YACNnwB,EACAkuB,EACAN,GAEMwC,EAAU30B,KAAKwE,YAAYiuB,CAAc,EAC/C,OAAUzyB,KAAKw0B,eAAejwB,EAAM4tB,CAAe,EAA5C,IAAiDwC,CACzD,CAEavC,aACZ7tB,EACA4tB,EACApyB,EAAiB,4CAEjB,IACM2B,EAAM1B,KAAKw0B,eAAejwB,EAAM4tB,CAAe,EAC/CvwB,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QAFpB,CAAEiB,eAAgB,oBAEWf,OAAQnC,CAAM,CAAE,EACvDoC,EAAON,MAAMD,EAAIO,OACjBC,EAAOD,EAAKyyB,WAAWluB,IAAImuB,GAAOA,EAAIjE,aAAa,EACnDtuB,EAAStC,KAAKuC,UAAUJ,EAAMpC,CAAM,EAE1C,OADAuC,EAAO/B,KAAOu0B,GAAgB90B,KAAKoyB,aAAa7tB,EAAM4tB,EAAiB2C,CAAY,EAC5E,CAAElzB,IAAAA,EAAKQ,KAAAA,EAAME,OAAAA,GACrB,CAAA,CAEaiwB,YACZhuB,EACAqsB,EACAuB,2CAEA,IAAMzwB,EAAM1B,KAAKw0B,eAAejwB,EAAM4tB,CAAe,EAE/CtvB,EAAOC,KAAKC,UAAU/C,KAAKgD,eAAe4tB,CAAa,CAAC,EACxD5uB,EAAU,CAAEiB,eAAgBjD,KAAKsE,SAAS,eAAe,EAAGrC,OAAQ,oBACpEL,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OAHrB,OAG6BuB,KAAAA,EAAMb,QAAAA,CAAO,CAAE,EACrDI,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAEaswB,SACZnuB,EACAkuB,EACAN,2CAEA,IAAMzwB,EAAM1B,KAAKw0B,eAAejwB,EAAM4tB,CAAe,EAE/CwC,EAAU30B,KAAKwE,YAAYiuB,CAAc,EACzC5vB,EAAOC,KAAKC,UAAU,CAAE6tB,cAAe,CAAEttB,GAAIoB,OAAOiwB,CAAO,CAAG,CAAA,CAAE,EAChE3yB,EAAU,CACdC,OAAQ,mBACRgB,eAAgBjD,KAAKsE,SAAS,wBAAwB,GAElD1C,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OAPrB,OAO6BuB,KAAAA,EAAMb,QAAAA,CAAO,CAAE,EACvDI,EAAOP,MAAMD,EAAIO,OAErB,MAAO,CAAEP,IAAAA,EAAKQ,KADPA,EAAKwuB,eAEb,CAAA,CAEaqC,aACZ1uB,EACAwwB,EACA5C,2CAEA,IAAMzwB,EAAM1B,KAAKw0B,eAAejwB,EAAM4tB,CAAe,EAE/CyC,EAAaG,EAAoBruB,IAAIiuB,IAAY,CACrD/D,cAAe,CACbttB,GAAItD,KAAKwE,YAAYmwB,CAAO,CAC7B,CACF,EAAC,EACI9xB,EAAOC,KAAKC,UAAU,CAC1B6xB,WAAAA,CACD,CAAA,EACK5yB,EAAU,CACdC,OAAQ,mBACRgB,eAAgBjD,KAAKsE,SAAS,kCAAkC,GAE5D1C,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OAbrB,OAa6BuB,KAAAA,EAAMb,QAAAA,CAAO,CAAE,EACrDI,GAAO,MAAOR,EAAIO,KAAI,GAAIyyB,WAChC,MAAO,CAAEhzB,IAAAA,EAAKQ,KAAMA,EAAKsE,IAAIrD,GAAOA,EAAIutB,aAAa,GACtD,CAAA,CAEarE,YACZhoB,EACAkuB,EACAN,2CAEA,IAAMwC,EAAU30B,KAAKwE,YAAYiuB,CAAc,EACzC/wB,EAAS1B,KAAKw0B,eAAejwB,EAAM4tB,CAAe,EAA5C,IAAiDwC,EAK7D,MAAO,CAAE/yB,IAFGC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OAFrB,SAE6BU,QAD5B,CAAEC,OAAQ,mBACyB,CAAE,EAEvCG,KADD,MAEd,CAAA,CAEaqxB,+BACZzC,EACAzsB,EAAoD,2DAEpD,IAAM7C,EAAS1B,KAAK0C,aAAasuB,CAAiB,EAAtC,IAA2CzsB,EAIjDnC,GAHNpC,KAAKwE,YAAYwsB,CAAiB,EAGrBnvB,MADDA,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QADpB,CAAEC,OAAQ,mBACiB,CAAE,GACtBE,QACvB,OAAOC,EAAK4yB,2BAA6B5yB,EAAK6yB,oBAC/C,CAAA,CACF,0SCruBYC,WAA2Bp0B,EAAxClB,kCACYI,KAAO2D,QAAG,cACV3D,KAAO2B,QAAG,eACV3B,KAAYqC,aAAG,eACfrC,KAAOggB,QAAG,iBAgJrB,CA1HOxd,OAAOC,uGACX,OAAO8mB,EAAM/mB,OAAO6G,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAsBKE,OAAOC,uGACX,OAAO2mB,EAAM5mB,OAAO0G,KAAArJ,KAAAA,KAAKgD,eAAeJ,CAAM,CAAC,EAChD,CAAA,CAsBKrC,KAAKR,EAAiB,oGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CAsBKqD,OAAOX,uGACX,OAAO8mB,EAAMnmB,OAAOiG,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAuBK0yB,WAAWjzB,2CACf,IAAMR,KAAS1B,KAAK2D,WAAW3D,KAAK2B,iBAC9BC,EAAMC,MAAM7B,KAAKe,OAAOe,MAAMJ,EAAK,CAAEQ,OAAAA,CAAM,CAAE,EAC7CE,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAESY,eAAeJ,GAOvB,IACUwyB,EAQV,OAfKxyB,EAAO2e,OACV3e,EAAO2e,KAAO,IAAIrD,MAEftb,EAAO2B,OACV3B,EAAO2B,KAAO,mBAEZ3B,EAAOwyB,WACDA,EAAaxyB,EAAbwyB,YACR,OAAOxyB,EAAOwyB,SACTxyB,EAAOgjB,SACVhjB,EAAOgjB,OAAS,CACdtiB,GAAIoB,OAAO0wB,CAAQ,KAIlBxyB,CACR,CACF,CCxJA2C,EAAA8vB,gBAAA,KAAA,GAJWA,EAAAA,EAAeA,kBAAfA,kBAIX,KAHC,SAAA,WACAA,EAAA,OAAA,SACAA,EAAA,MAAA,iTCGWC,WAAqBx0B,EAAlClB,kCACYI,KAAO2D,QAAG,QACV3D,KAAO2B,QAAG,SACV3B,KAAYqC,aAAG,SACfrC,KAAOggB,QAAG,WAmGrB,CAhFOxd,OAAOC,uGACX,OAAO8mB,EAAM/mB,OAAO6G,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAyBKE,OAAOC,uGACX,OAAO2mB,EAAM5mB,OAAO0G,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAuBKM,OAAON,uGACX,OAAO2mB,EAAMrmB,OAAOmG,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAuBKrC,KAAKR,EAAiB,oGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CACF,CCpGAwF,EAAAgwB,YAAA,KAAA,GAJWA,EAAAA,EAAWA,cAAXA,cAIX,KAHCA,EAAA,aAAuB,+BACvBA,EAAAA,EAAA,QAAkB,qBAClBA,EAAAA,EAAA,OAAiB,4TCFNC,WAAyB10B,EAAtClB,kCACYI,KAAO2D,QAAG,gBACV3D,KAAO2B,QAAG,aACV3B,KAAYqC,aAAG,YA2G1B,CAxFOG,OAAOC,uGACX,OAAO8mB,EAAM/mB,OAAO6G,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CA4BKE,OAAOC,uGACX,OAAO2mB,EAAM5mB,OAAO0G,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CA6BKM,OAAON,uGACX,OAAO2mB,EAAMrmB,OAAOmG,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAsBKrC,KAAKR,EAAiB,oGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CACF,0SC9GY01B,WAA6B30B,EAA1ClB,kCACYI,KAAO2D,QAAG,gBACV3D,KAAO2B,QAAG,iBACV3B,KAAYqC,aAAG,gBAiI1B,CA9GOG,OAAOkzB,uGACX,OAAOnM,EAAM/mB,OAAO6G,KAAArJ,KAAA01B,CAAa,EAClC,CAAA,CA6BK/yB,OAAO2e,uGACX,OAAOiI,EAAM5mB,OAAO0G,KAAArJ,KAAAshB,CAAS,EAC9B,CAAA,CA6BKpe,OAAON,uGACX,OAAO2mB,EAAMrmB,OAAOmG,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAsBKrC,KAAKR,EAAiB,oGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CAmBKqD,OAAOsyB,uGACX,OAAOnM,EAAMnmB,OAAOiG,KAAArJ,KAAA01B,CAAa,EAClC,CAAA,CACF,CChIAnwB,EAAAowB,oBAAA,KAAA,GALWA,EAAAA,EAAmBA,sBAAnBA,sBAKX,KAJCA,EAAA,OAAiB,mBACjBA,EAAAA,EAAA,YAAsB,6BACtBA,EAAAA,EAAA,UAAoB,yBACpBA,EAAAA,EAAA,QAAkB,qBCKnBpwB,EAAAqwB,2BAAA,KAAA,GATWA,EAAAA,EAA0BA,6BAA1BA,6BASX,KARCA,EAAA,UAAoB,yBACpBA,EAAAA,EAAA,UAAoB,yBACpBA,EAAAA,EAAA,qBAA+B,+CAC/BA,EAAAA,EAAA,SAAmB,uBACnBA,EAAAA,EAAA,OAAiB,mBACjBA,EAAAA,EAAA,WAAqB,2BACrBA,EAAAA,EAAA,QAAkB,qBAClBA,EAAAA,EAAA,UAAoB,yBCHrBrwB,EAAAswB,gBAAA,KAAA,GALWA,EAAAA,EAAeA,kBAAfA,kBAKX,KAJCA,EAAA,QAAkB,qBAClBA,EAAAA,EAAA,UAAoB,yBACpBA,EAAAA,EAAA,WAAqB,2BACrBA,EAAAA,EAAA,OAAiB,4TCCNC,UAAsBh1B,EAAnClB,kCACYI,KAAO2D,QAAG,SACV3D,KAAO2B,QAAG,UACV3B,KAAgB+1B,iBAAG,gBACnB/1B,KAAYqC,aAAG,UACfrC,KAAAg2B,aAAe,CACvB10B,OAAQ,MACRuB,KAAM,KACNb,QAAS,CAAEiB,eAAgB,mBAAoBhB,OAAQ,kBAAoB,EA6S9E,CAtROO,OAAOC,uGACX,OAAO8mB,EAAM/mB,OAAO6G,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CA6BKE,OAAOC,uGACX,OAAO2mB,EAAM5mB,OAAO0G,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CA0BKM,OAAON,uGACX,OAAO2mB,EAAMrmB,OAAOmG,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAyBKrC,KAAKR,EAAiB,oGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CAqBKqD,OAAOX,uGACX,OAAO8mB,EAAMnmB,OAAOiG,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAEKwzB,kDACJ,IACMr0B,EAAMC,MAAM7B,KAAK8B,MAAM9B,KAAK+1B,iBAAkB,CAAE/zB,QADtC,CAAEiB,eAAgB,mBAC2B,CAAE,EACzDb,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAcK8zB,4DAGJ,MAAO,CAAEt0B,IADGC,MAAM7B,KAAK8B,MADX,sBACsB9B,KAAKg2B,YAAY,EACrC5zB,KAAM,MACrB,CAAA,CAcK+zB,6DAGJ,MAAO,CAAEv0B,IADGC,MAAM7B,KAAK8B,MADX,uBACsB9B,KAAKg2B,YAAY,EACrC5zB,KAAM,MACrB,CAAA,CAEKg0B,4DACJ,IAAMC,EAAax0B,MAAM7B,KAAKi2B,UAC9B,OACEI,EAAWj0B,KAAKk0B,kBACgC,UAAhDD,EAAWj0B,KAAKk0B,iBAAiBC,WAE1B,QAEF,UACR,CAAA,CAoBKC,eAAehoB,2CACnB,IAAM/L,EAAqBzC,KAAKwE,YAAYgK,CAAM,EAKlD,OAFoB3M,MADRA,MAAM7B,KAAK8B,iBADAW,OACS,GACFN,OAG/B,CAAA,CAyBKs0B,qBACJjoB,EACAkoB,2CAEA,IAAMj0B,EAAqBzC,KAAKwE,YAAYgK,CAAM,EAC5CmoB,EAAgBD,EAAYpzB,GAC5B5B,aAAiBe,iBAEjBI,EAAOC,KAAKC,UAAU,CAC1B2zB,YAAa,CACXpzB,GAAIqzB,EACJ1xB,KAAMyxB,EAAYzxB,IACnB,CACF,CAAA,EACKjD,EAAU,CAAEiB,eAAgBjD,KAAKsE,SAAS,sBAAsB,GAEtE,MAAO,CAAE1C,IADGC,MAAM7B,KAAK8B,MAAMJ,EAAK1B,KAAK+B,mBAAmB,CAAET,OAR7C,OAQqDuB,KAAAA,EAAMb,QAAAA,CAAO,EAAIN,CAAG,CAAC,EAC3EU,KAAM,MACrB,CAAA,CA0BKw0B,uBACJpoB,EACAkoB,2CAEA,IACMh1B,aADqB1B,KAAKwE,YAAYgK,CAAM,kBACAkoB,EAAYpzB,GAG9D,MAAO,CAAE1B,IADGC,MAAM7B,KAAK8B,MAAMJ,EAAK1B,KAAK+B,mBAAmB,CAAET,OAD7C,UACuDI,CAAG,CAAC,EAC5DU,KAAM,MACrB,CAAA,CAESoC,YAAYgK,GACpB,OAAQA,EAAmBlL,IAAOkL,EAA0B3I,IAC7D,CAES7C,eAAeK,GACvB,OAAOA,CACR,CACF,CC1TAkC,EAAAsxB,aAAA,KAAA,GAHWA,EAAAA,EAAYA,eAAZA,eAGX,KAFCA,EAAA,OAAiB,mBACjBA,EAAAA,EAAA,UAAoB,yBCIrBtxB,EAAAuxB,YAAA,KAAA,GALWA,EAAAA,EAAWA,cAAXA,cAKX,KAHC,KAAA,OAEAA,EAAA,IAAA,+SCAWC,WAAiCj2B,EAM5ClB,YAAYo3B,EAAiBj2B,GAC3ByR,MAAMzR,CAAM,EALJf,KAAO2B,QAAG,YACV3B,KAAai3B,cAAG,cAChBj3B,KAAYqC,aAAG,uBAIvBrC,KAAK2D,gBAAkBqzB,SACxB,CAsBKx0B,OAAOC,uGACX,OAAO8mB,EAAM/mB,OAAO6G,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAqBKE,OAAOC,uGACX,OAAO2mB,EAAM5mB,OAAO0G,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAOKM,OAAON,uGACX,OAAO2mB,EAAMrmB,OAAOmG,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAuBKrC,KAAKR,EAAiB,oGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CAmBKqD,OAAOX,uGACX,OAAO8mB,EAAMnmB,OAAOiG,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CACF,0SC3GYy0B,WAAoBp2B,EAAjClB,kCAIYI,KAAO2D,QAAG,OACV3D,KAAcm3B,eAAG,cACjBn3B,KAAgBo3B,iBAAG,gBACnBp3B,KAAmBq3B,oBAAG,mBACtBr3B,KAAgBs3B,iBAAG,MACnBt3B,KAAAu3B,mBAAwBv3B,KAAKm3B,eAAR,cACrBn3B,KAAAw3B,kBAAuBx3B,KAAKu3B,mBAAR,UACpBv3B,KAAAy3B,oBAAyBz3B,KAAKu3B,mBAAR,YACtBv3B,KAAmB03B,oBAAG,oBAUtB13B,KAAYqC,aAAG,OAqiB1B,CA1jBCV,cACE,OAAU3B,KAAKe,OAAOyN,OAAf,QACR,CAUDmpB,0BACE,OAAU33B,KAAKe,OAAOyN,OAAf,yBACR,CACDopB,6BACE,OAAU53B,KAAKm3B,eAAR,WACR,CACDU,yBACE,iBAAkB73B,KAAKe,OAAOyN,iBAC/B,CAqBKhM,OAAOC,uGACX,OAAO8mB,EAAM/mB,OAAO6G,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAsBKE,OAAOC,uGACX,OAAO2mB,EAAM5mB,OAAO0G,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CA0BKM,OAAON,uGACX,OAAO2mB,EAAMrmB,OAAOmG,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAsBKrC,KAAKR,EAAiB,oGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CAmBKqD,OAAOX,uGACX,OAAO8mB,EAAMnmB,OAAOiG,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAoBDq1B,oBAAoBr1B,GAClB,OAAO,IAAIs0B,GAAyB/2B,KAAK0C,aAAaD,CAAU,EAAGzC,KAAKe,MAAM,CAC/E,CAeKk1B,kDACJ,IAIMr0B,EAAMC,MAAM7B,KAAK8B,MAAM9B,KAAKm3B,eAAgB,CAAEn1B,QAJpC,CACdiB,eAAgB,mBAChB80B,OAAQ,gDAEiD,CAAE,EACvD31B,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAeK41B,oEACJ,IAIMp2B,EAAMC,MAAM7B,KAAK8B,MAAM9B,KAAKm3B,eAAgB,CAAEn1B,QAJpC,CACdiB,eAAgB,mBAChB80B,OAAQ,uDAEiD,CAAE,EACvD31B,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CASK61B,cAAclnB,2CAClB,IAAMzM,EAAW,+CACXtC,EAAU,CAAEiB,eAAgBqB,EAAUyzB,OAAQzzB,CAAQ,EACtDzB,EAAOC,KAAKC,UAAU/C,KAAKmD,eAAe4N,CAAI,CAAC,EAC/CnP,EAAMC,MAAM7B,KAAK8B,MAAM9B,KAAKm3B,eAAgB,CAAEn1B,QAAAA,EAASa,KAAAA,EAAMvB,OAAQ,KAAO,CAAA,EAC5Ec,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAoBK81B,sBAAsBC,EAAeC,2CACzC,IAEM12B,EAAM1B,KAAKo3B,iBACXl1B,EAASk2B,EAAW,CAAEA,SAAAA,CAAQ,EAAK,GACnCv1B,EAAOC,KAAKC,UAAU,CAAEo1B,MAAAA,CAAO,CAAA,EAErC,MAAO,CAAEv2B,IADGC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QALpB,CAAEiB,eAAgB,mBAAoBhB,OAAQ,kBAAkB,EAKnCX,OAJ9B,OAIsCY,OAAAA,EAAQW,KAAAA,CAAI,CAAE,EACrDT,KAAM,MACrB,CAAA,CAyBKi2B,cAAcC,EAA6BF,2CAC/C,IAEM12B,EAAM1B,KAAKo3B,iBACXl1B,EAASk2B,EAAW,CAAEA,SAAAA,CAAQ,EAAK,GACnCv1B,EAAOC,KAAKC,UAAUu1B,CAAW,EAEvC,MAAO,CAAE12B,IADGC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QALpB,CAAEiB,eAAgB,mBAAoBhB,OAAQ,kBAAkB,EAKnCX,OAJ9B,MAIsCY,OAAAA,EAAQW,KAAAA,CAAI,CAAE,EACrDT,KAAM,MACrB,CAAA,CAiBKm2B,cAAcC,2CAClB,IACM31B,EAAOC,KAAKC,UAAU,CAAEy1B,IAAAA,CAAK,CAAA,EAGnC,MAAO,CAAE52B,IADGC,MAAM7B,KAAK8B,MAAM9B,KAAKs3B,iBAAkB,CAAEt1B,QADtC,CAAEiB,eAAgB,mBAAoBhB,OAAQ,kBAAkB,EACjBY,KAAAA,EAAMvB,OAHtD,MAG4D,CAAE,EAC/Dc,KAAM,MACrB,CAAA,CAiBKq2B,eAAezoB,2CACnB,IAEMnN,EAAOC,KAAKC,UAAU,CAAEiN,KAAAA,CAAM,CAAA,EAEpC,MAAO,CAAEpO,IADGC,MAAM7B,KAAK8B,MAAM9B,KAAKw3B,kBAAmB,CAAEx1B,QAFvC,CAAEiB,eAAgB,oBAE8BJ,KAAAA,EAAMvB,OAHvD,MAG6D,CAAE,EAChEc,KAAM,MACrB,CAAA,CAeKs2B,uDACJ,IAEM71B,EAAOC,KAAKC,UAAU,CAAE41B,SAAU,CAAA,CAAI,CAAE,EAE9C,MAAO,CAAE/2B,IADGC,MAAM7B,KAAK8B,MAAM9B,KAAKy3B,oBAAqB,CAAEz1B,QAFzC,CAAEiB,eAAgB,oBAEgCJ,KAAAA,EAAMvB,OAHzD,MAG+D,CAAE,EAClEc,KAAM,MACrB,CAAA,CAgBKw2B,0DACJ,IAEMh3B,EAAMC,MAAM7B,KAAK8B,MAAM9B,KAAKy3B,oBAAqB,CAAEz1B,QADzC,CAAEiB,eAAgB,oBACgC3B,OAFnD,KAEyD,CAAE,EACpEc,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAgBKy2B,6DACJ,IAEMj3B,EAAMC,MAAM7B,KAAK8B,MAAM9B,KAAKu3B,mBAAoB,CAAEv1B,QADxC,CAAEiB,eAAgB,mBAAoBhB,OAAQ,kBAAkB,EACfX,OAFlD,MAEwD,CAAE,EACnEc,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CASK02B,iBAAiB/nB,2CACrB,IAAMrP,EAAS1B,KAAK0C,aAAaqO,CAAI,EAAzB,IAA8B/Q,KAAK03B,oBAI/C,MAAO,CAAE91B,IADGC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QADpB,CAAEC,OAAQ,oBACmBX,OAF9B,QAEoC,CAAE,EACvCc,KAAM,MACrB,CAAA,CAOK22B,gBAAgBC,2CACpB,IAAMt3B,EAAM1B,KAAKq3B,oBACX7zB,EAAyB,CAC7BlC,OAAQ,MACRU,QAAS,CAAEiB,eAAgB,mBAAoBhB,OAAQ,kBAAoB,EAC3EY,KAAMC,KAAKC,UAAU,CACnBk2B,MAAOD,EACR,GAEGp3B,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK8B,CAAO,EACnCpB,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAOK82B,8DACJ,IAAMx3B,EAAM1B,KAAK23B,oBAKX/1B,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAJE,CAC7BJ,OAAQ,MACRU,QAAS,CAAEC,OAAQ,YAAc,EAEM,EACnCG,EAAOP,MAAMD,EAAIyC,OACvB,MAAO,CAAEzC,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAWK+2B,mBACJ12B,EACA61B,EACAc,2CAEA,IAEMv2B,EAAOC,KAAKC,UAAU,CAAEu1B,YAAAA,EAAac,oBAAAA,CAAmB,CAAE,EAEhE,MAAO,CAAEx3B,IADGC,MAAM7B,KAAK8B,MAAM9B,KAAKq5B,sBAAsB52B,CAAU,EAAG,CAAET,QAFvD,CAAEiB,eAAgB,oBAE8CJ,KAAAA,EAAMvB,OAHvE,KAG+E,CAAA,EAChFc,KAAM,MACrB,CAAA,CAUKk3B,0BACJhB,EACAc,2CAEA,IAEMv2B,EAAOC,KAAKC,UAAU,CAAEu1B,YAAAA,EAAac,oBAAAA,CAAmB,CAAE,EAEhE,MAAO,CAAEx3B,IADGC,MAAM7B,KAAK8B,MAAM9B,KAAK43B,uBAAwB,CAAE51B,QAF5C,CAAEiB,eAAgB,oBAEmCJ,KAAAA,EAAMvB,OAH5D,KAGkE,CAAE,EACrEc,KAAM,MACrB,CAAA,CAOKm3B,uDAIJ,MAAO,CAAE33B,IADGC,MAAM7B,KAAK8B,MAAM9B,KAAK63B,mBAAoB,CAAE71B,QADxC,CAAEiB,eAAgB,oBAC+B3B,OAFlD,MAEwD,CAAE,EAC3Dc,KAAM,MACrB,CAAA,CAEDo3B,QAAQzoB,EAAa0oB,GACnB,OAAOz5B,KAAK05B,cAAc3oB,EAAM0oB,CAAM,GAAKz5B,KAAK25B,gBAAgB5oB,EAAM0oB,CAAM,CAC7E,CAEDG,YAAY7oB,EAAa8oB,GACvB,OAAOA,EAAQC,MAAML,GAAUz5B,KAAKw5B,QAAQzoB,EAAM0oB,CAAM,CAAC,CAC1D,CAEDM,WAAWhpB,EAAa8oB,GACtB,OAAOA,EAAQG,KAAKP,GAAUz5B,KAAKw5B,QAAQzoB,EAAM0oB,CAAM,CAAC,CACzD,CAEDQ,iBAAiBlpB,EAAampB,GAC5B,OAAOA,EAAcF,KAAKG,GAAgBn6B,KAAKo6B,oBAAoBrpB,EAAMopB,CAAY,CAAC,CACvF,CAEDE,aAAatpB,GACX,OAAOA,EAAKzN,GAAGwB,MAAM,UAAU,CAChC,CAES3B,eAAe4N,GACjB1N,EAAMzC,OAAOC,OAAO,GAAIkQ,CAAI,EAGlC,OAFA,OAAO1N,EAAIC,GACX,OAAOD,EAAIi3B,SACJj3B,CACR,CAESX,aAAaD,GACrB,OAAUzC,KAAK2B,QAAR,IAAmB2N,mBAAmBtP,KAAKu6B,MAAM93B,CAAU,CAAC,CACpE,CAES83B,MAAM93B,GACd0B,IAAIb,EAQJ,OANEA,EADwB,UAAtB,OAAOb,GAA2BA,EAAWa,GAC1Cb,EAAWa,GACe,UAAtB,OAAOb,GAA2BA,EAAW63B,SACjD73B,EAAW63B,SAEX73B,EAEAiC,OAAOpB,CAAE,CACjB,CAESo2B,cAAc3oB,EAAM0oB,GAC5B,IAAMe,EAAiBzpB,EAAKypB,gBAAkB,GAC9C,OACEx6B,KAAKy6B,oBAAqB1pB,GAAQA,EAAK2pB,OAAS3pB,EAAK2pB,MAAM9F,YAAe,GAAI6E,CAAM,GACpFe,EAAeR,KAAK,CAAA,CAAG12B,GAAAA,CAAI,IAAKm2B,IAAWn2B,CAAE,CAEhD,CAESq2B,gBAAgB5oB,EAAM0oB,GAE9B,OADyB1oB,GAAQA,EAAK4pB,QAAU5pB,EAAK4pB,OAAO/F,YAAe,IACpDoF,KAAKY,GAC1B56B,KAAKy6B,oBAAoBG,EAASC,MAAMH,MAAM9F,WAAY6E,CAAM,CAAC,CAEpE,CAESgB,oBAAoB7F,EAAY6E,GACxC,OAAO7E,EAAWoF,KAAKnF,GAAOA,EAAIiG,KAAKx3B,KAAOm2B,CAAM,CACrD,CAESJ,sBAAsB52B,GAC9B,SAAUzC,KAAKe,OAAOyN,gBAAgBxO,KAAKu6B,MAAM93B,CAAU,YAC5D,CAES23B,oBAAoBrpB,EAAaopB,GAEzC,QAD4B,OAAAlmB,EAAAlD,MAAAA,EAAA,KAAA,EAAAA,EAAM4pB,QAAM,KAAA,EAAA1mB,EAAE2gB,aAAc,IAAIluB,IAAIq0B,IAAM,OAAA,OAAA9mB,EAAA8mB,MAAAA,EAAA,KAAA,EAAAA,EAAIF,OAAK,KAAA,EAAA5mB,EAAE3Q,EAAE,CAAA,EACzD02B,KAAK12B,GAAMA,IAAO62B,CAAY,CACzD,CACF,CCnkBA50B,EAAAy1B,iBAAA,KAAA,GAJWA,EAAAA,EAAgBA,mBAAhBA,mBAIX,KAHC,MAAA,QACAA,EAAA,IAAA,MACAA,EAAA,OAAA,kTCIWC,WAAiCn6B,EAK5ClB,YAAYmB,EAAsBm6B,GAChC1oB,MAAMzR,CAAM,EAJJf,KAAO2B,QAAG,WACV3B,KAAYqC,aAAG,cAIvBrC,KAAK2D,QAAU,4BAA4B3D,KAAKwE,YAAY02B,CAAe,CAC5E,CAEK1K,OACJjI,EACAsI,EACAsK,2CAEA,IAAMz5B,GAAMy5B,MAAAA,EAAoB,KAAA,EAApBA,EAAsBx5B,UAAW3B,KAAK2B,QAE5CkB,EAAO7C,KAAKo7B,wBAAwB7S,EAAQsI,EAAUsK,CAAoB,EAChFh3B,IAAIgtB,EAC2B,YAA3B,OAAOtuB,EAAKuuB,aACdD,EAActuB,EAAKuuB,cAErB,IAAMpvB,EAAUpB,OAAOC,QACrBs6B,MAAAA,EAAoB,KAAA,EAApBA,EAAsBn5B,UAAW,CAC/B+1B,OAAQ,kBACT,EACD5G,CAAW,EAEPvvB,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OAZrB,OAY6BuB,KAAAA,EAAMb,QAAAA,CAAO,CAAE,EACrDI,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAEDi5B,sBACE9S,EACA2I,EACAL,EACAsK,GAEA,IAAMz5B,MAAU1B,KAAK2D,aAAWw3B,MAAAA,EAAA,KAAA,EAAAA,EAAsBx5B,UAAW3B,KAAK2B,SAEhEkB,EAAO7C,KAAKo7B,wBAAwB7S,EAAQsI,EAAUsK,CAAoB,EAChFh3B,IAAIgtB,EAC2B,YAA3B,OAAOtuB,EAAKuuB,aACdD,EAActuB,EAAKuuB,cAErB,IAAMpvB,EAAUhC,KAAKe,OAAOgO,gBAAe,EAAG/M,QAQxCyK,GAPN7L,OAAOC,OACLmB,GACAm5B,MAAAA,EAAoB,KAAA,EAApBA,EAAsBn5B,UAAW,CAC/B+1B,OAAQ,kBACT,CAAA,EAEHn3B,OAAOC,OAAOmB,EAASmvB,CAAW,EACtB,IAAIzkB,gBAChBD,EAAIa,KAfW,OAeE5L,EAAK,CAAA,CAAI,EAC1B,IAAK,MAAMuL,KAAOjL,EACZA,EAAQT,eAAe0L,CAAG,GAC5BR,EAAIgB,iBAAiBR,EAAKjL,EAAQiL,EAAI,EAI1CR,EAAI+jB,OAAO9iB,iBAAiB,WAAYwjB,CAAU,EAElD/sB,IAAIktB,EAOJ,OALEA,EAD4B,YAA1B,OAAOxuB,EAAKyuB,UACJzuB,EAAKyuB,YAELzuB,EAEZ4J,EAAIqB,KAAKujB,CAAO,EACT5kB,CACR,CAED8kB,mBAAmB9kB,GACjB,OAAO,IAAIvF,QAAQ,CAACtF,EAAK4vB,KACvB/kB,EAAIiB,iBAAiB,UAAW,KACX,IAAnBjB,EAAImB,YAAoC,MAAfnB,EAAIvI,QAAiC,MAAfuI,EAAIvI,OAE/CstB,EACE/kB,EAAIU,aAAe,CAAE/K,KAAMU,KAAKoH,MAAMuC,EAAIU,YAAY,CAAG,EAAG,wBAAwB,EAFtFvL,EAAIkB,KAAKoH,MAAMuC,EAAIU,YAAY,CAAC,CAItC,CAAC,CACH,CAAC,CACF,CAEK5M,KAAKR,mGACT,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CAEKqD,OAAOk4B,uGACX,OAAO/R,EAAMnmB,OAAOiG,KAAArJ,KAAAs7B,CAAU,EAC/B,CAAA,CAEKC,sDACJ,IACM75B,EAAS1B,KAAK2B,QAAR,WACNC,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QAFpB,CAAEC,OAAQ,mBAEiB,CAAE,EACvCG,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAEKo5B,UAAUC,EAAoBC,2CAClC,IAAMh6B,EAAS1B,KAAK2B,QAAR,YAA2B2N,mBAAmBmsB,CAAU,EAE9D54B,EAAO,IAAIiG,EACX6yB,EAAiBD,aAAsBtyB,YAAcwyB,OAAOC,KAAKH,CAAU,EAAIA,EAO/E95B,GANNiB,EAAK8D,OAAO,OAAQg1B,CAAc,EAMtB95B,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OATrB,OAS6BuB,KAAAA,EAAMb,QAJlC,CACdC,OAAQ,mBAG+C,CAAE,GACrDG,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAEK05B,aAAaL,2CACjB,IAEM/5B,EAAS1B,KAAK2B,QAAR,YAA2B85B,EACjC75B,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OAHrB,SAG6BU,QAF5B,CAAEC,OAAQ,mBAEyB,CAAE,EAC/CG,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAEK25B,YAAYC,2CAChB,IAAMt6B,EAAS1B,KAAK2B,QAAR,SAEZ,MAAMkB,EAAO,IAAIiG,EACjBkzB,EAAM36B,QAAQovB,IACZ,IAAMkL,EACJlL,EAAKwL,oBAAoB7yB,YAAcwyB,OAAOC,KAAKpL,EAAKwL,QAAQ,EAAIxL,EAAKwL,SAC3Ep5B,EAAK8D,OAAO8pB,EAAKyL,KAAMP,CAAc,CACvC,CAAC,EACD,IAGM/5B,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OAVrB,OAU6BuB,KAAAA,EAAMb,QAHlC,CACdC,OAAQ,mBAE+C,CAAE,EACrDG,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAEK+5B,gBAAgBC,2CACpB,IAAM16B,EAAS1B,KAAK2B,QAAR,IAAmBy6B,EAC/B,OAAOv6B,MAAM7B,KAAK8B,MAAMJ,CAAG,EAC5B,CAAA,CAEO05B,wBACN7S,EACAsI,EACAsK,GAEA,IAAMt4B,EAAO,IAAIiG,EACX6yB,EAAiBpT,aAAkBnf,YAAcwyB,OAAOC,KAAKtT,CAAM,EAAIA,EAC7EpkB,IAAIk4B,EAAiBxL,EAMrB,GALoB,aAAhB,OAAOE,MAAwBxI,aAAkBwI,OACnDsL,EAAiB9T,EAAO1iB,MAE1BhD,EAAK8D,QAAOw0B,MAAAA,EAAA,KAAA,EAAAA,EAAsBmB,mBAAoB,OAAQX,EAAgBU,CAAc,EAC5Fx5B,EAAK8D,OAAO,WAAY01B,CAAc,EAClClB,MAAAA,GAAAA,EAAsBoB,YACxB,IAAK,MAAMtvB,KAAOkuB,EAAqBoB,YACjCpB,EAAqBoB,YAAYh7B,eAAe0L,CAAG,GACrDpK,EAAK8D,OAAOsG,EAAKnK,KAAKC,UAAUo4B,EAAqBoB,YAAYtvB,EAAI,CAAC,EAI5E,OAAOpK,CACR,CACF,CC7KA0C,EAAAi3B,gBAAA,KAAA,GALWA,EAAAA,EAAeA,kBAAfA,kBAKX,KAJC,SAAA,WACAA,EAAA,OAAA,SACAA,EAAA,aAAA,eACAA,EAAA,QAAA,mTCaWC,UAA2B37B,EAAxClB,kCACYI,KAAO2D,QAAG,cACV3D,KAAO2B,QAAG,eACV3B,KAAYqC,aAAG,eACfrC,KAAOggB,QAAG,iBAghBrB,CAzfOrd,OAAOC,uGACX,OAAO2mB,EAAM5mB,OAAO0G,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAEKmJ,MAAMnJ,2CACV,IAAMlB,EAAS1B,KAAK0C,aAAaE,CAAM,EAA3B,SAINhB,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OAHrB,OAG6BuB,KAF/B,GAEqCb,QADlC,CAAEiB,eAAgB,mBAAoBhB,OAAQ,kBAAkB,CACvB,CAAE,EACrDG,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAsBK7B,KAAKR,EAAiB,oGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CAqBK28B,aACJj6B,EACAP,EAAiB,kDAEjB,IAAMoB,EAAKtD,KAAK6D,YAAYpB,CAAU,EAChCf,EAAS1B,KAAK2B,YAAW2B,aAE/B,IACE,IAAM1B,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QAFtB,CAAEiB,eAAgB,oBAEaf,OAAAA,CAAM,CAAE,EAC/CE,EAAO,OAAA6R,EAAC,MAAMrS,EAAIO,KAAI,GAAK,KAAA,EAAA8R,EAAA0oB,oBACjC,MAAO,CAAE/6B,IAAAA,EAAKQ,KAAAA,EAOf,CANC,MAAOgC,GACP,GAAsB,MAAlBA,EAAGxC,IAAIsC,OAET,MADM,CAAE9B,KAAMw6B,EAAWh7B,IAAAA,CAAG,EAAKC,MAAM7B,KAAKwC,OAAOC,CAAU,EACtD,CAAEb,IAAAA,EAAKQ,KAAMw6B,EAAUD,mBAAmB,EAEnD,MAAMv4B,CACP,GACF,CAmBK5B,OAAOC,uGACX,OAAO8mB,EAAM/mB,OAAO6G,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAuBKS,OAAON,uGACX,OAAO2mB,EAAMrmB,OAAOmG,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAsBKQ,OAAOX,uGACX,OAAO8mB,EAAMnmB,OAAOiG,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAEKo6B,WAAWh3B,2CACf,IACMnE,EAAM,sBAAsB4N,mBAAmBzJ,CAAI,EACnDjE,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QAFpB,CAAEiB,eAAgB,mBAES,CAAE,EACvCd,EAAON,MAAMD,EAAIO,OAEvB,MAAO,CAAEP,IAAAA,EAAKQ,KADDD,EAAKnC,KAAKqC,eAExB,CAAA,CAEKy6B,aACJC,EACA76B,EAAiB,4CAEjB,IACM86B,EAAgB,IAAIlH,EAAc91B,KAAKe,MAAM,EAC7Ck8B,EAAaj9B,KAAKwE,YAAYu4B,IAAgB,MAAOC,EAAc/G,QAAS,GAAE7zB,KAAKyD,IAAI,EACvFnE,EAAM,wBAAwB4N,mBAAmB2tB,CAAU,EAC3Dr7B,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QAJpB,CAAEiB,eAAgB,oBAIWf,OAAAA,CAAM,CAAE,EAC/CC,EAAON,MAAMD,EAAIO,OAEvB,MAAO,CAAEP,IAAAA,EAAKQ,KADDD,EAAKnC,KAAKqC,eAExB,CAAA,CAEK66B,YACJH,EACA76B,EAAiB,4CAEjB,IACM86B,EAAgB,IAAIlH,EAAc91B,KAAKe,MAAM,EAC7Ck8B,EAAaj9B,KAAKwE,YAAYu4B,IAAgB,MAAOC,EAAc/G,QAAS,GAAE7zB,KAAKyD,IAAI,EACvFnE,EAAM,uBAAuB4N,mBAAmB2tB,CAAU,EAC1Dr7B,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QAJpB,CAAEiB,eAAgB,oBAIWf,OAAAA,CAAM,CAAE,EAC/CC,EAAON,MAAMD,EAAIO,OAEvB,MAAO,CAAEP,IAAAA,EAAKQ,KADDD,EAAKnC,KAAKqC,eAExB,CAAA,CAEK86B,WACJC,EACAl7B,EAAiB,4CAEjB,IACMm7B,EAAc,IAAInG,GAAYl3B,KAAKe,MAAM,EACzCu8B,EAASt9B,KAAKwE,YAAY44B,IAAY,MAAOC,EAAYpH,WAAW7zB,IAAI,EACxEV,EAAM,sBAAsB4N,mBAAmBguB,CAAM,EACrD17B,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QAJpB,CAAEiB,eAAgB,oBAIWf,OAAAA,CAAM,CAAE,EAC/CC,EAAON,MAAMD,EAAIO,OAEvB,MAAO,CAAEP,IAAAA,EAAKQ,KADDD,EAAKnC,KAAKqC,eAExB,CAAA,CAEKk7B,kBAAkBC,2CACtB,IAAM97B,EAAS1B,KAAK2B,YAAW67B,YAK/B,MAAO,CAAE57B,IADGC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OAHrB,OAG6BuB,KAF/B,GAEqCb,QADlC,CAAEiB,eAAgB,mBAAoBhB,OAAQ,kBAAkB,CACvB,CAAE,EAC7CG,KAAM,MACrB,CAAA,CAEDmmB,OAAOmO,GACL,OAAO,IAAIuE,GAAyBj7B,KAAKe,OAAQ21B,CAAW,CAC7D,CAED+G,QAAQ/G,GACN,OAAIA,EAAYnyB,OAASi4B,EAAeA,gBAACkB,SAChChH,EAAYiH,YAEd,UAASjH,EAAYkH,OAAS,UAAY,IAAKlH,EAAYmH,WACnE,CAsBKC,YAAYpH,2CAChB,GAAM,CAAE90B,IAAAA,EAAKQ,KAAAA,CAAI,EAAKP,MAAM7B,KAAKm9B,WAAW32B,KAAAA,EAAW,CACrDu3B,oBAAqB,CAAA,EACrBC,SAAU,CAAA,CACX,CAAA,EAQD,MAAO,CAAE57B,MANmBA,GAAQ,IAAI43B,KAAK,GACpB,UAAvB,OAAOtD,EACHuH,EAAap4B,OAAS6wB,GAAeuH,EAAaJ,cAAgBnH,EAClE12B,KAAKk+B,QAAQD,EAAcvH,CAAW,CAAC,EAGnB90B,IAAAA,GAC3B,CAAA,CAmBKu8B,iBACJ17B,2CAEA,IAAM+6B,EAAQx9B,KAAK6D,YAAYpB,CAAU,EAEzC,OADkB,IAAImvB,GAAiB5xB,KAAKe,OAAQf,KAAKgB,QAAQ,EAChDT,KAAK,CAAEgE,KAAM,mBAAmBi5B,CAAO,CAAE,EAC3D,CAAA,CAoBDY,iBAAiBC,GACfl6B,IAAIm6B,EAAgB,IAAI13B,MAIxB,OAFE03B,EADED,GAAoBA,EAAiBE,YAAcF,EAAiBE,WAAWC,UACjE59B,OAAO6J,KAAK4zB,EAAiBE,WAAWC,SAAS,EAE5DF,CACR,CAwBKG,eACJh8B,EACAi8B,EACAx8B,2CAEA,IAAMR,EAAS1B,KAAK0C,aAAaD,CAAU,EAA/B,SAAyCi8B,EAC/C18B,EAAU,CAAEC,OAAQjC,KAAKsE,SAAS,iBAAiB,GACnD1C,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QAAAA,EAASE,OAAAA,CAAM,CAAE,EAC/CE,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAYKu8B,wBACJl8B,EACAkN,iDAEA,IAAMrM,EAAKtD,KAAK6D,YAAYpB,CAAU,EACxBm8B,GAAQ/8B,MAAM7B,KAAKwC,OAAOc,CAAE,GAAlClB,QACFy8B,GAAgBD,MAAAA,EAAA,KAAA,EAAAA,EAAKjvB,SAAU,GAC/BmvB,EAAiBl+B,OAAAC,OAAAD,OAAAC,OAAA,GAAAg+B,CAAa,EAAKlvB,CAAM,EACzCovB,EAAmBl9B,MAAM7B,KAAKkD,OAAO,CACzCI,GAAAA,EACAqM,OAAQmvB,CACT,CAAA,EACD,OAAO,eAAOC,GAAiB,KAAA,EAAA9qB,EAAE7R,MAClC,CAWK48B,eAAeJ,EAAmBxmB,2CACtC,IAAM6mB,EAAO,IAAI/gB,KACjB/Z,IAAIqD,EAUJ,GAAqB,MAJnBA,EALG4Q,EAKMvW,MAAM7B,KAAKe,OAAOe,eAChB88B,EAAIf,eAAezlB,6BAAmC6mB,EAAK3Y,QAAO,CAAI,EALxEzkB,MAAM7B,KAAKe,OAAOe,eAChB88B,EAAIf,uCAAuCoB,EAAK3Y,QAAS,CAAE,GAO7DpiB,OACT,MAAM,IAAIqF,MAAc,mCAAoC,EAG9D,OADgB1H,MAAM2F,EAAOrF,OAE9B,CAAA,CAWK+8B,iBAAiBz8B,EAA4C08B,2CACjE,OAAOt9B,MAAM7B,KAAKuoB,OAAO9lB,CAAU,EAAEs5B,YAAY,CAC/C,CAAEG,KAAM,kBAAmBD,SAAUn5B,KAAKC,UAAUo8B,CAAY,CAAU,EAC3E,EACF,CAAA,CAaKC,qBAAqBR,EAAmBxmB,EAAiBinB,2CAC7D,IAAM39B,EAAS1B,KAAK0C,aAAak8B,CAAG,EAAxB,aAAsCxmB,EAE5CvV,EAAOC,KAAKC,UAAU,CAAEs8B,KAAAA,CAAM,CAAA,EAK9Bz9B,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OANrB,MAM6BuB,KAAAA,EAAMb,QAJlC,CACdC,OAAQ,mFACRgB,eAAgB,mBAEuC,CAAE,EACrDb,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAMKk9B,yBAAyBzB,2CAC7B,IAAMn8B,EAAS1B,KAAK0C,aAAam7B,CAAW,EAAhC,YACNj8B,EAAMC,MAAM7B,KAAK8B,MAAMJ,CAAG,EACxBg1B,GAAgB70B,MAAMD,EAAIO,KAAI,GAA9Bu0B,eACR,MAAO,CACL90B,IAAAA,EACAQ,KAAMs0B,GAET,CAAA,CAoBK6I,qBAAqBX,EAAmB18B,2CAC5C,IAAMR,EAAS1B,KAAK0C,aAAak8B,CAAG,EAAxB,aAGZ,MAAO,CAAEh9B,IADGC,MAAM7B,KAAK8B,MAAMJ,EAAK1B,KAAK+B,mBAAmB,CAAET,OAD7C,SACqDY,OAAAA,GAAUR,CAAG,CAAC,EACpEU,KAAM,MACrB,CAAA,CAWKo9B,8BACJ/8B,EACAg9B,2CAEA,IAAMn8B,EAAKtD,KAAK6D,YAAYpB,CAAU,EACtC,OAAOZ,MAAM7B,KAAKkD,OAAO,CACvBI,GAAAA,EACAm8B,aAAAA,CACD,CAAA,EACF,CAAA,CAEOvB,QAAQ5gB,EAAQsI,GACtB,OAAOhlB,OAAO6J,KAAKmb,CAAM,EAAEkU,MAAM7sB,GAC3BrG,MAAMC,QAAQyW,EAAOrQ,EAAI,GAAKrG,MAAMC,QAAQ+e,EAAO3Y,EAAI,EAClD2Y,EAAO3Y,GAAK6sB,MAAM4F,GAAMpiB,EAAOrQ,GAAK0yB,SAASD,CAAE,CAAC,EAEhC,UAAvB,OAAOpiB,EAAOrQ,IACE,OAAhBqQ,EAAOrQ,IACgB,UAAvB,OAAO2Y,EAAO3Y,IACE,OAAhB2Y,EAAO3Y,GAEAjN,KAAKk+B,QAAQ5gB,EAAOrQ,GAAM2Y,EAAO3Y,EAAI,EAErCqQ,EAAOrQ,KAAS2Y,EAAO3Y,EAEjC,CACF,CACF,CC9hBA1H,EAAAq6B,eAAA,KAAA,GALWA,EAAAA,EAAcA,iBAAdA,iBAKX,KAJC,GAAA,KACAA,EAAA,UAAA,YACAA,EAAA,KAAA,OACAA,EAAA,QAAA,UCHDr6B,EAAAs6B,YAAA,KAAA,GAHWA,EAAAA,EAAWA,cAAXA,cAGX,KAFC,aAAA,eACAA,EAAA,UAAA,YCCDt6B,EAAAu6B,UAAA,KAAA,GAHWA,EAAAA,EAASA,YAATA,YAGX,KAFC,WAAA,aACAA,EAAA,aAAA,eCIDv6B,EAAAw6B,wBAAA,KAAA,GAJWA,EAAAA,EAAuBA,0BAAvBA,0BAIX,KAHCA,EAAA,OAAiB,mBACjBA,EAAAA,EAAA,QAAkB,qBAClBA,EAAAA,EAAA,OAAiB,6TCFNC,WAA6Bl/B,EAA1ClB,kCACYI,KAAO2D,QAAG,gBACV3D,KAAO2B,QAAG,UACV3B,KAAYqC,aAAG,SA+D1B,CAzCOG,OAAOy9B,wGACX,OAAO1W,EAAM/mB,OAAO6G,KAAArJ,KAAAigC,CAAM,EAC3B,CAAA,CAsBK1/B,KAAKR,EAAiB,6CAC1B,IACM2B,EAAM1B,KAAK2B,QACXC,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QAFpB,CAAEiB,eAAgB,oBAEWf,OAAQnC,CAAM,CAAE,EACvDoC,EAAON,MAAMD,EAAIO,OAGvB,MAAO,CAAEP,IAAAA,EAAKQ,KAFDD,EAAKnC,KAAKqC,eAGxB,CAAA,CAESK,aAAau9B,GACrB,SAAUjgC,KAAK2B,WAAWs+B,EAAOC,YAAYD,EAAOhzB,GACrD,CAESjK,eAAeK,GACvB,OAAOA,CACR,CACF,0SC7DY88B,WAA6Br/B,EAA1ClB,kCACYI,KAAO2D,QAAG,SACV3D,KAAO2B,QAAG,UACV3B,KAAYqC,aAAG,UAEjBrC,KAAAogC,0BAA4B,CAAC,YAC7BpgC,KAAsBqgC,uBAAG,mBACzBrgC,KAAasgC,cAAG,QA+JzB,CAnIO99B,OACJI,EACAV,EAAoC,wGAEpC,OAAOqnB,EAAM/mB,OAAM6G,KAAArJ,KAAC4C,EAAQV,CAAM,EACnC,CAAA,CAgCKS,OAAOC,uGACX,OAAO2mB,EAAM5mB,OAAO0G,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAwBKM,OAAON,uGACX,OAAO2mB,EAAMrmB,OAAOmG,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CA0BKrC,KAAKR,EAAiB,oGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CAqBKqD,OAAOX,uGACX,OAAO8mB,EAAMnmB,OAAOiG,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAESC,aAAaE,GACrB,IAAM29B,EAAkBjxB,mBAAmB1M,EAAOs9B,QAAQ,EACpD7wB,EAAaC,mBAAmB1M,EAAOqK,GAAG,EAChD,MAA8D,CAAC,EAA3DjN,KAAKogC,0BAA0Bh2B,QAAQxH,EAAOs9B,QAAQ,EAC9ClgC,KAAKqgC,2BAA0BE,KAAmBlxB,EAElDrP,KAAK2B,YAAW4+B,KAAmBlxB,CAEhD,CAESrM,eAAeK,GACvB,OAAOA,CACR,CACF,2SCvKYm9B,WAAqC1/B,EAAlDlB,kCACYI,KAAO2D,QAAG,SACV3D,KAAO2B,QAAG,mBACV3B,KAAQkgC,SAAG,WACXlgC,KAAYqC,aAAG,SAkC1B,CAbOG,OACJi+B,wGAEA,OAAOlX,EAAM/mB,OAAO6G,KAAArJ,KAAAygC,CAAoB,EACzC,CAAA,CAES/9B,aAAa+9B,GACrB,SAAUzgC,KAAK2B,WAAW3B,KAAKkgC,YAAYO,EAAqBxzB,GACjE,CAESjK,eAAeK,GACvB,OAAOA,CACR,CACF,0SCtCYq9B,WAAkC5/B,EAA/ClB,kCACYI,KAAO2D,QAAG,SACV3D,KAAO2B,QAAG,eACV3B,KAAYqC,aAAG,cAuL1B,CApKOG,OAAOm+B,uGACX,OAAOpX,EAAM/mB,OAAO6G,KAAArJ,KAAA2gC,CAAkB,EACvC,CAAA,CAqBKpgC,KAAKR,EAAiB,oGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CAeK6gC,uHACJ,OAAOrX,EAAMhpB,KAAK8I,KAAArJ,KAAA,CAAEo4B,SAAUp4B,KAAKe,OAAOyN,MAAM,CAAE,EACnD,CAAA,CAeKqyB,oHACJ,OAAOtX,EAAMhpB,KAAK8I,KAAArJ,KAAA,CAAE8gC,WAAY,CAAA,CAAI,CAAE,EACvC,CAAA,CAyBKn+B,OAAOC,uGACX,OAAO2mB,EAAM5mB,OAAO0G,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CA0BKM,OAAON,uGACX,OAAO2mB,EAAMrmB,OAAOmG,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CA0BKm+B,KAAKn+B,2CACT,OAAOA,EAAOU,GAAKtD,KAAKkD,OAAON,CAAM,EAAI5C,KAAK2C,OAAOC,CAAM,EAC5D,CAAA,CAmBKQ,OAAOX,uGACX,OAAO8mB,EAAMnmB,OAAOiG,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CACF,CC5CA8C,EAAAy7B,sBAAA,KAAA,GAbWA,EAAAA,0BAAAA,EAAAA,sBAaX,KATC,gBAAA,kBAIAA,EAAA,OAAA,SAIAA,EAAA,MAAA,QAMDz7B,EAAA07B,UAAA,KAAA,GAHWA,EAAAA,cAAAA,EAAAA,UAGX,KAFC,mBAAA,qBACAA,EAAA,SAAA,WAMD17B,EAAA27B,qBAAA,KAAA,GAHWA,EAAAA,EAAoBA,uBAApBA,uBAGX,KAFC,OAAA,SACAA,EAAA,SAAA,qTC3JWC,WAAqBrgC,EAAlClB,kCACYI,KAAO2D,QAAG,QACV3D,KAAO2B,QAAG,eACV3B,KAAYqC,aAAG,cA0E1B,CAvDOG,OAAOC,wGACX,OAAO8mB,EAAM/mB,OAAO6G,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAyBKE,OAAOC,wGACX,OAAO2mB,EAAM5mB,OAAO0G,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAuBKrC,KAAKR,EAAiB,qGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CACF,CC/DAwF,EAAA67B,gBAAA,KAAA,GAdWA,EAAAA,EAAeA,kBAAfA,kBAcX,KAbC,MAAA,QACAA,EAAA,eAAA,gBACAA,EAAA,WAAA,YACAA,EAAA,MAAA,QACAA,EAAA,UAAA,YACAA,EAAA,eAAA,gBACAA,EAAA,UAAA,YACAA,EAAA,OAAA,SACAA,EAAA,MAAA,QACAA,EAAA,WAAA,YACAA,EAAA,OAAA,SACAA,EAAA,OAAA,SACAA,EAAA,KAAA,OCPD77B,EAAA87B,WAAA,KAAA,GAJWA,EAAAA,EAAUA,aAAVA,aAIX,KAHCA,EAAA,MAAgB,iBAChBA,EAAAA,EAAA,SAAmB,uBACnBA,EAAAA,EAAA,QAAkB,8TCNPC,WAA6BxgC,EAA1ClB,kCACYI,KAAO2D,QAAG,OACV3D,KAAO2B,QAAG,iBACV3B,KAAYqC,aAAG,OAkH1B,CA/FOG,OAAOC,uGACX,OAAO8mB,EAAM/mB,OAAO6G,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAqBKE,OAAOC,uGACX,OAAO2mB,EAAM5mB,OAAO0G,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAsBKM,OAAON,uGACX,OAAO2mB,EAAMrmB,OAAOmG,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAsBKrC,KAAKR,EAAiB,oGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CAmBKqD,OAAOX,uGACX,OAAO8mB,EAAMnmB,OAAOiG,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CACF,CC7GA8C,EAAAg8B,yBAAA,KAAA,GALWA,EAAAA,EAAwBA,2BAAxBA,2BAKX,KAJCA,EAAA,uBAAiC,mDACjCA,EAAAA,EAAA,mBAA6B,2CAC7BA,EAAAA,EAAA,SAAmB,uBACnBA,EAAAA,EAAA,QAAkB,8TCyCPC,WAAkC1gC,EAA/ClB,kCACYI,KAAO2D,QAAG,gBACV3D,KAAO2B,QAAG,oBACV3B,KAAYqC,aAAG,mBA4O1B,CAzNOG,OAAOC,uGACX,OAAO8mB,EAAM/mB,OAAO6G,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAqBKE,OAAOC,uGACX,OAAO2mB,EAAM5mB,OAAO0G,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAsBKrC,KAAKR,EAAiB,oGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CAoBKqD,OAAOX,uGACX,OAAO8mB,EAAMnmB,OAAOiG,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAmBKR,OAAOQ,uGACX,IAAMg/B,EAAwBzhC,KAAK0hC,iBAAiBj/B,CAAU,EAC9D0B,IAAIw9B,EAAwC,CAC1Cr+B,GAAItD,KAAKwE,YAAY/B,CAAU,EAC/ByB,OAAQq9B,EAAwBA,yBAACK,UASnC,OANIH,IACFE,EACK/gC,OAAAC,OAAAD,OAAAC,OAAA,GAAA8gC,CAAO,EACV,CAAAF,cAAAA,CAAa,IAGVlY,EAAMrmB,OAAOmG,KAAArJ,KAAA2hC,CAAO,EAC5B,CAAA,CAeKE,8GACJ,IAAMjgC,EAAMC,MAAM0nB,EAAMznB,MAAKuH,KAAArJ,KAAIA,KAAK2B,QAAR,aAA6B,CAAEL,OAAQ,MAAQ,CAAA,EACvEc,EAAQ,MAAMR,EAAIO,KAAM,EAC9B,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAeK0/B,0GACJ,IAAMlgC,EAAMC,MAAM0nB,EAAMznB,MAAKuH,KAAArJ,KAAIA,KAAK2B,QAAR,QAAuB,EAC/CS,EAAQ,MAAMR,EAAIO,KAAM,EAC9B,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAyBK2/B,UACJt/B,EACAe,2CAEA,IAAMF,EAAKtD,KAAKwE,YAAY/B,CAAU,EAChCg/B,EAAgBzhC,KAAK0hC,iBAAiBj/B,CAAU,EAChDI,EAAO4+B,EAAgB3+B,KAAKC,UAAU,CAAEO,GAAAA,EAAIm+B,cAAAA,CAAe,CAAA,EAAI3+B,KAAKC,UAAU,CAAEO,GAAAA,CAAI,CAAA,EACpF5B,EAAS1B,KAAK2D,QAAR,qBACJq+B,EAAcx+B,EAAdw+B,aACR79B,IAAM89B,EAAmBz+B,EAAnBy+B,kBACFD,IACI,CAAEjxB,KAAAA,EAAMmxB,KAAAA,CAAM,EAAGF,EACvBC,EAAiB7xB,EAAQW,EAAH,IAAWmxB,CAAM,GAEzC,IAAMlgC,EAAU,CACdsP,cAAe,SAAS2wB,EACxBhgC,OAAQ,mBACRgB,eAAgB,oBAGZrB,EAAMC,MAAM7B,KAAKe,OAAOe,MAAMJ,EAAK,CAAEmB,KAAAA,EAAMb,QAAAA,EAASV,OAD3C,MACiD,CAAE,EAC5Dc,EAAOP,MAAMD,EAAIO,OACvB,GAAiB,IAAbP,EAAIsC,OACN,KAAM,CAAEtC,IAAAA,EAAKQ,KAAAA,GAEf,MAAO,CAAER,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAESY,eAAeJ,GACvB,OAAOA,CACR,CAESO,eAAeP,GACjBu/B,EAAavhC,OAAOC,OAAO,GAAI+B,CAAM,EAE3C,OADA,OAAOu/B,EAAW7+B,GACX6+B,CACR,CAESz/B,aAAaD,GACfa,EAAKgM,mBAAmBtP,KAAK6D,YAAYpB,CAAU,CAAC,EAC1D,OAAUzC,KAAK2B,QAAR,IAAmB2B,CAC3B,CAEOo+B,iBAAiB9+B,GACvBuB,IAAIs9B,EAIJ,OAFEA,EADoB,UAAlB,OAAO7+B,EACOA,EAAO6+B,cAAgB/8B,OAAO9B,EAAO6+B,aAAa,EAAIj7B,KAAAA,EAEjEi7B,CACR,CACF,2SCzRYW,GAOXxiC,YAAYmB,GACVf,KAAKe,OAASA,CACf,CAyBK4B,OACJ0/B,4CAEAl+B,IAAIm+B,EAAMD,EACV,IAEMx/B,EAAO,IAAIiG,EACjB3E,IAAI0sB,EAAW,wBACK,aAAhB,OAAOE,MAAwBuR,aAAevR,OAChDF,EAAWyR,EAAIz8B,KAEXy8B,EAAIz8B,KAAKf,MADQ,QACU,KAC7Bw9B,EAAM,IAAIvR,KAAK,CAACuR,GAAMA,EAAIz8B,KAAM,CAAEtB,KAAM,UAAU,CAAE,GAGxD1B,EAAK8D,OAAO,OAAQ27B,EAAKzR,CAAQ,EACjC,IAGMjvB,EAAMC,MAAM7B,KAAKe,OAAOe,MAflB,uCAe6B,CAAER,OAd5B,OAcoCuB,KAAAA,EAAMb,QAHzC,CACdC,OAAQ,mBAEsD,CAAE,EAC5DG,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CACF,CC1DAmD,EAAAg9B,+BAAA,KAAA,GAJWA,EAAAA,EAA8BA,iCAA9BA,iCAIX,KAHC,SAAA,WACAA,EAAA,SAAA,WACAA,EAAA,QAAA,oTCCWC,WAAwB1hC,EAArClB,kCACYI,KAAO2D,QAAG,OACV3D,KAAO2B,QAAG,QACV3B,KAAYqC,aAAG,OA+C1B,CA5BOG,OAAOC,wGACX,OAAO8mB,EAAM/mB,OAAO6G,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAuBKlC,KAAKR,EAAiB,qGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CACF,KCpDI4xB,EAAAA,kSAAAA,EAAAA,EAAAA,GAGJ,IAFC,MAAA,QACAA,EAAA,MAAA,cAOW8Q,WAAyB3hC,EAAtClB,kCACYI,KAAO2D,QAAG,OACV3D,KAAYqC,aAAG,QAuS1B,CArSCV,cACE,OAAU3B,KAAKe,OAAOyN,OAAf,SACR,CAmBKhM,OAAOC,uGACX,OAAO8mB,EAAM/mB,OAAO6G,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAsBKE,OAAOC,uGACX,OAAO2mB,EAAM5mB,OAAO0G,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAwBKM,OAAON,uGACX,OAAO2mB,EAAMrmB,OAAOmG,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAuBKrC,KAAKR,EAAiB,oGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CAuBKqD,OAAOX,uGACX,OAAO8mB,EAAMnmB,OAAOiG,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAsBKigC,eACJjgC,EACAkgC,2CAEA,OAAO3iC,KAAK0yB,SAASf,EAAUiR,MAAOngC,EAAYkgC,CAAiB,EAGpE,CAAA,CAqBKE,oBACJpgC,EACAkgC,2CAEA,OAAO3iC,KAAKusB,YAAYoF,EAAUiR,MAAOngC,EAAYkgC,CAAiB,EACvE,CAAA,CAsBKG,eACJrgC,EACAkgC,2CAEA,OAAO3iC,KAAK0yB,SAASf,EAAUoR,MAAOtgC,EAAYkgC,CAAiB,EAGpE,CAAA,CAsBKK,oBACJvgC,EACAkgC,2CAEA,OAAO3iC,KAAKusB,YAAYoF,EAAUoR,MAAOtgC,EAAYkgC,CAAiB,EACvE,CAAA,CAESM,QAAQxQ,GAChB,MAA8B,UAA1B,OAAOA,GAA+BA,EAAextB,KAChDwtB,EAAextB,KAEfwtB,CAEV,CAEOiC,YACNnwB,EACA2+B,GAEA,OAAUljC,KAAK0C,aAAawgC,CAAa,EAAlC,IAAuC3+B,CAC/C,CAEO4+B,wBAAwB5+B,EAAiBkuB,GAC/C,IAAM2Q,EAAYpjC,KAAKijC,QAAQxQ,CAAc,EAC7C,OAAQluB,GACN,KAAKotB,EAAUiR,MACb,OAAO9/B,KAAKC,UAAU,CAAE+3B,KAAM,CAAE71B,KAAMP,OAAO0+B,CAAS,CAAG,CAAA,CAAE,EAC7D,KAAKzR,EAAUoR,MACb,OAAOjgC,KAAKC,UAAU,CAAEgO,KAAM,CAAE9L,KAAMP,OAAO0+B,CAAS,CAAG,CAAA,CAAE,CAC9D,CACD,MAAM,IAAI75B,MAAM,wDAAwD,CACzE,CAEampB,SACZnuB,EACA2+B,EACAzQ,2CAEA,IAAM/wB,EAAM1B,KAAK00B,YAAYnwB,EAAM2+B,CAAa,EAE1CrgC,EAAO7C,KAAKmjC,wBAAwB5+B,EAAMkuB,CAAc,EAKxD7wB,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OANrB,OAM6BuB,KAAAA,EAAMb,QAJlC,CACdC,OAAQ,mBACRgB,eAAgB,mBAEuC,CAAE,EACvDb,EAAOP,MAAMD,EAAIO,OAErB,MAAO,CAAEP,IAAAA,EAAKQ,KADPA,EAAKwuB,eAEb,CAAA,CAEarE,YACZhoB,EACA2+B,EACAzQ,2CAEA,IAAMkC,EAAU30B,KAAKwE,YAAYiuB,CAAc,EACzC/wB,EAAS1B,KAAK00B,YAAYnwB,EAAM2+B,CAAa,EAAvC,IAA4C5zB,mBAAmB5K,OAAOiwB,CAAO,CAAC,EAK1F,MAAO,CAAE/yB,IAFGC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OAFrB,SAE6BU,QAD5B,CAAEC,OAAQ,mBACyB,CAAE,EAEvCG,KADD,MAEd,CAAA,CACF,0SCjTYihC,GAKXzjC,YAAYmB,GAJJf,KAAO2D,QAAG,WACV3D,KAAYqC,aAAG,cAIrBrC,KAAKe,OAASA,CACf,CAsBKR,KAAK+iC,2CACT,IACM5hC,EAAM1B,KAAKujC,4BAA4BD,CAAe,EACtD1hC,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QAFpB,CAAEC,OAAQ,mBAEiB,CAAE,EACvCE,EAAON,MAAMD,EAAIO,OAEvB,MAAO,CAAEP,IAAAA,EAAKQ,KADDD,EAAKnC,KAAKqC,eAExB,CAAA,CAyBKM,OAAO6gC,2CACX,IAEM3gC,EAAOC,KAAKC,UAAUygC,CAAQ,EAC9B9hC,EAAM1B,KAAKujC,4BAA4BC,EAAS5S,cAActtB,EAAE,EAChE1B,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QAJpB,CAAEiB,eAAgB,mBAAoBhB,OAAQ,kBAAkB,EAInCX,OAH9B,OAGsCuB,KAAAA,CAAI,CAAE,EACrDT,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAsBKI,OAAOghC,2CACX,IACM9hC,EAAM1B,KAAKyjC,iBAAiBD,CAAQ,EACpC5hC,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QAFpB,CAAEC,OAAQ,mBAEiB,CAAE,EACvCG,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAsBKgB,OAAOogC,2CACX,IAEM9hC,EAAM1B,KAAKyjC,iBAAiBD,CAAQ,EAE1C,MAAO,CAAE5hC,IADGC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QAHpB,CAAEC,OAAQ,oBAGmBX,OAF9B,QAEoC,CAAE,EACvCc,KAAM,MACrB,CAAA,CAEaN,MAAMJ,EAAaoC,2CAC/B,IAAMlC,EAAsBC,MAAM7B,KAAKe,OAAOe,MAAMJ,EAAKoC,CAAI,EAC7D,GAAkB,KAAdlC,EAAIsC,OAAe,CACrBC,IAAI/B,EAAO,KACX,IACEA,EAAOP,MAAMD,EAAIO,MAOlB,CANC,MAAOiC,GACP,IACEhC,EAAOP,MAAMD,EAAIyC,MAGlB,CAFC,MAAOD,IAGV,CACD,KAAM,CAAExC,IAAAA,EAAKQ,KAAAA,EACd,CACD,OAAOR,EACR,CAAA,CAEO2hC,4BAA4BD,GAClC,UAAWtjC,KAAK2D,qBAAqB2/B,eACtC,CAEOG,iBAAiBD,GACvB,UAAWxjC,KAAK2D,uBAAuB6/B,EAASj/B,QAAQi/B,EAASE,UAClE,CACF,0SCxJYC,WAAkC7iC,EAA/ClB,kCAIYI,KAAO2B,QAAG,uBACV3B,KAAoB4jC,qBAAG,2BACvB5jC,KAAYqC,aAAG,cAyL1B,CA9LCsB,cACE,MAAO,mBAAmB3D,KAAKe,OAAOyN,MACvC,CAkBKjO,KAAKR,EAAiB,oGAC1B,OAAOwpB,EAAMhpB,KAAK8I,KAAArJ,KAAAD,CAAM,EACzB,CAAA,CAmBKyC,OAAOC,uGACX,OAAO8mB,EAAM/mB,OAAO6G,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAmBKW,OAAOX,uGACX,OAAO8mB,EAAMnmB,OAAOiG,KAAArJ,KAAAyC,CAAU,EAC/B,CAAA,CAqBKS,OAAON,uGACX,OAAO2mB,EAAMrmB,OAAOmG,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAuBKD,OAAOC,uGACX,OAAO2mB,EAAM5mB,OAAO0G,KAAArJ,KAAA4C,CAAM,EAC3B,CAAA,CAoBKihC,8BACJphC,2CAEA,IAEMf,KAAS1B,KAAK4jC,wBAAwB5jC,KAAK6D,YAAYpB,CAAU,sBACjEb,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEM,QAFpB,CAAEiB,eAAgB,mBAAoB80B,OAAQ,kBAAkB,EAEnCz2B,OAH9B,MAGoC,CAAE,EAC/Cc,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAsBK0hC,6BACJrhC,EACAshC,2CAEA,IAEMriC,KAAS1B,KAAK4jC,wBAAwB5jC,KAAK6D,YAAYpB,CAAU,QACjEI,EAAOC,KAAKC,UAAU,CAAEghC,wCAAAA,CAAyC,CAAA,EACjEniC,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OAJrB,OAI6BuB,KAAAA,EAAMb,QAHlC,CAAEiB,eAAgB,mBAAoB80B,OAAQ,kBAAkB,CAGvB,CAAE,EACrD31B,EAAOP,MAAMD,EAAIO,OACvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAESM,aAAaD,GACfa,EAAKtD,KAAK6D,YAAYpB,CAAU,EACtC,OAAUzC,KAAK2B,QAAR,IAAmB2B,CAC3B,CAESO,YAAYpB,GACpB0B,IAAIb,EAMJ,OAJEA,EADwB,UAAtB,OAAOb,GAA2BA,EAAWuhC,YAC1CvhC,EAAWuhC,YAEXvhC,CAGR,CACF,knBCjMYwhC,WAA2BnjC,EAgBtClB,YAAYmB,GACVyR,MAAMzR,CAAM,EAhBJf,KAAO2D,QAAG,YACV3D,KAAO2B,QAAG,iBAEH3B,KAAgBkkC,iBAAG,mBACnBlkC,KAAyBmkC,0BAAG,qBAC5BnkC,KAA0BokC,2BAAG,oBAC7BpkC,KAAiBqkC,kBAAG,kBACpBrkC,KAAoBskC,qBAAG,qBACvBtkC,KAAuBukC,wBAAG,0BAC1BvkC,KAAsBwkC,uBAAG,yBACzBxkC,KAAqBykC,sBAAG,wBACxBzkC,KAAqC0kC,sCAAG,aACxC1kC,KAAsC2kC,uCAAG,qBACzC3kC,KAAA4kC,2CAAgD5kC,KAAK2kC,uCAAR,eAI5D3kC,KAAK6kC,mBAAqB,IAAIpI,EAAmB17B,CAAM,CACxD,CAqBKyB,OAAOC,EAAyB1C,EAAiB,wGACrD,OAAOwpB,EAAM/mB,OAAM6G,KAAArJ,KAACyC,EAAY1C,CAAM,EACvC,CAAA,CAiCK4C,OAAOU,uGACX,IAAcyhC,GAAgBjjC,MAAM7B,KAAK+kC,qCAAoC,GAArE3iC,QACFQ,+CACDS,EAAI2hC,UAAU,EACjB,EAAChlC,KAAKykC,uBAAwBphC,EAAI4hC,mBACjCjlC,KAAKukC,yBAA0BlhC,EAAI6hC,sBAChC7hC,EAAI8hC,cAAgB,EAAGnlC,KAAKwkC,wBAAyBnhC,EAAI8hC,YAAc,CAAA,EAG7E,OAAOL,EAAc9kC,KAAKolC,mBAAmBxiC,CAAM,EAAI2mB,EAAM5mB,OAAO0G,KAAArJ,KAAA4C,CAAM,EAC3E,CAAA,CAoBKM,OAAOmiC,EAA6BtlC,EAAiB,wGACzD,IAAQuD,EAAO+hC,EAAP/hC,MAEMwhC,GAAgBjjC,MAAM7B,KAAK+kC,qCAAoC,GAArE3iC,QACMkjC,GAAYzjC,MAAM7B,KAAKwC,OAAOc,EAAI,CAAEiiC,aAAc,CAAA,CAAK,CAAE,GAA/DnjC,QAER,OAAO0iC,GAAe9kC,KAAKwlC,eAAeF,CAAO,EAC7CtlC,KAAKylC,mBAAmBJ,EAAItlC,CAAM,EAClCwpB,EAAMrmB,OAAOmG,KAAArJ,KAAAqlC,CAAE,EACpB,CAAA,CAoBKI,mBACJJ,EACAtlC,EAAiB,4CAEjB,IAAQuD,EAAqB+hC,EAArB/hC,MAAOoiC,EAASC,GAAKN,EAAvB,CAAoB,KAAA,EAEpBxiC,EAAOC,KAAKC,UAAU/C,KAAKmD,eAAeuiC,CAAS,CAAC,EAEpDhkC,EAAS1B,KAAK4kC,2CAAR,IAAsDthC,EAC5D1B,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OAJrB,MAI6BuB,KAAAA,EAAMb,QAFlC,CAAEiB,eAAgB,mBAAoBhB,OAAQ,kBAAkB,EAErBC,wBAAanC,CAAM,CAAE,CAAE,EAE5EqC,EAAOP,MAAMD,EAAIO,OAEvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAuBKgB,OAAOX,EAAyBP,EAAc,wGAClD,IAAc4iC,GAAgBjjC,MAAM7B,KAAK+kC,qCAAoC,GAArE3iC,QACFA,GAAO,MAAOpC,KAAKwC,OAAOC,EAAY,CAAE8iC,aAAc,CAAA,EAAO,GAAGnjC,KAEtE,OAAO0iC,GAAe9kC,KAAKwlC,eAAepjC,CAAI,EAC1CP,MAAM7B,KAAK4lC,mBAAmBxjC,CAAI,EAClCP,MAAM0nB,EAAMnmB,iBAAOhB,EAAMF,CAAM,EACpC,CAAA,CAeD6iC,uCACE,OAAO/kC,KAAK6kC,mBAAmB/G,YAAY,CACzCj4B,KAAM7F,KAAK0kC,qCACZ,CAAA,CACF,CAmBDmB,aAAaR,GACX,IAAMS,EAA4BT,EAAG9jC,eAAevB,KAAKmkC,yBAAyB,EAC5E4B,EAAmBV,GAAMA,EAAG9gC,OAASvE,KAAKkkC,iBAEhD,OAAO4B,GAA6BC,CACrC,CAmBDP,eAAeH,GACb,IAAMS,EAA4BT,EAAG9jC,eAAevB,KAAKmkC,yBAAyB,EAC5E6B,EAA6BX,EAAG9jC,eAAevB,KAAKokC,0BAA0B,EAC9E6B,EACHZ,GAAMA,EAAG9gC,OAASvE,KAAKqkC,mBAAsBgB,EAAG9gC,OAASvE,KAAKskC,qBAEjE,OAAOwB,GAA6BE,GAA8BC,CACnE,CAmBKL,mBAAmBnjC,2CACvB0B,IAAIb,EAGFA,EADwB,UAAtB,OAAOb,GAA2BA,EAAWa,GAC1Cb,EAAWa,GAEXb,EAGP,IACMf,EAAS1B,KAAK4kC,2CAAR,IAAsDthC,EAGlE,MAAO,CAAE1B,IAFGC,MAAM7B,KAAKe,OAAOe,MAAMJ,EAAK,CAAEJ,OAF5B,QAEkC,CAAE,EAErCc,KAAM,MACrB,CAAA,CAESsB,OAAOhC,EAAM,IACrB,IAAMwkC,EAAaxkC,EAAIkC,QAAQ,OAAQ,EAAE,EACnCD,EAAU3D,KAAK2D,QAAQC,QAAQ,OAAQ,EAAE,EAE/C,OAAIlC,EAAIi+B,SAAS3/B,KAAK4kC,0CAA0C,EACvDsB,EAEGviC,EAAH,IAAcuiC,CAExB,CAEad,mBACZxiC,2CAEA,IACMC,EAAOC,KAAKC,UAAUH,CAAM,EAE5BlB,EAAM1B,KAAK4kC,2CACXhjC,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OAJrB,OAI6BuB,KAAAA,EAAMb,QAFlC,CAAEiB,eAAgB,mBAAoBhB,OAAQ,kBAAkB,CAEvB,CAAE,EAErDG,EAAOP,MAAMD,EAAIO,OAEvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CACF,2SC/SY+jC,WAA0BrlC,EASrClB,YAAYmB,GACVyR,MAAMzR,CAAM,EARKf,KAAO2D,QAAG,oBAEZ3D,KAAQomC,SAAG,aACXpmC,KAAiBqmC,kBAAG,CAAC,OAAQ,cAAe,eAAgB,eAM3ErmC,KAAK6kC,mBAAqB,IAAIpI,EAAmB17B,CAAM,CACxD,CAaKulC,mEAMJ,OALmC9/B,KAAAA,IAA/BxG,KAAKumC,wBACPvmC,KAAKumC,uBAAwB,MACrBvmC,KAAK6kC,mBAAmB/G,YAAYqI,GAAkBK,gBAAgB,GAC5EpkC,MAEGpC,KAAKumC,sBACb,CAAA,CAmBKE,cAAchkC,4CAClB,IAAMf,EAAM1B,KAAK0mC,gBAAgBjkC,CAAU,EACrCb,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OAAQ,KAAK,CAAE,EAC7CqlC,GAAQ,MAAO/kC,EAAIO,KAAI,GAAIwkC,MACjC,MAAO,CAAE/kC,IAAAA,EAAKQ,KAAMukC,GACrB,CAAA,CAoBDC,6BACEC,EACAC,GAEA,IAIMC,EAJN,OAAiC,IAA7BD,EAAkBl9B,OACb1C,QAAQI,QAAQ,CAAE1F,IAAK,KAAMQ,KAAM,IAAI,CAAE,GAE1C4kC,EAAmBH,EAAnBG,kBACFD,EAAoB/mC,KAAKinC,sBAAsBD,EAAgBF,CAAiB,EAChFI,EAAQtmC,OAAAC,OAAA,GAAQgmC,CAAI,EAE1BjmC,OAAOC,OAAOqmC,EAAU,CAAEF,eAAgBD,CAAmB,CAAA,EACtD/mC,KAAKkD,OAAOgkC,CAAQ,EAC5B,CAkBKhkC,OAAO2jC,4CACX,IAAMnlC,EAAM1B,KAAKmnC,iBAAiBN,CAAI,EAEhChkC,EAAOC,KAAKC,UAAU/C,KAAKonC,uBAAuBP,EAAM7mC,KAAKqmC,iBAAiB,CAAC,EAE/EzkC,EAAMC,MAAM7B,KAAK8B,MAAMJ,EAAK,CAAEJ,OAHrB,MAG6BuB,KAAAA,EAAMb,QADlC,CAAEiB,eAAgB,mBAAoBhB,OAAQ,kBAAkB,CACvB,CAAE,EACrDG,EAAOP,MAAMD,EAAIO,OAEvB,MAAO,CAAEP,IAAAA,EAAKQ,KAAAA,GACf,CAAA,CAEO6kC,sBACND,EAA2B,GAC3BK,GAEA,OAAOL,EAAejnC,OAAOuD,GAAM,CAACtD,KAAKsnC,mBAAmBD,CAAc,EAAE1H,SAASr8B,CAAE,CAAC,CACzF,CAEOgkC,mBAAmBD,GACzB,OAAOA,EAAe3gC,IAAIjE,IACE,UAAtB,OAAOA,GAA2BA,EAAWa,GACxCb,EAAWa,GAEbb,GAFgBwG,UAGxB,CACF,CAEOk+B,iBAAiBN,GACvB,IAAMU,EAAcV,GAAQA,EAAKW,aAAeX,EAAKW,YAAYlkC,GACjEa,IAAIzC,EAAQ6lC,EAAcvnC,KAAK0mC,gBAAgBa,CAAW,EAAIvnC,KAAKomC,SAKnE,OAFE1kC,EADEmlC,EAAKvjC,GACE5B,EAAH,IAAUmlC,EAAKvjC,GAEhB5B,CACR,CAEO0lC,uBAAuBP,EAAsBY,GACnD,MAAMP,EAAQtmC,OAAAC,OAAA,GAAQgmC,CAAI,EAI1B,OAHAY,EAAepmC,QAAQqmC,IACrB,OAAOR,EAASQ,EAClB,CAAC,EACMR,CACR,CAEOR,gBAAgBjkC,EAA0B,IAChD,MAA0B,UAAtB,OAAOA,GAA2BA,EAAWa,qBACtBb,EAAWa,kCAEbb,cAC1B,EA5JuB0jC,GAAgBK,iBAAG,qTCsChCmB,EAmBXC,oBAA0B38B,EAA2BtH,2CACnD,IAAMiL,EAAO,IAAIiC,EAAU5F,CAAW,EAChC48B,EAAa,IAAIv5B,EAAYM,EAAMjL,CAAO,EAC1Cs5B,EAAap7B,MAAM7B,KAAK8nC,iBAAiBD,CAAU,EACnD9mC,EAAS,IAAI4mC,EAAO/4B,EAAMjL,CAAO,EAEvC,OADA5C,EAAOgnC,KAAKv5B,OAASyuB,EACdl8B,EACR,CAAA,CAqBDinC,oCAA0C/8B,EAA2BtH,2CACnE,IAAMsN,EAAQpP,MAAM7B,KAAKioC,sBAAsBh9B,EAAa,CAAA,EAAMtH,CAAO,EACnEiL,EAAO,IAAImD,EAAWd,CAAK,EAC3B42B,EAAa,IAAIv5B,EAAYM,EAAMjL,CAAO,EAC1Cs5B,EAAahyB,EAAYuD,SAAM,MAAWxO,KAAK8nC,iBAAiBD,CAAU,GAC1E9mC,EAAS,IAAI4mC,EAAO/4B,EAAMjL,CAAO,EAEvC,OADA5C,EAAOgnC,KAAKv5B,OAASyuB,EACdl8B,EACR,CAAA,CAsBDmnC,0CAAgDj9B,EAA2BtH,2CACzE,IAAMM,EAAWpC,MAAM7B,KAAKioC,sBAAsBh9B,EAAa,CAAA,EAAOtH,CAAO,EAC7EQ,IAAIyK,EAEFA,EADsB,aAApB,OAAOgD,SACF,IAAIU,EAAiBrO,CAAQ,EAE7B,IAAI+N,EAEb,IAAM61B,EAAa,IAAIv5B,EAAYM,EAAMjL,CAAO,EAC1Cs5B,EAAahyB,EAAYuD,SAAM,MAAWxO,KAAK8nC,iBAAiBD,CAAU,GAC1E9mC,EAAS,IAAI4mC,EAAO/4B,EAAMjL,CAAO,EAEvC,OADA5C,EAAOgnC,KAAKv5B,OAASyuB,EACdl8B,EACR,CAAA,CAODonC,uBAA6B3kC,2CAC3B,GAAM,CAAE4kC,SAAAA,EAAUnrB,QAAAA,EAAStZ,QAAAA,EAASs+B,eAAAA,CAAc,EAAKz+B,EACvDW,IAAMkkC,EAAW7kC,EAAX6kC,UACFprB,GAAW,CAACorB,IACdA,EAASnqB,KAAKH,IAAK,EAAGd,GAElB4qB,EAAa,IAAIv5B,EAAY9H,KAAAA,EAAW7C,CAAO,EAC/C2kC,EAAqB,IAAI9G,GAA0BqG,CAAU,EACnE1jC,IAAIpD,EACJ,IACE,IAAQqB,GAASP,MAAMymC,EAAmBvG,UAAUqG,EAAU,CAAEnG,eAAAA,CAAc,CAAE,GAAxE7/B,QACF,CAAEmmC,SAAAA,EAAUv3B,SAAAA,EAAUonB,SAAAA,CAAQ,EAAKh2B,EACnCwM,EAAO,IAAIiC,EAAU,CAAEE,KAAMw3B,EAAU/5B,OAAQ4pB,EAAUpnB,SAAAA,CAAQ,CAAE,GACzEjQ,EAAS,IAAI4mC,EAAO/4B,EAAMjL,CAAO,GAC1BokC,KAAKv5B,OAAS4pB,CAQtB,CAPC,MAAO1wB,GAEP,IADe,CAAC2gC,GAAUnqB,KAAKH,MAAQsqB,IAAgC,MAArB3gC,EAAM9F,IAAIsC,OAE1D,OAAOyjC,EAAOQ,gBAAgBvnC,OAAOC,OAAO,CAAEwnC,OAAAA,CAAQ,EAAE7kC,CAAO,CAAC,EAEhE,MAAMkE,CAET,CACD,OAAO3G,EACR,CAAA,CAyBDynC,oCACEC,EACA9kC,2CAEA,IAGQ+kC,GAA8C7mC,MAD1CA,MADO,IAAIyM,EAAY,IAAIuC,EAAU43B,CAAoB,EAAG9kC,CAAO,EAClD7B,MAFa,+CAE0B,GACJK,KAAI,GAA5DumC,SACR,OAAOA,EAAMhiC,IAAI,CAAA,CAAG8H,OAAAA,EAAQ3I,KAAAA,EAAMmL,SAAAA,CAAU,KACnC,CACLxC,OAAAA,EACAuC,KAAMlL,EACNmL,SAAAA,GAEH,EACF,CAAA,CAsCDi3B,6BACEh9B,EACA09B,EAAa,CAAA,EACbhlC,2CAEA,IAAMiL,EAAO,IAAIiC,EAAU5F,CAAW,EAChC48B,EAAa,IAAIv5B,EAAYM,EAAMjL,CAAO,EAChDQ,IAAIzC,EAAM,gBACNinC,IACFjnC,GAAO,UAELuJ,EAAYuD,SACd9M,GAAO,cAAcuJ,EAAYuD,QAEnC,IAAMtM,EAAS,IAAI8G,gBAAgB,CACjC4/B,WAAY,WACZL,SAAUt9B,EAAY8F,KACtBC,SAAU/F,EAAY+F,SACtB63B,SAAU59B,EAAYiG,GACvB,CAAA,EACKtP,EAAMC,MAAMgmC,EAAW/lC,MAAMJ,EAAK,CACtCJ,OAAQ,OACRuB,KAAMX,EAAO+G,SAAU,EACvBjH,QAAS,CACPiB,eAAgB,iDACjB,CACF,CAAA,EACD,GAAmB,MAAfrB,EAAIsC,OACN,KAAM,CAAEtC,IAAAA,CAAG,EAGb,OAAI+mC,GACW9mC,MAAMD,EAAIO,QAEG,aAGrBP,EACR,CAAA,CAEOkmC,wBAA8BgB,2CACpC,IACct6B,GAAW3M,MADH,IAAIi0B,EAAcgT,CAAW,EACN7S,QAAO,GAA5C7zB,QACR,OAAOoM,EAAO3I,KACf,CAAA,CAuDDjG,YAAYgP,EAAuBjL,GAC3B5C,EAAS,IAAIuN,EAAYM,EAAMjL,CAAO,EAC5C3D,KAAKgB,SAAW,IAAIgvB,GAASjvB,CAAM,EACnCf,KAAK+oC,MAAQ,IAAIzT,GAAav0B,EAAQf,KAAKgB,QAAQ,EACnDhB,KAAK02B,YAAc,IAAI+F,EAAmB17B,EAAQf,KAAKgB,QAAQ,EAC/DhB,KAAKgpC,MAAQ,IAAI7H,GAAapgC,CAAM,EACpCf,KAAK+nC,KAAOhnC,EACZf,KAAKsoC,mBAAqB,IAAI9G,GAA0BzgC,CAAM,EAC9Df,KAAKipC,uBAAyB,IAAI7G,GAA8BrhC,CAAM,EACtEf,KAAK0tB,MAAQ,IAAI2C,GAAatvB,EAAQf,KAAKgB,QAAQ,EACnDhB,KAAKkpC,UAAY,IAAItX,GAAiB7wB,EAAQf,KAAKgB,QAAQ,EAC3DhB,KAAKmpC,gBAAkB,IAAIxY,GAAuB5vB,CAAM,EACxDf,KAAKopC,cAAgB,IAAI9H,GAAqBvgC,CAAM,EACpDf,KAAKqpC,YAAc,IAAInU,GAAmBn0B,EAAQf,KAAKgB,QAAQ,EAC/DhB,KAAKshB,UAAY,IAAIkU,GAAiBz0B,CAAM,EAC5Cf,KAAKspC,cAAgB,IAAI7T,GAAqB10B,CAAM,EACpDf,KAAKwD,QAAU,CACb+lC,SAAU,IAAI/I,GAA6Bz/B,CAAM,EACjDyoC,OAAQ,IAAIxJ,GAAqBj/B,CAAM,EACvC0oC,MAAO,IAAI/I,GAA0B3/B,CAAM,EAC3CyN,OAAQ,IAAI2xB,GAAqBp/B,CAAM,GAEzCf,KAAK86B,KAAO,IAAIwG,GAAqBvgC,CAAM,EAC3Cf,KAAKwO,OAAS,IAAIsnB,EAAc/0B,CAAM,EACtCf,KAAK+Q,KAAO,IAAImmB,GAAYn2B,CAAM,EAClCf,KAAK0pC,UAAY,IAAIjH,GAAiB1hC,CAAM,EAC5Cf,KAAK2pC,SAAW,IAAInH,GAAgBzhC,CAAM,EAC1Cf,KAAKwjC,SAAW,IAAIH,GAAgBtiC,CAAM,EAC1Cf,KAAK4pC,YAAc,IAAI3F,GAAmBljC,CAAM,EAChDf,KAAK6pC,WAAa,IAAI1D,GAAkBplC,CAAM,CAC/C,CAMD2N,QAAQE,GACN5O,KAAK+nC,KAAKr5B,QAAQE,CAAI,EACtB5O,KAAKgB,SAASgmB,YACf,CACF","x_google_ignoreList":[2,4,5,7,15,16,19]}