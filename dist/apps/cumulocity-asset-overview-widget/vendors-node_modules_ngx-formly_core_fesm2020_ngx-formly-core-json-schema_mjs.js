"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcumulocity_asset_overview_widget"] = self["webpackChunkcumulocity_asset_overview_widget"] || []).push([["vendors-node_modules_ngx-formly_core_fesm2020_ngx-formly-core-json-schema_mjs"],{

/***/ "./node_modules/@ngx-formly/core/fesm2020/ngx-formly-core-json-schema.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@ngx-formly/core/fesm2020/ngx-formly-core-json-schema.mjs ***!
  \********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("var _angular_core__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FormlyJsonschema\": function() { return /* binding */ FormlyJsonschema; }\n/* harmony export */ });\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ \"webpack/sharing/consume/default/@angular/core/@angular/core\");\n/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ \"webpack/sharing/consume/default/@angular/forms/@angular/forms\");\n/* harmony import */ var _ngx_formly_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ngx-formly/core */ \"webpack/sharing/consume/default/@ngx-formly/core/@ngx-formly/core\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ \"webpack/sharing/consume/default/rxjs/operators/rxjs/operators\");\n\n\n\n\n\n\n// https://stackoverflow.com/a/27865285\nfunction decimalPlaces(a) {\n    if (!isFinite(a)) {\n        return 0;\n    }\n    let e = 1, p = 0;\n    while (Math.round(a * e) / e !== a) {\n        e *= 10;\n        p++;\n    }\n    return p;\n}\nfunction isEmpty(v) {\n    return v === '' || v == null;\n}\nfunction isObject(v) {\n    return v != null && typeof v === 'object' && !Array.isArray(v);\n}\nfunction isInteger(value) {\n    return Number.isInteger ? Number.isInteger(value) : typeof value === 'number' && Math.floor(value) === value;\n}\nfunction isConst(schema) {\n    return typeof schema === 'object' && (schema.hasOwnProperty('const') || (schema.enum && schema.enum.length === 1));\n}\nfunction totalMatchedFields(field) {\n    if (!field.fieldGroup) {\n        return (0,_ngx_formly_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵhasKey\"])(field) && (0,_ngx_formly_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵgetFieldValue\"])(field) !== undefined ? 1 : 0;\n    }\n    const total = field.fieldGroup.reduce((s, f) => totalMatchedFields(f) + s, 0);\n    if (total === 0 && (0,_ngx_formly_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵhasKey\"])(field)) {\n        const value = (0,_ngx_formly_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵgetFieldValue\"])(field);\n        if (value === null ||\n            (value !== undefined && ((field.fieldArray && Array.isArray(value)) || (!field.fieldArray && isObject(value))))) {\n            return 1;\n        }\n    }\n    return total;\n}\nclass FormlyJsonschema {\n    toFieldConfig(schema, options) {\n        return this._toFieldConfig(schema, { schema, ...(options || {}) });\n    }\n    _toFieldConfig(schema, { key, ...options }) {\n        schema = this.resolveSchema(schema, options);\n        const types = this.guessSchemaType(schema);\n        let field = {\n            type: types[0],\n            defaultValue: schema.default,\n            props: {\n                label: schema.title,\n                readonly: schema.readOnly,\n                description: schema.description,\n            },\n        };\n        if (key != null) {\n            field.key = key;\n        }\n        if (!options.ignoreDefault && (schema.readOnly || options.readOnly)) {\n            field.props.disabled = true;\n            options = { ...options, readOnly: true };\n        }\n        if (options.resetOnHide) {\n            field.resetOnHide = true;\n        }\n        if (key && options.strict) {\n            this.addValidator(field, 'type', (c, f) => {\n                const value = (0,_ngx_formly_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵgetFieldValue\"])(f);\n                if (value != null) {\n                    switch (field.type) {\n                        case 'string': {\n                            return typeof value === 'string';\n                        }\n                        case 'integer': {\n                            return isInteger(value);\n                        }\n                        case 'number': {\n                            return typeof value === 'number';\n                        }\n                        case 'object': {\n                            return isObject(value);\n                        }\n                        case 'array': {\n                            return Array.isArray(value);\n                        }\n                    }\n                }\n                return true;\n            });\n        }\n        if (options.shareFormControl === false) {\n            field.shareFormControl = false;\n        }\n        if (options.ignoreDefault) {\n            delete field.defaultValue;\n        }\n        this.addValidator(field, 'type', {\n            schemaType: types,\n            expression: ({ value }) => {\n                if (value === undefined) {\n                    return true;\n                }\n                if (value === null && types.indexOf('null') !== -1) {\n                    return true;\n                }\n                switch (types[0]) {\n                    case 'null': {\n                        return typeof value === null;\n                    }\n                    case 'string': {\n                        return typeof value === 'string';\n                    }\n                    case 'integer': {\n                        return isInteger(value);\n                    }\n                    case 'number': {\n                        return typeof value === 'number';\n                    }\n                    case 'object': {\n                        return isObject(value);\n                    }\n                    case 'array': {\n                        return Array.isArray(value);\n                    }\n                }\n                return true;\n            },\n        });\n        switch (field.type) {\n            case 'number':\n            case 'integer': {\n                field.parsers = [(v) => (isEmpty(v) ? undefined : Number(v))];\n                if (schema.hasOwnProperty('minimum')) {\n                    field.props.min = schema.minimum;\n                }\n                if (schema.hasOwnProperty('maximum')) {\n                    field.props.max = schema.maximum;\n                }\n                if (schema.hasOwnProperty('exclusiveMinimum')) {\n                    field.props.exclusiveMinimum = schema.exclusiveMinimum;\n                    this.addValidator(field, 'exclusiveMinimum', ({ value }) => isEmpty(value) || value > schema.exclusiveMinimum);\n                }\n                if (schema.hasOwnProperty('exclusiveMaximum')) {\n                    field.props.exclusiveMaximum = schema.exclusiveMaximum;\n                    this.addValidator(field, 'exclusiveMaximum', ({ value }) => isEmpty(value) || value < schema.exclusiveMaximum);\n                }\n                if (schema.hasOwnProperty('multipleOf')) {\n                    field.props.step = schema.multipleOf;\n                    this.addValidator(field, 'multipleOf', ({ value }) => {\n                        if (isEmpty(value) || typeof value !== 'number' || value === 0 || schema.multipleOf <= 0) {\n                            return true;\n                        }\n                        // https://github.com/ajv-validator/ajv/issues/652#issue-283610859\n                        const multiplier = Math.pow(10, decimalPlaces(schema.multipleOf));\n                        return Math.round(value * multiplier) % Math.round(schema.multipleOf * multiplier) === 0;\n                    });\n                }\n                break;\n            }\n            case 'string': {\n                field.parsers = [\n                    (v) => {\n                        if (types.indexOf('null') !== -1) {\n                            v = isEmpty(v) ? null : v;\n                        }\n                        else if (!field.props.required) {\n                            v = v === '' ? undefined : v;\n                        }\n                        return v;\n                    },\n                ];\n                ['minLength', 'maxLength', 'pattern'].forEach((prop) => {\n                    if (schema.hasOwnProperty(prop)) {\n                        field.props[prop] = schema[prop];\n                    }\n                });\n                break;\n            }\n            case 'object': {\n                if (!field.fieldGroup) {\n                    field.fieldGroup = [];\n                }\n                const { propDeps, schemaDeps } = this.resolveDependencies(schema);\n                Object.keys(schema.properties || {}).forEach((property) => {\n                    const isRequired = Array.isArray(schema.required) && schema.required.indexOf(property) !== -1;\n                    const f = this._toFieldConfig(schema.properties[property], {\n                        ...options,\n                        key: property,\n                        isOptional: options.isOptional || !isRequired,\n                    });\n                    field.fieldGroup.push(f);\n                    if (isRequired || propDeps[property]) {\n                        f.expressions = {\n                            ...(f.expressions || {}),\n                            'props.required': (f) => {\n                                let parent = f.parent;\n                                const model = f.fieldGroup && f.key != null ? parent.model : f.model;\n                                while (parent.key == null && parent.parent) {\n                                    parent = parent.parent;\n                                }\n                                const required = parent && parent.props ? parent.props.required : false;\n                                if (!model && !required) {\n                                    return false;\n                                }\n                                if (Array.isArray(schema.required) && schema.required.indexOf(property) !== -1) {\n                                    return true;\n                                }\n                                return propDeps[property] && f.model && propDeps[property].some((k) => !isEmpty(f.model[k]));\n                            },\n                        };\n                    }\n                    if (schemaDeps[property]) {\n                        const getConstValue = (s) => {\n                            return s.hasOwnProperty('const') ? s.const : s.enum[0];\n                        };\n                        const oneOfSchema = schemaDeps[property].oneOf;\n                        if (oneOfSchema &&\n                            oneOfSchema.every((o) => o.properties && o.properties[property] && isConst(o.properties[property]))) {\n                            oneOfSchema.forEach((oneOfSchemaItem) => {\n                                const { [property]: constSchema, ...properties } = oneOfSchemaItem.properties;\n                                field.fieldGroup.push({\n                                    ...this._toFieldConfig({ ...oneOfSchemaItem, properties }, { ...options, resetOnHide: true }),\n                                    expressions: {\n                                        hide: (f) => !f.model || getConstValue(constSchema) !== f.model[property],\n                                    },\n                                });\n                            });\n                        }\n                        else {\n                            field.fieldGroup.push({\n                                ...this._toFieldConfig(schemaDeps[property], options),\n                                expressions: {\n                                    hide: (f) => !f.model || isEmpty(f.model[property]),\n                                },\n                            });\n                        }\n                    }\n                });\n                if (schema.oneOf) {\n                    field.fieldGroup.push(this.resolveMultiSchema('oneOf', schema.oneOf, { ...options, shareFormControl: false }));\n                }\n                if (schema.anyOf) {\n                    field.fieldGroup.push(this.resolveMultiSchema('anyOf', schema.anyOf, options));\n                }\n                break;\n            }\n            case 'array': {\n                if (schema.hasOwnProperty('minItems')) {\n                    field.props.minItems = schema.minItems;\n                    this.addValidator(field, 'minItems', (c, f) => {\n                        const value = (0,_ngx_formly_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵgetFieldValue\"])(f);\n                        return isEmpty(value) || value.length >= schema.minItems;\n                    });\n                    if (!options.isOptional && schema.minItems > 0 && field.defaultValue === undefined) {\n                        field.defaultValue = Array.from(new Array(schema.minItems));\n                    }\n                }\n                if (schema.hasOwnProperty('maxItems')) {\n                    field.props.maxItems = schema.maxItems;\n                    this.addValidator(field, 'maxItems', (c, f) => {\n                        const value = (0,_ngx_formly_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵgetFieldValue\"])(f);\n                        return isEmpty(value) || value.length <= schema.maxItems;\n                    });\n                }\n                if (schema.hasOwnProperty('uniqueItems')) {\n                    field.props.uniqueItems = schema.uniqueItems;\n                    this.addValidator(field, 'uniqueItems', (c, f) => {\n                        const value = (0,_ngx_formly_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵgetFieldValue\"])(f);\n                        if (isEmpty(value) || !schema.uniqueItems) {\n                            return true;\n                        }\n                        const uniqueItems = Array.from(new Set(value.map((v) => JSON.stringify(v))));\n                        return uniqueItems.length === value.length;\n                    });\n                }\n                // resolve items schema needed for isEnum check\n                if (schema.items && !Array.isArray(schema.items)) {\n                    schema.items = this.resolveSchema(schema.items, options);\n                }\n                // TODO: remove isEnum check once adding an option to skip extension\n                if (!this.isEnum(schema)) {\n                    field.fieldArray = (root) => {\n                        if (!Array.isArray(schema.items)) {\n                            // When items is a single schema, the additionalItems keyword is meaningless, and it should not be used.\n                            const f = schema.items ? this._toFieldConfig(schema.items, options) : {};\n                            if (f.props) {\n                                f.props.required = true;\n                            }\n                            return f;\n                        }\n                        const length = root.fieldGroup ? root.fieldGroup.length : 0;\n                        const itemSchema = schema.items[length] ? schema.items[length] : schema.additionalItems;\n                        const f = itemSchema ? this._toFieldConfig(itemSchema, options) : {};\n                        if (f.props) {\n                            f.props.required = true;\n                        }\n                        if (schema.items[length]) {\n                            f.props.removable = false;\n                        }\n                        return f;\n                    };\n                }\n                break;\n            }\n        }\n        if (schema.hasOwnProperty('const')) {\n            field.props.const = schema.const;\n            this.addValidator(field, 'const', ({ value }) => value === schema.const);\n            if (!field.type) {\n                field.defaultValue = schema.const;\n            }\n        }\n        if (this.isEnum(schema)) {\n            field.props.multiple = field.type === 'array';\n            field.type = 'enum';\n            field.props.options = this.toEnumOptions(schema);\n        }\n        if (schema.oneOf && !field.type) {\n            delete field.key;\n            field.fieldGroup = [\n                this.resolveMultiSchema('oneOf', schema.oneOf, { ...options, key, shareFormControl: false }),\n            ];\n        }\n        if (schema.oneOf && !field.type) {\n            delete field.key;\n            field.fieldGroup = [\n                this.resolveMultiSchema('oneOf', schema.oneOf, { ...options, key, shareFormControl: false }),\n            ];\n        }\n        // map in possible formlyConfig options from the widget property\n        if (schema.widget?.formlyConfig) {\n            field = this.mergeFields(field, schema.widget.formlyConfig);\n        }\n        field.templateOptions = field.props;\n        // if there is a map function passed in, use it to allow the user to\n        // further customize how fields are being mapped\n        return options.map ? options.map(field, schema) : field;\n    }\n    resolveSchema(schema, options) {\n        if (schema && schema.$ref) {\n            schema = this.resolveDefinition(schema, options);\n        }\n        if (schema && schema.allOf) {\n            schema = this.resolveAllOf(schema, options);\n        }\n        return schema;\n    }\n    resolveAllOf({ allOf, ...baseSchema }, options) {\n        if (!allOf.length) {\n            throw Error(`allOf array can not be empty ${allOf}.`);\n        }\n        return allOf.reduce((base, schema) => {\n            schema = this.resolveSchema(schema, options);\n            if (base.required && schema.required) {\n                base.required = [...base.required, ...schema.required];\n            }\n            if (schema.uniqueItems) {\n                base.uniqueItems = schema.uniqueItems;\n            }\n            // resolve to min value\n            ['maxLength', 'maximum', 'exclusiveMaximum', 'maxItems', 'maxProperties'].forEach((prop) => {\n                if (!isEmpty(base[prop]) && !isEmpty(schema[prop])) {\n                    base[prop] = base[prop] < schema[prop] ? base[prop] : schema[prop];\n                }\n            });\n            // resolve to max value\n            ['minLength', 'minimum', 'exclusiveMinimum', 'minItems', 'minProperties'].forEach((prop) => {\n                if (!isEmpty(base[prop]) && !isEmpty(schema[prop])) {\n                    base[prop] = base[prop] > schema[prop] ? base[prop] : schema[prop];\n                }\n            });\n            return (0,_ngx_formly_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵreverseDeepMerge\"])(base, schema);\n        }, baseSchema);\n    }\n    resolveMultiSchema(mode, schemas, options) {\n        return {\n            type: 'multischema',\n            fieldGroup: [\n                {\n                    type: 'enum',\n                    defaultValue: -1,\n                    props: {\n                        multiple: mode === 'anyOf',\n                        options: schemas.map((s, i) => ({ label: s.title, value: i, disabled: s.readOnly })),\n                    },\n                    hooks: {\n                        onInit: (f) => f.formControl.valueChanges.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.tap)(() => f.options.detectChanges(f.parent))),\n                    },\n                },\n                {\n                    fieldGroup: schemas.map((s, i) => ({\n                        ...this._toFieldConfig(s, { ...options, resetOnHide: true }),\n                        expressions: {\n                            hide: (f, forceUpdate) => {\n                                const control = f.parent.parent.fieldGroup[0].formControl;\n                                if (control.value === -1 || forceUpdate) {\n                                    let value = f.parent.fieldGroup\n                                        .map((f, i) => [f, i, this.isFieldValid(f, i, schemas, options)])\n                                        .sort(([f1, , f1Valid], [f2, , f2Valid]) => {\n                                        if (f1Valid !== f2Valid) {\n                                            return f2Valid ? 1 : -1;\n                                        }\n                                        const matchedFields1 = totalMatchedFields(f1);\n                                        const matchedFields2 = totalMatchedFields(f2);\n                                        if (matchedFields1 === matchedFields2) {\n                                            if (f1.props.disabled === f2.props.disabled) {\n                                                return 0;\n                                            }\n                                            return matchedFields2 > matchedFields1 ? 1 : -1;\n                                        }\n                                        return matchedFields2 > matchedFields1 ? 1 : -1;\n                                    })\n                                        .map(([, i]) => i);\n                                    if (mode === 'anyOf') {\n                                        const definedValue = value.filter((i) => totalMatchedFields(f.parent.fieldGroup[i]));\n                                        value = definedValue.length > 0 ? definedValue : [value[0] || 0];\n                                    }\n                                    value = value.length > 0 ? value : [0];\n                                    control.setValue(mode === 'anyOf' ? value : value[0]);\n                                }\n                                return Array.isArray(control.value) ? control.value.indexOf(i) === -1 : control.value !== i;\n                            },\n                        },\n                    })),\n                },\n            ],\n        };\n    }\n    resolveDefinition(schema, options) {\n        const [uri, pointer] = schema.$ref.split('#/');\n        if (uri) {\n            throw Error(`Remote schemas for ${schema.$ref} not supported yet.`);\n        }\n        const definition = !pointer\n            ? null\n            : pointer\n                .split('/')\n                .reduce((def, path) => (def?.hasOwnProperty(path) ? def[path] : null), options.schema);\n        if (!definition) {\n            throw Error(`Cannot find a definition for ${schema.$ref}.`);\n        }\n        if (definition.$ref) {\n            return this.resolveDefinition(definition, options);\n        }\n        return {\n            ...definition,\n            ...['title', 'description', 'default', 'widget'].reduce((annotation, p) => {\n                if (schema.hasOwnProperty(p)) {\n                    annotation[p] = schema[p];\n                }\n                return annotation;\n            }, {}),\n        };\n    }\n    resolveDependencies(schema) {\n        const propDeps = {};\n        const schemaDeps = {};\n        Object.keys(schema.dependencies || {}).forEach((prop) => {\n            const dependency = schema.dependencies[prop];\n            if (Array.isArray(dependency)) {\n                // Property dependencies\n                dependency.forEach((dep) => {\n                    if (!propDeps[dep]) {\n                        propDeps[dep] = [prop];\n                    }\n                    else {\n                        propDeps[dep].push(prop);\n                    }\n                });\n            }\n            else {\n                // schema dependencies\n                schemaDeps[prop] = dependency;\n            }\n        });\n        return { propDeps, schemaDeps };\n    }\n    guessSchemaType(schema) {\n        const type = schema?.type;\n        if (!type && schema?.properties) {\n            return ['object'];\n        }\n        if (Array.isArray(type)) {\n            if (type.length === 1) {\n                return type;\n            }\n            if (type.length === 2 && type.indexOf('null') !== -1) {\n                return type.sort((t1) => (t1 == 'null' ? 1 : -1));\n            }\n            return type;\n        }\n        return type ? [type] : [];\n    }\n    addValidator(field, name, validator) {\n        field.validators = field.validators || {};\n        field.validators[name] = validator;\n    }\n    isEnum(schema) {\n        return (!!schema.enum ||\n            (schema.anyOf && schema.anyOf.every(isConst)) ||\n            (schema.oneOf && schema.oneOf.every(isConst)) ||\n            (schema.uniqueItems && schema.items && !Array.isArray(schema.items) && this.isEnum(schema.items)));\n    }\n    toEnumOptions(schema) {\n        if (schema.enum) {\n            return schema.enum.map((value) => ({ value, label: value }));\n        }\n        const toEnum = (s) => {\n            const value = s.hasOwnProperty('const') ? s.const : s.enum[0];\n            const option = { value, label: s.title || value };\n            if (s.readOnly) {\n                option.disabled = true;\n            }\n            return option;\n        };\n        if (schema.anyOf) {\n            return schema.anyOf.map(toEnum);\n        }\n        if (schema.oneOf) {\n            return schema.oneOf.map(toEnum);\n        }\n        return this.toEnumOptions(schema.items);\n    }\n    isFieldValid(root, i, schemas, options) {\n        if (!root._schemasFields) {\n            Object.defineProperty(root, '_schemasFields', { enumerable: false, writable: true, configurable: true });\n            root._schemasFields = {};\n        }\n        let field = root._schemasFields[i];\n        const model = root.model ? (0,_ngx_formly_core__WEBPACK_IMPORTED_MODULE_2__[\"ɵclone\"])(root.model) : root.fieldArray ? [] : {};\n        if (!field) {\n            field = root._schemasFields[i] = root.options.build({\n                form: Array.isArray(model) ? new _angular_forms__WEBPACK_IMPORTED_MODULE_1__.FormArray([]) : new _angular_forms__WEBPACK_IMPORTED_MODULE_1__.FormGroup({}),\n                fieldGroup: [\n                    this._toFieldConfig(schemas[i], {\n                        ...options,\n                        resetOnHide: true,\n                        ignoreDefault: true,\n                        map: null,\n                        strict: true,\n                    }),\n                ],\n                model,\n                options: {},\n            });\n        }\n        else {\n            field.model = model;\n            root.options.build(field);\n        }\n        return field.form.valid;\n    }\n    mergeFields(f1, f2) {\n        for (let prop in f2) {\n            const f1Prop = prop === 'templateOptions' ? 'props' : prop;\n            if (isObject(f1[f1Prop]) && isObject(f2[prop])) {\n                f1[f1Prop] = this.mergeFields(f1[f1Prop], f2[prop]);\n            }\n            else if (f2[prop] != null) {\n                f1[f1Prop] = f2[prop];\n            }\n        }\n        return f1;\n    }\n}\nFormlyJsonschema.ɵfac = _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ɵɵngDeclareFactory\"]({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: /*#__PURE__*/ (_angular_core__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_angular_core__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_angular_core__WEBPACK_IMPORTED_MODULE_0__, 2))), type: FormlyJsonschema, deps: [], target: _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ɵɵFactoryTarget\"].Injectable });\nFormlyJsonschema.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ɵɵngDeclareInjectable\"]({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: /*#__PURE__*/ (_angular_core__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_angular_core__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_angular_core__WEBPACK_IMPORTED_MODULE_0__, 2))), type: FormlyJsonschema, providedIn: 'root' });\n_angular_core__WEBPACK_IMPORTED_MODULE_0__[\"ɵɵngDeclareClassMetadata\"]({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: /*#__PURE__*/ (_angular_core__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_angular_core__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_angular_core__WEBPACK_IMPORTED_MODULE_0__, 2))), type: FormlyJsonschema, decorators: [{\n            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\n//# sourceMappingURL=ngx-formly-core-json-schema.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ngx-formly/core/fesm2020/ngx-formly-core-json-schema.mjs\n");

/***/ })

}]);