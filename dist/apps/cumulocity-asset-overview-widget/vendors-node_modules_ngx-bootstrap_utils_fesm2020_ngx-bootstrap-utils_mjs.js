"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcumulocity_asset_overview_widget"] = self["webpackChunkcumulocity_asset_overview_widget"] || []).push([["vendors-node_modules_ngx-bootstrap_utils_fesm2020_ngx-bootstrap-utils_mjs"],{

/***/ "./node_modules/ngx-bootstrap/utils/fesm2020/ngx-bootstrap-utils.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/ngx-bootstrap/utils/fesm2020/ngx-bootstrap-utils.mjs ***!
  \***************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BsVerions\": function() { return /* binding */ BsVerions; },\n/* harmony export */   \"LinkedList\": function() { return /* binding */ LinkedList; },\n/* harmony export */   \"OnChange\": function() { return /* binding */ OnChange; },\n/* harmony export */   \"Trigger\": function() { return /* binding */ Trigger; },\n/* harmony export */   \"Utils\": function() { return /* binding */ Utils; },\n/* harmony export */   \"currentBsVersion\": function() { return /* binding */ currentBsVersion; },\n/* harmony export */   \"document\": function() { return /* binding */ document; },\n/* harmony export */   \"getBsVer\": function() { return /* binding */ getBsVer; },\n/* harmony export */   \"listenToTriggers\": function() { return /* binding */ listenToTriggers; },\n/* harmony export */   \"listenToTriggersV2\": function() { return /* binding */ listenToTriggersV2; },\n/* harmony export */   \"parseTriggers\": function() { return /* binding */ parseTriggers; },\n/* harmony export */   \"registerEscClick\": function() { return /* binding */ registerEscClick; },\n/* harmony export */   \"registerOutsideClick\": function() { return /* binding */ registerOutsideClick; },\n/* harmony export */   \"setTheme\": function() { return /* binding */ setTheme; },\n/* harmony export */   \"warnOnce\": function() { return /* binding */ warnOnce; },\n/* harmony export */   \"window\": function() { return /* binding */ win; }\n/* harmony export */ });\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ \"webpack/sharing/consume/default/@angular/core/@angular/core\");\n\n\n/**\n * @copyright Valor Software\n * @copyright Angular ng-bootstrap team\n */\nclass Trigger {\n    constructor(open, close) {\n        this.open = open;\n        this.close = close || open;\n    }\n    isManual() {\n        return this.open === 'manual' || this.close === 'manual';\n    }\n}\n\nconst DEFAULT_ALIASES = {\n    hover: ['mouseover', 'mouseout'],\n    focus: ['focusin', 'focusout']\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction parseTriggers(triggers, aliases = DEFAULT_ALIASES) {\n    const trimmedTriggers = (triggers || '').trim();\n    if (trimmedTriggers.length === 0) {\n        return [];\n    }\n    const parsedTriggers = trimmedTriggers\n        .split(/\\s+/)\n        .map((trigger) => trigger.split(':'))\n        .map((triggerPair) => {\n        const alias = aliases[triggerPair[0]] || triggerPair;\n        return new Trigger(alias[0], alias[1]);\n    });\n    const manualTriggers = parsedTriggers.filter((triggerPair) => triggerPair.isManual());\n    if (manualTriggers.length > 1) {\n        throw new Error('Triggers parse error: only one manual trigger is allowed');\n    }\n    if (manualTriggers.length === 1 && parsedTriggers.length > 1) {\n        throw new Error('Triggers parse error: manual trigger can\\'t be mixed with other triggers');\n    }\n    return parsedTriggers;\n}\nfunction listenToTriggers(renderer, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntarget, triggers, showFn, hideFn, toggleFn) {\n    const parsedTriggers = parseTriggers(triggers);\n    const listeners = [];\n    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {\n        return Function.prototype;\n    }\n    parsedTriggers.forEach((trigger) => {\n        if (trigger.open === trigger.close) {\n            listeners.push(renderer.listen(target, trigger.open, toggleFn));\n            return;\n        }\n        listeners.push(renderer.listen(target, trigger.open, showFn));\n        if (trigger.close) {\n            listeners.push(renderer.listen(target, trigger.close, hideFn));\n        }\n    });\n    return () => {\n        listeners.forEach((unsubscribeFn) => unsubscribeFn());\n    };\n}\nfunction listenToTriggersV2(renderer, options) {\n    const parsedTriggers = parseTriggers(options.triggers);\n    const target = options.target;\n    // do nothing\n    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {\n        return Function.prototype;\n    }\n    // all listeners\n    const listeners = [];\n    // lazy listeners registration\n    const _registerHide = [];\n    const registerHide = () => {\n        // add hide listeners to unregister array\n        _registerHide.forEach((fn) => listeners.push(fn()));\n        // register hide events only once\n        _registerHide.length = 0;\n    };\n    // register open\\close\\toggle listeners\n    parsedTriggers.forEach((trigger) => {\n        const useToggle = trigger.open === trigger.close;\n        const showFn = useToggle ? options.toggle : options.show;\n        if (!useToggle && trigger.close && options.hide) {\n            const _hide = renderer.listen(target, trigger.close, options.hide);\n            _registerHide.push(() => _hide);\n        }\n        if (showFn) {\n            listeners.push(renderer.listen(target, trigger.open, () => showFn(registerHide)));\n        }\n    });\n    return () => {\n        listeners.forEach((unsubscribeFn) => unsubscribeFn());\n    };\n}\nfunction registerOutsideClick(renderer, options) {\n    if (!options.outsideClick) {\n        return Function.prototype;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return renderer.listen('document', 'click', (event) => {\n        if (options.target && options.target.contains(event.target)) {\n            return;\n        }\n        if (options.targets &&\n            options.targets.some(target => target.contains(event.target))) {\n            return;\n        }\n        if (options.hide) {\n            options.hide();\n        }\n    });\n}\nfunction registerEscClick(renderer, options) {\n    if (!options.outsideEsc) {\n        return Function.prototype;\n    }\n    return renderer.listen('document', 'keyup.esc', (event) => {\n        if (options.target && options.target.contains(event.target)) {\n            return;\n        }\n        if (options.targets &&\n            options.targets.some(target => target.contains(event.target))) {\n            return;\n        }\n        if (options.hide) {\n            options.hide();\n        }\n    });\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * JS version of browser APIs. This library can only run in the browser.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst win = (typeof window !== 'undefined' && window) || {};\nconst document = win.document;\nconst location = win.location;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst gc = win.gc ? () => win.gc() : () => null;\nconst performance = win.performance ? win.performance : null;\nconst Event = win.Event;\nconst MouseEvent = win.MouseEvent;\nconst KeyboardEvent = win.KeyboardEvent;\nconst EventTarget = win.EventTarget;\nconst History = win.History;\nconst Location = win.Location;\nconst EventListener = win.EventListener;\n\nvar BsVerions;\n(function (BsVerions) {\n    BsVerions[\"isBs4\"] = \"bs4\";\n    BsVerions[\"isBs5\"] = \"bs5\";\n})(BsVerions || (BsVerions = {}));\nlet guessedVersion;\nfunction _guessBsVersion() {\n    const spanEl = win.document.createElement('span');\n    spanEl.innerText = 'testing bs version';\n    spanEl.classList.add('d-none');\n    spanEl.classList.add('pl-1');\n    win.document.head.appendChild(spanEl);\n    const checkPadding = win.getComputedStyle(spanEl).paddingLeft;\n    if (checkPadding && parseFloat(checkPadding)) {\n        win.document.head.removeChild(spanEl);\n        return 'bs4';\n    }\n    win.document.head.removeChild(spanEl);\n    return 'bs5';\n}\nfunction setTheme(theme) {\n    guessedVersion = theme;\n}\nfunction isBs4() {\n    if (guessedVersion)\n        return guessedVersion === 'bs4';\n    guessedVersion = _guessBsVersion();\n    return guessedVersion === 'bs4';\n}\nfunction isBs5() {\n    if (guessedVersion)\n        return guessedVersion === 'bs5';\n    guessedVersion = _guessBsVersion();\n    return guessedVersion === 'bs5';\n}\nfunction getBsVer() {\n    return {\n        isBs4: isBs4(),\n        isBs5: isBs5()\n    };\n}\nfunction currentBsVersion() {\n    const bsVer = getBsVer();\n    const resVersion = Object.keys(bsVer).find(key => bsVer[key]);\n    return BsVerions[resVersion];\n}\n\nclass LinkedList {\n    constructor() {\n        this.length = 0;\n        this.asArray = [];\n        // Array methods overriding END\n    }\n    get(position) {\n        if (this.length === 0 || position < 0 || position >= this.length) {\n            return void 0;\n        }\n        let current = this.head;\n        for (let index = 0; index < position; index++) {\n            current = current?.next;\n        }\n        return current?.value;\n    }\n    add(value, position = this.length) {\n        if (position < 0 || position > this.length) {\n            throw new Error('Position is out of the list');\n        }\n        const node = {\n            value,\n            next: undefined,\n            previous: undefined\n        };\n        if (this.length === 0) {\n            this.head = node;\n            this.tail = node;\n            this.current = node;\n        }\n        else {\n            if (position === 0 && this.head) {\n                // first node\n                node.next = this.head;\n                this.head.previous = node;\n                this.head = node;\n            }\n            else if (position === this.length && this.tail) {\n                // last node\n                this.tail.next = node;\n                node.previous = this.tail;\n                this.tail = node;\n            }\n            else {\n                // node in middle\n                const currentPreviousNode = this.getNode(position - 1);\n                const currentNextNode = currentPreviousNode?.next;\n                if (currentPreviousNode && currentNextNode) {\n                    currentPreviousNode.next = node;\n                    currentNextNode.previous = node;\n                    node.previous = currentPreviousNode;\n                    node.next = currentNextNode;\n                }\n            }\n        }\n        this.length++;\n        this.createInternalArrayRepresentation();\n    }\n    remove(position = 0) {\n        if (this.length === 0 || position < 0 || position >= this.length) {\n            throw new Error('Position is out of the list');\n        }\n        if (position === 0 && this.head) {\n            // first node\n            this.head = this.head.next;\n            if (this.head) {\n                // there is no second node\n                this.head.previous = undefined;\n            }\n            else {\n                // there is no second node\n                this.tail = undefined;\n            }\n        }\n        else if (position === this.length - 1 && this.tail?.previous) {\n            // last node\n            this.tail = this.tail.previous;\n            this.tail.next = undefined;\n        }\n        else {\n            // middle node\n            const removedNode = this.getNode(position);\n            if (removedNode?.next && removedNode.previous) {\n                removedNode.next.previous = removedNode.previous;\n                removedNode.previous.next = removedNode.next;\n            }\n        }\n        this.length--;\n        this.createInternalArrayRepresentation();\n    }\n    set(position, value) {\n        if (this.length === 0 || position < 0 || position >= this.length) {\n            throw new Error('Position is out of the list');\n        }\n        const node = this.getNode(position);\n        if (node) {\n            node.value = value;\n            this.createInternalArrayRepresentation();\n        }\n    }\n    toArray() {\n        return this.asArray;\n    }\n    findAll(fn) {\n        let current = this.head;\n        const result = [];\n        if (!current) {\n            return result;\n        }\n        for (let index = 0; index < this.length; index++) {\n            if (!current) {\n                return result;\n            }\n            if (fn(current.value, index)) {\n                result.push({ index, value: current.value });\n            }\n            current = current.next;\n        }\n        return result;\n    }\n    // Array methods overriding start\n    push(...args) {\n        args.forEach((arg) => {\n            this.add(arg);\n        });\n        return this.length;\n    }\n    pop() {\n        if (this.length === 0) {\n            return undefined;\n        }\n        const last = this.tail;\n        this.remove(this.length - 1);\n        return last?.value;\n    }\n    unshift(...args) {\n        args.reverse();\n        args.forEach((arg) => {\n            this.add(arg, 0);\n        });\n        return this.length;\n    }\n    shift() {\n        if (this.length === 0) {\n            return undefined;\n        }\n        const lastItem = this.head?.value;\n        this.remove();\n        return lastItem;\n    }\n    forEach(fn) {\n        let current = this.head;\n        for (let index = 0; index < this.length; index++) {\n            if (!current) {\n                return;\n            }\n            fn(current.value, index);\n            current = current.next;\n        }\n    }\n    indexOf(value) {\n        let current = this.head;\n        let position = -1;\n        for (let index = 0; index < this.length; index++) {\n            if (!current) {\n                return position;\n            }\n            if (current.value === value) {\n                position = index;\n                break;\n            }\n            current = current.next;\n        }\n        return position;\n    }\n    some(fn) {\n        let current = this.head;\n        let result = false;\n        while (current && !result) {\n            if (fn(current.value)) {\n                result = true;\n                break;\n            }\n            current = current.next;\n        }\n        return result;\n    }\n    every(fn) {\n        let current = this.head;\n        let result = true;\n        while (current && result) {\n            if (!fn(current.value)) {\n                result = false;\n            }\n            current = current.next;\n        }\n        return result;\n    }\n    toString() {\n        return '[Linked List]';\n    }\n    find(fn) {\n        let current = this.head;\n        for (let index = 0; index < this.length; index++) {\n            if (!current) {\n                return;\n            }\n            if (fn(current.value, index)) {\n                return current.value;\n            }\n            current = current.next;\n        }\n    }\n    findIndex(fn) {\n        let current = this.head;\n        for (let index = 0; index < this.length; index++) {\n            if (!current) {\n                return -1;\n            }\n            if (fn(current.value, index)) {\n                return index;\n            }\n            current = current.next;\n        }\n        return -1;\n    }\n    getNode(position) {\n        if (this.length === 0 || position < 0 || position >= this.length) {\n            throw new Error('Position is out of the list');\n        }\n        let current = this.head;\n        for (let index = 0; index < position; index++) {\n            current = current?.next;\n        }\n        return current;\n    }\n    createInternalArrayRepresentation() {\n        const outArray = [];\n        let current = this.head;\n        while (current) {\n            outArray.push(current.value);\n            current = current.next;\n        }\n        this.asArray = outArray;\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction OnChange() {\n    const sufix = 'Change';\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function OnChangeHandler(target, propertyKey) {\n        const _key = ` __${propertyKey}Value`;\n        Object.defineProperty(target, propertyKey, {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            get() {\n                return this[_key];\n            },\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            set(value) {\n                const prevValue = this[_key];\n                this[_key] = value;\n                if (prevValue !== value && this[propertyKey + sufix]) {\n                    this[propertyKey + sufix].emit(value);\n                }\n            }\n        });\n    };\n}\n\nclass Utils {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static reflow(element) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ((bs) => bs)(element.offsetHeight);\n    }\n    // source: https://github.com/jquery/jquery/blob/master/src/css/var/getStyles.js\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static getStyles(elem) {\n        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n        // IE throws on elements created in popups\n        // FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n        let view = elem.ownerDocument.defaultView;\n        if (!view || !view.opener) {\n            view = win;\n        }\n        return view.getComputedStyle(elem);\n    }\n    static stackOverflowConfig() {\n        const bsVer = currentBsVersion();\n        return {\n            crossorigin: \"anonymous\",\n            integrity: bsVer === 'bs5' ? 'sha384-KyZXEAg3QhqLMpG8r+8fhAXLRk2vvoC2f3B09zVXn8CA5QIVfZOJ3BCsw2P0p/We' : 'sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2',\n            cdnLink: bsVer === 'bs5' ? 'https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css' : 'https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css',\n        };\n    }\n}\n\nconst _messagesHash = {};\nconst _hideMsg = typeof console === 'undefined' || !('warn' in console);\nfunction warnOnce(msg) {\n    if (!(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.isDevMode)() || _hideMsg || msg in _messagesHash) {\n        return;\n    }\n    _messagesHash[msg] = true;\n    console.warn(msg);\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\n//# sourceMappingURL=ngx-bootstrap-utils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ngx-bootstrap/utils/fesm2020/ngx-bootstrap-utils.mjs\n");

/***/ })

}]);